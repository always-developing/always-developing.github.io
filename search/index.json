[{"content":"What\u0026rsquo;s the issue? When working with strings in C# one can either use String (uppercase) or string (lowercase) and in both cases the code will compile and execute.\nExplicitly typed string variables can be done in either of the following ways:\nstring variable = \u0026#34;Always Developing\u0026#34;; String variable = \u0026#34;Always Developing\u0026#34;; Or when invoking string related methods, both of the following examples are valid:\nstring variable = string.Format(\u0026#34;Always Developing using {0}\u0026#34;, \u0026#34;C#\u0026#34;); String variable = String.Format(\u0026#34;Always Developing using {0}\u0026#34;, \u0026#34;Typescript\u0026#34;); Whats the difference between using String and using string? Is there a difference? Does it really matter?\nIs there a difference?   System.String is a .NET CLR (Common Runtime Library) class. This means it\u0026rsquo;s part of the core .NET environment, which sits one level below the specific language implementation.\n  string is a C# specific keyword, which is an alias for the CLR System.String type.\n  What this means is that string is just another name for System.String and they are effectively equivalent.\n     The same way int is an alias and maps to the CLR type System.Int32 and long is an alias and map to CLR type System.Int64, string is an alias and maps to the CLR type System.String\n   Deeper comparisons Variable declaration We can further confirm String and string are equivalent by comparing the IL (Intermediate Language) code generated when declaring variables using both of the types.\n     This post is primarily to compare the C# String and string types, but VB.NET examples have also been included in the comparison for completeness.\n   Take these three methods, all functionally equivalent, but declaring the variable using the different types:\npublic string GetString() { String variable = \u0026#34;string value\u0026#34;; return variable; } public string GetString() { string variable = \u0026#34;string value\u0026#34;; return variable; } Public Function GetString() As String Dim variable As String = \u0026#34;string value\u0026#34; Return variable End Function The IL code generated by all three examples is all effectively identical:\n// Methods .method public hidebysig instance string GetString () cil managed { // Method begins at RVA 0x2050  // Code size 6 (0x6)  .maxstack 8 IL_0000: ldstr \u0026#34;string value\u0026#34; IL_0005: ret } // end of method CClass::GetString  String method invocation So it\u0026rsquo;s confirmed that String and string are equivalent when declaring variables, but what about with method invocation?\nAgain, three functionally equivalent methods, but invoking the Format method differently:\npublic string StringFormat() { var insertString = \u0026#34;C#\u0026#34;; var variable = String.Format(\u0026#34;Always Developing using {0}\u0026#34;, insertString); return variable; } public string StringFormat() { var insertString = \u0026#34;C#\u0026#34;; var variable = string.Format(\u0026#34;Always Developing using {0}\u0026#34;, insertString); return variable; } Public Function StringFormat() As String Dim insertString = \u0026#34;C#\u0026#34; Dim variable = String.Format(\u0026#34;Always Developing using {0}\u0026#34;, insertString) Return variable End Function When the generated IL code is compared, in all three cases, it is equivalent:\n// Methods .method public hidebysig instance string StringFormat () cil managed { // Method begins at RVA 0x2050  // Code size 18 (0x12)  .maxstack 2 .locals init ( [0] string insertString ) IL_0000: ldstr \u0026#34;C#\u0026#34; IL_0005: stloc.0 IL_0006: ldstr \u0026#34;Always Developing using {0}\u0026#34; IL_000b: ldloc.0 IL_000c: call string [System.Private.CoreLib]System.String::Format(string, object) IL_0011: ret } // end of method CClass::StringFormat  Conclusion Use either String or string, they are effectively equivalent.\nHowever, the recommended approach is to use the C# language specific keyword string, as it works without having to include using System;\n     The recommendation method of using string comes from the official Microsoft documentation, and is included as a default style rule in Visual Studio\n        It is recommended to use implicitly type local variables (where appropriate) by using the var keyword (instead of string, in the above examples), and having the type inferred by the compiled.\nThe use of var versus explicate declaration is a personal preference, and will not effect the execution or performance of the code.\nPersonally I use var in my code: I find the code cleaner and easier to read. One can see the type being inferred by the compiler by hovering the mouse cursor over the var keyword in Visual Studio.\n   References and links Microsoft string guidance\nMicrosoft style rule\nImplicitly typed variables\nSharp lab - IL generator\n","date":"0001-01-01T00:00:00Z","permalink":"https://alwaysdeveloping.net/p/string-vs-string/","title":"C# String vs string"}]