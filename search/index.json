[{"content":"The challenge Consider a scenario where the requirement is to upload a file to an online provider (AWS S3, Azure Blob or a FTP site in the examples below), where the provider can be easily changed (either dynamically at runtime, or easily with minimal code changes), with the possibility additional providers being added in future.\nTo make use of dependency injection, a generic interface is created, IFileUploader, along with three implementations AWSUploader, AzureUploader and FTPUploader. The interface prescribes that the implementations provide a method to upload a file (UploadFile) and a method to get the implementation name (GetName).\nThe built in .NET dependency injection (DI) container is all one will need for almost all situations (including this situation): however this scenario can be a bit more challenging to get right - with multiple implementations of the same interface, how do you get the right implementation from the DI container?\nThe problem with .NET dependency injection container One piece of functionality the .NET DI container does not have (which is available in some other 3rd party DI/IoC containers) is the ability to add and retrieve service implementations by name.\nShort of actually implementing one of these other 3rd party containers, below are a number of different options and techniques one can use to get the correct implementation from the DI container when there are multiple implementations registered.\n     The benchmarks on the below techniques were all executed at the same time under the same conditions using BenchmarkDotNet\nEven though some some techniques performed poorly when compared to others, bear in mind that the time frame in question here is nanoseconds (a nanosecond is one billionth of a second).\nIn most scenarios, the DI technique used (if used correctly) is not going to make a massive material different to the performance of the application/service (of course there are exceptions, depending on how complicated the dependency tree is)\n   The different techniques IEnumerable   Configuration:\nThis is the simplest \u0026lsquo;out of the box\u0026rsquo; technique, with the various implementations just all added to the DI container using the same interface (lines 7-9): 1 2 3 4 5 6 7 8 9 10 11  private readonly IHost host; public EnumerableBenchmark() { host = Host.CreateDefaultBuilder() .ConfigureServices((context, services) =\u0026gt; services .AddTransient\u0026lt;EnumerableHandler\u0026gt;() .AddTransient\u0026lt;IFileUploader, AWSUploader\u0026gt;() .AddTransient\u0026lt;IFileUploader, AzureUploader\u0026gt;() .AddTransient\u0026lt;IFileUploader, FTPUploader\u0026gt;() ).Build(); }  \n  Usage:\nInject IEnumerableinto the relevant class (line 4), and then retrieve the required implementation from the IEnumerable collection (lines 11-13) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  public class EnumerableHandler { private readonly IEnumerable\u0026lt;IFileUploader\u0026gt; _uploaders; public EnumerableHandler(IEnumerable\u0026lt;IFileUploader\u0026gt; uploaders) { _uploaders = uploaders; } public void Execute() { var providerName = \u0026#34;aws\u0026#34;; var uploader = _uploaders.FirstOrDefault(up =\u0026gt; up .GetName().Equals(providerName)); if (uploader == null) { throw new ArgumentException($\u0026#34;No uploader with name \u0026#34; + $\u0026#34;{providerName} could be found\u0026#34;); } uploader.UploadFile(); } }  \n  Pros:\n Easy to implement Implementation can be selected/changed at runtime    Cons:\n Every implementation is instantiated (as part of IEnumerable) even if not required or used. This could be especially problematic if the implementations themselves have a number of dependencies which then need to be instantiated (this was NOT the case with the benchmarks) which could result in a negative performance impact. The logic to retrieve the implementation from IEnumerable is contained in multiple places (each class which has it injected)    Performance:\n   Type Method Mean Error StdDev Ratio RatioSD Gen 0 Allocated     Enumerable Execute 86.99 ns 0.987 ns 0.924 ns 1.00 0.00 0.0421 264 B       Factory One of the negative aspects of the IEnumerable approach, is that the logic to retrieve the correct implementation could be present in multiple places (if IEnumberable is injected into multiple classes). The Factory approach moves the logic into a separate actory class, which is then injected and is responsible for retrieving the required implementation.\n  Configuration:\nConfiguration is the same as IEnumerable, the various implementations all added to the DI container using the same interface, with one additional class added, the factory class (line 7) 1 2 3 4 5 6 7 8 9 10 11 12  private readonly IHost host; public FactoryBenchmark() { host = Host.CreateDefaultBuilder() .ConfigureServices((context, services) =\u0026gt; services .AddTransient\u0026lt;FactoryHandler\u0026gt;() .AddTransient\u0026lt;FileUploaderFactory\u0026gt;() .AddTransient\u0026lt;IFileUploader, AWSUploader\u0026gt;() .AddTransient\u0026lt;IFileUploader, AzureUploader\u0026gt;() .AddTransient\u0026lt;IFileUploader, FTPUploader\u0026gt;() ).Build(); }  \nThe factory looks very similar to the handler from the IEnumerable approach: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  public class FileUploaderFactory { private readonly IEnumerable\u0026lt;IFileUploader\u0026gt; _uploaders; public FileUploaderFactory(IEnumerable\u0026lt;IFileUploader\u0026gt; uploaders) { _uploaders = uploaders; } public IFileUploader Resolve(string providerName) { var uploader = _uploaders.FirstOrDefault(up =\u0026gt; up .GetName().Equals(providerName)); if (uploader == null) { throw new ArgumentException($\u0026#34;No uploader with name \u0026#34; + $\u0026#34;{providerName} could be found\u0026#34;); } return uploader; } }  \n  Usage:\nThe factory is now injected into the relevant class (line 4) and is then invoked to get the requested implementation (line 12) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  public class FactoryHandler { private readonly FileUploaderFactory _factory; public FactoryHandler(FileUploaderFactory factory) { _factory = factory; } public void Execute() { var providerName = \u0026#34;azure\u0026#34;; var uploader = _factory.Resolve(providerName); uploader.UploadFile(); } }  \n  Pros:\n Easy to implement Implementation can be selected/changed at runtime Retrieval logic is contained in a single place    Cons:\n Every implementation is instantiated (as part of IEnumerable) even if not required or used. This could have an impact on performance and memory usage. Slightly slower, and slightly more memory usage than the IEnumerable approach (due to the extra layer between the handler and the IEnumerable collection)    Performance:\n   Type Method Mean Error StdDev Ratio RatioSD Gen 0 Allocated     Enumerable Execute 86.99 ns 0.987 ns 0.924 ns 1.00 0.00 0.0421 264 B   Factory Execute 103.20 ns 1.324 ns 1.238 ns 1.19 0.02 0.0459 288 B       Type Factory A big negative aspect of the IEnumerable and Factory approach, is that all the implementations are instantiated every time, even if not used or required. This could have big impact on performance and memory if the implementations them themselves have many dependencies (and those dependencies have dependencies and so on).\nThe next approach is extends on the Factory technique, but only instantiates the requested implementation based on naming conventions.\n  Configuration:\nSetup is the same as with the Factory method. 1 2 3 4 5 6 7 8 9 10 11 12  private readonly IHost host; public FactoryBenchmark() { host = Host.CreateDefaultBuilder() .ConfigureServices((context, services) =\u0026gt; services .AddTransient\u0026lt;TypeFactoryHandler\u0026gt;() .AddTransient\u0026lt;FileUploaderTypeFactory\u0026gt;() .AddTransient\u0026lt;IFileUploader, AWSUploader\u0026gt;() .AddTransient\u0026lt;IFileUploader, AzureUploader\u0026gt;() .AddTransient\u0026lt;IFileUploader, FTPUploader\u0026gt;() ).Build(); }  \nThe factory in this approach, takes the requested name, finds the type based on the name (lines 11-12) and gets it from the DI container (line 20) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  public class FileUploaderTypeFactory { private readonly IServiceProvider _provider; public FileUploaderTypeFactory(IServiceProvider provider) { _provider = provider; } public IFileUploader Resolve(string providerName) { var type = Assembly.GetAssembly(typeof(FileUploaderTypeFactory)).GetType( $\u0026#34;{typeof(FileUploaderTypeFactory).Namespace}.{providerName}Uploader\u0026#34;); if (type == null) { throw new ArgumentException($\u0026#34;No uploader with name \u0026#34; + $\u0026#34;{providerName} could be found\u0026#34;); } var uploader = _provider.GetService(type); return uploader as IFileUploader; } }  \n  Usage:\nThe factory is now injected into the relevant class (line 4) and is then invoked to get the requested implementation (line 12) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  public class TypeFactoryHandler { private readonly FileUploaderTypeFactory _factory; public TypeFactoryHandler(FileUploaderTypeFactory factory) { _factory = factory; } public void Execute() { var providerName = \u0026#34;Azure\u0026#34;; var uploader = _factory.Resolve(providerName); uploader.UploadFile(); } }  \n  Pros:\n Not all implementations are instantiated Better memory usage compared to other two approaches so far Implementation can be selected/changed at runtime Retrieval logic is contained in a single place    Cons:\n Use of reflection to convert the name to a Type does have an big impact on performance Strict naming convention has to be followed in order for the reflection logic to work correctly    Performance:\n   Type Method Mean Error StdDev Ratio RatioSD Gen 0 Allocated     Enumerable Execute 86.99 ns 0.987 ns 0.924 ns 1.00 0.00 0.0421 264 B   Factory Execute 103.20 ns 1.324 ns 1.238 ns 1.19 0.02 0.0459 288 B   TypeFactory Execute 525.19 ns 2.624 ns 2.455 ns 6.04 0.07 0.0277 176 B       Delegate The next approach tries to achieve the same as the Type Factory approach - not instantiating every implementation, but using a different technique.\nIn short, a delegate is called at runtime when an implementation is requested, and using a switch statement the correct one is determined and returned.\n  Configuration:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  private readonly IHost host; public DelegateBenchmark() { host = Host.CreateDefaultBuilder() .ConfigureServices((context, services) =\u0026gt; services .AddScoped\u0026lt;AWSUploader\u0026gt;() .AddScoped\u0026lt;AzureUploader\u0026gt;() .AddScoped\u0026lt;FTPUploader\u0026gt;() .AddTransient\u0026lt;DelegateHandler\u0026gt;() .AddTransient\u0026lt;DelegateResolver\u0026gt;(serviceProvider =\u0026gt; providerName =\u0026gt; { switch (providerName) { case \u0026#34;aws\u0026#34;: return serviceProvider.GetService\u0026lt;AWSUploader\u0026gt;(); case \u0026#34;azure\u0026#34;: return serviceProvider.GetService\u0026lt;AzureUploader\u0026gt;(); case \u0026#34;ftp\u0026#34;: return serviceProvider.GetService\u0026lt;FTPUploader\u0026gt;(); default: throw new ArgumentException($\u0026#34;No uploader with \u0026#34; + $\u0026#34;name {providerName} could be found\u0026#34;); } })).Build(); }  \nThe DelegateResolver is as follows 1  public delegate IFileUploader DelegateResolver(string providerName);  \n  Usage:\nThe delegate is now injected into the relevant class (line 4) and is then invoked to get the requested implementation (line 11) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  public class DelegateHandler { private readonly DelegateResolver _resolver; public DelegateHandler(DelegateResolver resovler) { _resolver = resovler; } public void Execute() { var uploader = _resolver(\u0026#34;ftp\u0026#34;); uploader.UploadFile(); } }  \n  Pros:\n Not all implementations are instantiated Best memory usage compared to other approaches so far Implementation can be selected/changed at runtime Retrieval logic is contained in a single place    Cons:\n Slightly more complicated setup with the delegate and switch statement compared to other approaches Switch statement is hardcoded and needs to be manually maintained every time a new provider is added    Performance:\n   Type Method Mean Error StdDev Ratio RatioSD Gen 0 Allocated     Enumerable Execute 86.99 ns 0.987 ns 0.924 ns 1.00 0.00 0.0421 264 B   Factory Execute 103.20 ns 1.324 ns 1.238 ns 1.19 0.02 0.0459 288 B   TypeFactory Execute 525.19 ns 2.624 ns 2.455 ns 6.04 0.07 0.0277 176 B   Delegate Execute 111.45 ns 1.456 ns 1.291 ns 1.28 0.02 0.0178 112 B       Type Delegate The next approach extends the Delegate technique, and uses reflection and naming conventions to get the Type dynamically.\n  Configuration:\nSetup is as follows, very similar to the Delegate approach, but instead of the switch statement, reflection is used to get the Type based on naming conventions. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  private readonly IHost host; public TypeDelegateBenchmark() { host = Host.CreateDefaultBuilder() .ConfigureServices((context, services) =\u0026gt; services .AddScoped\u0026lt;AWSUploader\u0026gt;() .AddScoped\u0026lt;AzureUploader\u0026gt;() .AddScoped\u0026lt;FTPUploader\u0026gt;() .AddTransient\u0026lt;TypeDelegateHandler\u0026gt;() .AddTransient\u0026lt;TypeDelegateResolver\u0026gt;(serviceProvider =\u0026gt; providerName =\u0026gt; { var type = Assembly.GetAssembly(typeof(FileUploaderTypeFactory)) .GetType($\u0026#34;{typeof(FileUploaderTypeFactory).Namespace} .{providerName}Uploader\u0026#34;, false, true); if (type == null) { throw new ArgumentException($\u0026#34;No uploader with \u0026#34; + $\u0026#34;name {providerName} could be found\u0026#34;); } var uploader = serviceProvider.GetService(type); return uploader as IFileUploader; })).Build(); }  \nThe DelegateResolver is the same as before. 1  public delegate IFileUploader DelegateResolver(string providerName);  \n  Usage:\nThe delegate is now injected into the relevant class (line 4) and is then invoked to get the requested implementation (line 11) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  public class TypeDelegateHandler { private readonly DelegateResolver _resolver; public TypeDelegateHandler(DelegateResolver resovler) { _resolver = resovler; } public void Execute() { var uploader = _resolver(\u0026#34;ftp\u0026#34;); uploader.UploadFile(); } }  \n  Pros:\n Not all implementations are instantiated Implementation can be selected/changed at runtime Retrieval logic is contained in a single place No switch statement to maintain when a new provider is added    Cons:\n Use of reflection to convert the name to a Type does have a large impact on performance Strict naming convention has to be followed in order for the reflection logic to work correctly    Performance:\n   Type Method Mean Error StdDev Ratio RatioSD Gen 0 Allocated     Enumerable Execute 86.99 ns 0.987 ns 0.924 ns 1.00 0.00 0.0421 264 B   Factory Execute 103.20 ns 1.324 ns 1.238 ns 1.19 0.02 0.0459 288 B   TypeFactory Execute 525.19 ns 2.624 ns 2.455 ns 6.04 0.07 0.0277 176 B   Delegate Execute 111.45 ns 1.456 ns 1.291 ns 1.28 0.02 0.0178 112 B   TypeDelegate Execute 861.84 ns 6.599 ns 5.850 ns 9.90 0.15 0.0343 216 B       Distinct The next technique uses a wrapper to make each implementation added to the DI container unique, and hence can be retrieved uniquely.\n  Configuration:\nAdditional types are also now required to be defined and added to the DI container, IGenericUploader and GenericUploader 1 2 3 4 5 6 7 8 9 10 11 12 13 14  private readonly IHost host; public DistinctBenchmark() { host = Host.CreateDefaultBuilder() .ConfigureServices((context, services) =\u0026gt; services .AddScoped\u0026lt;AWSUploader\u0026gt;() .AddScoped\u0026lt;AzureUploader\u0026gt;() .AddScoped\u0026lt;FTPUploader\u0026gt;() .AddTransient\u0026lt;DistinctHandler\u0026gt;() .AddScoped\u0026lt;IGenericUploader\u0026lt;AWSUploader\u0026gt;, GenericUploader\u0026lt;AWSUploader\u0026gt;\u0026gt;() .AddScoped\u0026lt;IGenericUploader\u0026lt;AzureUploader\u0026gt;, GenericUploader\u0026lt;AzureUploader\u0026gt;\u0026gt;() .AddScoped\u0026lt;IGenericUploader\u0026lt;FTPUploader\u0026gt;, GenericUploader\u0026lt;FTPUploader\u0026gt;\u0026gt;() ).Build(); }  \nIGenericUploader is defined as below. 1  public interface IGenericUploader\u0026lt;T\u0026gt; : IFileUploader where T : IFileUploader { }  \nGenericUploader is defined as below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  public class GenericUploader\u0026lt;T\u0026gt; : IGenericUploader\u0026lt;T\u0026gt; where T : IFileUploader { private readonly T _implementation; public GenericUploader(T implementation) { _implementation = implementation; } public string GetName() { return _implementation.GetName(); } public void UploadFile() { _implementation.UploadFile(); } }  \n  A new generic provider is defined (implementing the relevant interface) and the generic provider wraps the \u0026ldquo;true provider\u0026rdquo; implementation. As the generic implementation takes a T argument, this can be used to uniquely distinguish them and retrieve the correct implementation.\n  Usage:\nThe generic interface with the required implementation is now injected into the relevant class (line 4) and is then invoked (line 11) 1 2 3 4 5 6 7 8 9 10 11 12 13  public class DistinctHandler { private readonly IGenericUploader\u0026lt;AWSUploader\u0026gt; _uploader; public DistinctHandler(IGenericUploader\u0026lt;AWSUploader\u0026gt; uploader) { _uploader = uploader; } public void Execute() { _uploader.UploadFile(); } }  \n  Pros:\n Not all implementations are instantiated The default DI container is doing all the retrieval work (as a unique item is being asked for), so is very efficient By far the best performing (in both time and memory usage) technique so far    Cons:\n Implementation can NOT be selected/changed at runtime Bit of a convoluted process having a wrapper interface    Performance:\n   Type Method Mean Error StdDev Ratio RatioSD Gen 0 Allocated     Enumerable Execute 86.99 ns 0.987 ns 0.924 ns 1.00 0.00 0.0421 264 B   Factory Execute 103.20 ns 1.324 ns 1.238 ns 1.19 0.02 0.0459 288 B   TypeFactory Execute 525.19 ns 2.624 ns 2.455 ns 6.04 0.07 0.0277 176 B   Delegate Execute 111.45 ns 1.456 ns 1.291 ns 1.28 0.02 0.0178 112 B   TypeDelegate Execute 861.84 ns 6.599 ns 5.850 ns 9.90 0.15 0.0343 216 B   Distinct Execute 50.78 ns 0.441 ns 0.413 ns 0.58 0.01 0.0038 24 B       Distinct Factory This technique extends the Distinct approach, resolving the limitation of not being able to select or change the implementation at runtime.\n  Configuration:\nSetup very similar to the Distinct setup, with the addition of the DistinctFactory (line 9) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  private readonly IHost host; public DistinctFactoryBenchmark() { host = Host.CreateDefaultBuilder() .ConfigureServices((context, services) =\u0026gt; services .AddScoped\u0026lt;AWSUploader\u0026gt;() .AddScoped\u0026lt;AzureUploader\u0026gt;() .AddScoped\u0026lt;FTPUploader\u0026gt;() .AddTransient\u0026lt;DistinctFactory\u0026gt;() .AddTransient\u0026lt;DistinctFactoryHandler\u0026gt;() .AddScoped\u0026lt;IGenericUploader\u0026lt;AWSUploader\u0026gt;, GenericUploader\u0026lt;AWSUploader\u0026gt;\u0026gt;() .AddScoped\u0026lt;IGenericUploader\u0026lt;AzureUploader\u0026gt;, GenericUploader\u0026lt;AzureUploader\u0026gt;\u0026gt;() .AddScoped\u0026lt;IGenericUploader\u0026lt;FTPUploader\u0026gt;, GenericUploader\u0026lt;FTPUploader\u0026gt;\u0026gt;() ).Build(); }  \nIGenericUploader and GenericUploader are exactly as defined in the Distinct technique.\nDistinctFactoryHandler is defined as below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  public class DistinctFactory { private readonly IServiceProvider _provider; public DistinctFactory(IServiceProvider provider) { _provider = provider; } public IFileUploader Resolve(string providerName) { switch (providerName) { case \u0026#34;aws\u0026#34;: return _provider.GetService(typeof( IGenericUploader\u0026lt;AWSUploader\u0026gt;)) as IFileUploader; case \u0026#34;azure\u0026#34;: return _provider.GetService(typeof( IGenericUploader\u0026lt;AzureUploader\u0026gt;)) as IFileUploader; case \u0026#34;ftp\u0026#34;: return _provider.GetService(typeof( IGenericUploader\u0026lt;FTPUploader\u0026gt;)) as IFileUploader; default: throw new ArgumentException($\u0026#34;No uploader with \u0026#34; + $\u0026#34;name {providerName} could be found\u0026#34;); } } }  \n  Usage:\nThe factory is now injected into the relevant class (line 4) and is then invoked to get the requested implementation by name (line 11) 1 2 3 4 5 6 7 8 9 10 11 12 13 14  public class DistinctFactoryHandler { private readonly DistinctFactory _distinctFactory; public DistinctFactoryHandler(DistinctFactory distinctFactory) { _distinctFactory = distinctFactory; } public void Execute() { _distinctFactory.Resolve(\u0026#34;ftp\u0026#34;).UploadFile(); } }  \n  Pros:\n Not all implementations are instantiated Implementation can be selected/changed at runtime Good overall performance    Cons:\n Switch statement is hardcoded and needs to be manually maintained every time a new provider is added Bit of a convoluted process    Performance:\n   Type Method Mean Error StdDev Ratio RatioSD Gen 0 Allocated     Enumerable Execute 86.99 ns 0.987 ns 0.924 ns 1.00 0.00 0.0421 264 B   Factory Execute 103.20 ns 1.324 ns 1.238 ns 1.19 0.02 0.0459 288 B   TypeFactory Execute 525.19 ns 2.624 ns 2.455 ns 6.04 0.07 0.0277 176 B   Delegate Execute 111.45 ns 1.456 ns 1.291 ns 1.28 0.02 0.0178 112 B   TypeDelegate Execute 861.84 ns 6.599 ns 5.850 ns 9.90 0.15 0.0343 216 B   Distinct Execute 50.78 ns 0.441 ns 0.413 ns 0.58 0.01 0.0038 24 B   DistinctFactory Execute 96.22 ns 1.378 ns 1.289 ns 1.11 0.02 0.0076 48 B       Distinct Lookup Factory This approach gives implementations names as they are added to the DI container, keeps track of the name-implementation link, and facilitates lookup and retrieval of the correct implementation.\n  Configuration:\nThis setup is different, in that implementations of the same interface are grouped together by the AddNamedUploader extension method (line 6), and as implementations are added, they are given a name. 1 2 3 4 5 6 7 8 9 10 11 12 13  private readonly IHost host; public DistinctLookupFactoryBenchmark() { host = Host.CreateDefaultBuilder() .ConfigureServices((context, services) =\u0026gt; services .AddNamedUploader\u0026lt;IFileUploader\u0026gt;(builder =\u0026gt; builder .AddTransient(\u0026#34;aws\u0026#34;, typeof(AWSUploader)) .AddTransient(\u0026#34;azure\u0026#34;, typeof(AzureUploader)) .AddTransient(\u0026#34;ftp\u0026#34;, typeof(FTPUploader)) ) .AddTransient\u0026lt;DistinctLookupFactoryHandler\u0026gt;() ).Build(); }  \nThere are a number of new components here:\n AddNamedUploader extension method (line 6): this will setup base functionality required as expose the UploaderBuilder as a parameter builder, of type UploaderBuilder (line 6): this is an Action which handles keeping track of the name-implementation link. AddTransient extension method (lines 7-9): this is not the same as the normal AddTransient method on IServiceCollection, but an extension method on the builder (UploaderBuilder) which wraps the usual .NET AddTransient method.  The full definition of the classes (along with all other code) can be found on Github, here\nIn summary though, it works as follows:\n  AddNamedUploader creates an instance of UploaderTypes, which keeps track of the name and the implementation Type. UploaderTypes is added to the DI container as a singleton. 1 2 3 4 5 6 7 8 9 10 11 12  public static IServiceCollection AddNamedUploader\u0026lt;T\u0026gt;( this IServiceCollection services, Action\u0026lt;UploaderBuilder\u0026lt;T\u0026gt;\u0026gt; builder) where T : class { var uploaderType = new UploaderTypes\u0026lt;T\u0026gt;(); services.AddSingleton(uploaderType); services.AddTransient(typeof(DistinctLookupFactory\u0026lt;T\u0026gt;)); builder.Invoke(new UploaderBuilder\u0026lt;T\u0026gt;(services, uploaderType)); return services; }  \n  The AddTransient method will add records to the UploaderTypes class, as well as add the implementation to the DI container. 1 2 3 4 5 6 7 8 9 10  public static UploaderBuilder\u0026lt;T\u0026gt; AddTransient\u0026lt;T\u0026gt;( this UploaderBuilder\u0026lt;T\u0026gt; builder, string name, Type implementation) where T : class { builder.Types.Add(name, implementation); builder.Services.AddTransient(implementation); return builder; }  \n    Usage:\nThe factory is now injected into the relevant class (line 4) for a specific interface, and is then invoked to get the requested implementation by name (line 12) 1 2 3 4 5 6 7 8 9 10 11 12 13 14  public class DistinctLookupFactoryHandler { private readonly DistinctLookupFactory\u0026lt;IFileUploader\u0026gt; _distinctFactory; public DistinctLookupFactoryHandler( DistinctLookupFactory\u0026lt;IFileUploader\u0026gt; distinctFactory) { _distinctFactory = distinctFactory; } public void Execute() { _distinctFactory.Resolve(\u0026#34;ftp\u0026#34;).UploadFile(); } }  \n  Pros:\n Not all implementations are instantiated Implementation can be selected/changed at runtime Good overall performance No hard coded switch statement which needs to be maintained    Cons:\n The most complicated to setup, with the most moving parts    Performance:\n     Type Method Mean Error StdDev Ratio RatioSD Gen 0 Allocated     Enumerable Execute 86.99 ns 0.987 ns 0.924 ns 1.00 0.00 0.0421 264 B   Factory Execute 103.20 ns 1.324 ns 1.238 ns 1.19 0.02 0.0459 288 B   TypeFactory Execute 525.19 ns 2.624 ns 2.455 ns 6.04 0.07 0.0277 176 B   Delegate Execute 111.45 ns 1.456 ns 1.291 ns 1.28 0.02 0.0178 112 B   TypeDelegate Execute 861.84 ns 6.599 ns 5.850 ns 9.90 0.15 0.0343 216 B   Distinct Execute 50.78 ns 0.441 ns 0.413 ns 0.58 0.01 0.0038 24 B   DistinctFactory Execute 96.22 ns 1.378 ns 1.289 ns 1.11 0.02 0.0076 48 B   DistinctLookupFactory Execute 92.96 ns 0.764 ns 0.714 ns 1.07 0.01 0.0126 80 B     Rollcall Rollcall is a library (written by me) which extends the DistinctLookupFactory approach and makes it generic so that it will function with any interface and implementation. Rollcall is available on Nuget\n  Configuration:\nThe setup is almost identical to the DistinctLookupFactory, but without the need for the factory, as this is built into the Rollcall library. 1 2 3 4 5 6 7 8 9 10 11 12 13  private readonly IHost host; public RollcallBenchmark() { host = Host.CreateDefaultBuilder() .ConfigureServices((context, services) =\u0026gt; services .AddTransient\u0026lt;RollcallHandler\u0026gt;() .AddNamedService\u0026lt;IFileUploader\u0026gt;(builder =\u0026gt; builder .AddTransient(\u0026#34;aws\u0026#34;, typeof(AWSUploader)) .AddTransient(\u0026#34;azure\u0026#34;, typeof(AzureUploader)) .AddTransient(\u0026#34;ftp\u0026#34;, typeof(FTPUploader)) ) ).Build(); }  \n  Usage:\nThe Rollcall provider/factory is now injected into the relevant class (line 4) for a specific interface, and is then invoked to get the requested implementation by name (line 12) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  public class RollcallHandler { private readonly IRollcallProvider\u0026lt;IFileUploader\u0026gt; _provider; public RollcallHandler(IRollcallProvider\u0026lt;IFileUploader\u0026gt; provider) { _provider = provider; } public void Execute() { var providerName = \u0026#34;aws\u0026#34;; var uploader = _provider.GetService(providerName); uploader.UploadFile(); } }   Not shown above, but one could also inject IServiceProvider and used the provided GetService extension method to get the service by name.\n  Pros:\n Not all implementations are instantiated Implementation can be selected/changed at runtime Good overall performance No hard coded switch statement which needs to be maintained Works with any interface + implementation, and provides all functionality out the box    Cons:\n Slight performance overhead when compared to the non-generic method    Performance:\n     Type Method Mean Error StdDev Ratio RatioSD Gen 0 Allocated     Enumerable Execute 86.99 ns 0.987 ns 0.924 ns 1.00 0.00 0.0421 264 B   Factory Execute 103.20 ns 1.324 ns 1.238 ns 1.19 0.02 0.0459 288 B   TypeFactory Execute 525.19 ns 2.624 ns 2.455 ns 6.04 0.07 0.0277 176 B   Delegate Execute 111.45 ns 1.456 ns 1.291 ns 1.28 0.02 0.0178 112 B   TypeDelegate Execute 861.84 ns 6.599 ns 5.850 ns 9.90 0.15 0.0343 216 B   Distinct Execute 50.78 ns 0.441 ns 0.413 ns 0.58 0.01 0.0038 24 B   DistinctFactory Execute 96.22 ns 1.378 ns 1.289 ns 1.11 0.02 0.0076 48 B   DistinctLookupFactory Execute 92.96 ns 0.764 ns 0.714 ns 1.07 0.01 0.0126 80 B   Rollcall Execute 124.52 ns 1.485 ns 1.389 ns 1.43 0.02 0.0076 48 B     Rollcall with Func Rollcall can also be used with a implementation factory, a Func\u0026lt;IServiceProvider,object\u0026gt; method. This method is called when requesting the implementation by name from the DI container. Available on NuGet.\n  Configuration:\nThe setup is a little more complicated than before, as some of the configuration needs to be done manually (instead of by the Rollcall package) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  private readonly IHost host; public RollcallFuncBenchmark() { host = Host.CreateDefaultBuilder() .ConfigureServices((context, services) =\u0026gt; services .AddTransient\u0026lt;RollcallFuncHandler\u0026gt;() .AddTransient\u0026lt;AWSUploader\u0026gt;() .AddTransient\u0026lt;AzureUploader\u0026gt;() .AddTransient\u0026lt;FTPUploader\u0026gt;() .AddNamedService\u0026lt;IFileUploader\u0026gt;(builder =\u0026gt; builder .AddTransient(\u0026#34;aws\u0026#34;, sp =\u0026gt; sp.GetService(typeof(AWSUploader))) .AddTransient(\u0026#34;azure\u0026#34;, sp =\u0026gt; sp.GetService(typeof(AzureUploader))) .AddTransient(\u0026#34;ftp\u0026#34;, sp =\u0026gt; sp.GetService(typeof(FTPUploader))) )).Build(); }  \n  Usage:\nThe usage is exactly the same with the Func\u0026lt;\u0026gt; as with the normal interface + implementation (as shown above) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  public class RollcallFuncHandler { private readonly IRollcallProvider\u0026lt;IFileUploader\u0026gt; _provider; public RollcallFuncHandler(IRollcallProvider\u0026lt;IFileUploader\u0026gt; provider) { _provider = provider; } public void Execute() { var providerName = \u0026#34;aws\u0026#34;; var uploader = _provider.GetService(providerName); uploader.UploadFile(); } }   Not shown above, but one could also inject IServiceProvider and used the provided GetService extension method to get the service by name.\n  Pros:\n Not all implementations are instantiated Implementation can be selected/changed at runtime Good overall performance No hard coded switch statement which needs to be maintained Works with any interface + func\u0026lt;\u0026gt;, and provides all functionality out the box    Cons:\n Slight performance overhead when compared to the non-generic method, and when compared to the interface + implementation method.    Performance:\n     Type Method Mean Error StdDev Ratio RatioSD Gen 0 Allocated     Enumerable Execute 86.99 ns 0.987 ns 0.924 ns 1.00 0.00 0.0421 264 B   Factory Execute 103.20 ns 1.324 ns 1.238 ns 1.19 0.02 0.0459 288 B   TypeFactory Execute 525.19 ns 2.624 ns 2.455 ns 6.04 0.07 0.0277 176 B   Delegate Execute 111.45 ns 1.456 ns 1.291 ns 1.28 0.02 0.0178 112 B   TypeDelegate Execute 861.84 ns 6.599 ns 5.850 ns 9.90 0.15 0.0343 216 B   Distinct Execute 50.78 ns 0.441 ns 0.413 ns 0.58 0.01 0.0038 24 B   DistinctFactory Execute 96.22 ns 1.378 ns 1.289 ns 1.11 0.02 0.0076 48 B   DistinctLookupFactory Execute 92.96 ns 0.764 ns 0.714 ns 1.07 0.01 0.0126 80 B   Rollcall Execute 124.52 ns 1.485 ns 1.389 ns 1.43 0.02 0.0076 48 B   RollcallFunc Execute 134.68 ns 1.224 ns 1.085 ns 1.55 0.02 0.0076 48 B     Conclusion There are a variety of ways to handle multiple implementations of the same interface, none of which are wrong. However, not all are suitable for every situation and using the incorrect one for the situation could result in a performance impact.\nThere are trade-offs and pros and cons to using each technique - the most performant might be the most difficult to maintain for your situation.\nTest the various methods and find which works best and is most optimal for your particular situation.\nReferences and links Rollcall Github repo\nRollcall Nuget package\n ","date":"2021-11-06T01:00:00+02:00","permalink":"https://always-developing.github.io/p/multiple-implementations/","title":"Multiple implementations of same interface - the options"},{"content":"Why learn keyboard shortcuts? So I confess I have no empirical evidence to backup the up to 20% more productive claim. That number is just made up, but with years of experience on my side, it honestly feels fairly accurate to me!\nHaving often been involved in assisting, troubleshooting and debugging code with fellow developers, it is apparent that the developers which are familiar with their IDE, and make use of the shortcuts, generally (but not always!) resolve tasks quicker and more efficiently than those that don\u0026rsquo;t.\nEvery hand reach for the mouse, every unnecessary cursor movement, every menu click is potentially a waste of time. It\u0026rsquo;s time two hands are not on the keyboard writing code. The more shortcuts a person is familiar with, the more the unnecessary time wasting can be minimized. Thus, more programming time and more productivity!\n Is there anything wrong with not making use of keyboard shortcuts? Definitely not. Does not using keyboard shortcuts make a person any less of a developer? Definitely not. Could using keyboard shortcuts make a person more productive? Definitely yes.  Visual Studio shortcuts to learn Below is a list of useful Visual Studio shortcuts I use the most often and find the more useful in my day to day development. This is by no means an exhaustive list - however I have no doubt a massive benefit can be gained by learning just a few of these.\nSome of these shortcuts are not just Visual Studio shortcuts, and also be leveraged in other applications (such as VS Code).\n       + indicates a combination of keys is to be pressed to perform the action.\nIn some cases (like the example below), the final key can be tapped to perform the action multiple times (while still holding down the initial two keys)\nE.g. Ctrl + Shift + -: Ctrl and Shift can be held down at the same time while the - key is pressed multiple times.\n  , is used to indicate a sequence of keys is to be pressed.\nE.g. Ctrl + M, O: Ctrl is held down, while M is pressed and then O is pressed.\n     View shortcuts   Ctrl + - and Ctrl + Shift + -: Navigate backwards and forwards 🧭\nMoves the cursor, backwards and forwards through the history of visited cursor locations in file(s). This is incredibly useful especially when used in conjunction with the Go to Definition / Ctrl + F12 function.\n  Ctrl + .: Quick actions and refactoring 💡\nWhen the cursor is over a block of code, this shortcut will bring up the quick actions and refactoring (Lightbulb or screwdriver icon) menu\n  Ctrl + Spacebar: Trigger Intellisense\n  Editor shortcuts   Ctrl + ← and Ctrl + →: Moves cursor one word to the left or right ⬅️➡️\nGreat when used in combination with the Shift key (e.g. Ctrl + Shift + →) to highlight/select entire word(s).\n  Ctrl + Del: Delete an entire line 🚫\nWhen you dislike your code and you want it gone quickly.\n  Ctrl + M, O: Collapse to definitions 📄\nCollapse all methods, regions, comment blocks etc in the current document.\n  Ctrl + F: Find in current file 🔍\nDefaults to search in only the current document, but this can be changed to include more documents (e.g. entire solution)\n  Ctrl + Shift + F: Find in all files 🔍🔍\nOpens the Find in files dialog. Defaults to search the entire solution, but this can be changed to include less documents (e.g. current document)\n  Ctrl + H: Replace in current file 📑\nDefaults to search in only the current document, but this can be changed to include more documents (e.g. entire solution)\n  Ctrl + Shift + H: Replace in all files 📑📑\nOpens the Replace in files_ dialog. Defaults to replace in the entire solution, but this can be changed to include less documents (e.g. current document)\n  Ctrl + K, C and Ctrl + K, U: Comments and uncomment code selection 📜\nComment and uncomment code selection. If no selection is made, the line of code the cursor is current on will be commented/un-commented.\n  Refactor shortcuts   'ctor', Tab, Tab: Constructor creation 🏗️\nThis is a prebuilt code snippet and not really a keyboard shortcut. This will create a default parameter-less constructor for the current class\n  Ctrl + R, R: Rename 💬\nAllows for the rename of a class, method, variable etc. as well as all usages of said code. Place the cursor on a method name, for example, press Ctrl + R, R, type in the new name and hit enter. The method name and all usages of the name have now been renamed.\n  Ctrl + R, M: Extract to method 📤\nCreate a new method containing the selected code, and invoke the new method from the current code location. Great for code clean up.\n  Ctrl + R, G: Remove and sort usings ⛔ Performing this shortcut anywhere in a document will remove any unused usings in the file, as well as sort the remaining ones alphabetically.\n  Build shortcuts   F5: Build and start application with the debugger attached. 🐛\nBreakpoints will pause code execution, code can be stepped through, etc.\n  Ctrl + F5: Build and start application without the debugger attached. 🏃‍♂️\nNo debug symbols will be loaded, so breakpoints will not be hit. Most often used when:\n Running multiple dependent services/applications in the same solution (without the need for debugging all the projects) Running benchmarking (using BenchmarkDotNet)    Code quality shortcuts  ///: Adds comments 🧾\nUsed above a method or class to create and partially auto populate the comments.\nThese comments can be used to generate an XML document file (especially useful for library authors)  Conclusion It does take a conscious effort when starting to actually slow down, lookup the shortcut to be used and force yourself to use it. But adaption happens quickly, and before you know it you\u0026rsquo;ll be using the keyboard shortcuts without even realising it.\nIt is an on-going learning process - if you find yourself performing the same time consuming action over and over in the IDE, consider investigating and learning the shortcut.\nThe list of VS2019 Keyboard shortcuts. (this mostly apply to VS2017 and VS2022 as well)\nUse shortcuts. Be more productive.\n","date":"2021-10-25T01:00:00+02:00","permalink":"https://always-developing.github.io/p/vs-keyboard-shortcuts/","title":"Useful Visual Studio keyboard shortcuts"},{"content":"What\u0026rsquo;s the issue? When working with strings in C# one can either use String (uppercase) or string (lowercase) and in both cases the code will compile and execute.\nExplicitly typed string variables can be done in either of the following ways:\nstring variable = \u0026#34;Always Developing\u0026#34;; String variable = \u0026#34;Always Developing\u0026#34;; Or when invoking string related methods, both of the following examples are valid:\nstring variable = string.Format(\u0026#34;Always Developing using {0}\u0026#34;, \u0026#34;C#\u0026#34;); String variable = String.Format(\u0026#34;Always Developing using {0}\u0026#34;, \u0026#34;Typescript\u0026#34;); Whats the difference between using String and using string? Is there a difference? Does it really matter?\nIs there a difference?   System.String is a .NET CLR (Common Runtime Library) class. This means it\u0026rsquo;s part of the core .NET environment, which sits one level below the specific language implementation.\n  string is a C# specific keyword, which is an alias for the CLR System.String type.\n  What this means is that string is just another name for System.String and they are effectively equivalent.\n     The same way int is an alias and maps to the CLR type System.Int32 and long is an alias and map to CLR type System.Int64, string is an alias and maps to the CLR type System.String\n   Deeper comparisons Variable declaration We can further confirm String and string are equivalent by comparing the IL (Intermediate Language) code generated when declaring variables using both of the types.\n     This post is primarily to compare the C# String and string types, but VB.NET examples have also been included in the comparison for completeness.\n   Take these three methods, all functionally equivalent, but declaring the variable using the different types:\npublic string GetString() { String variable = \u0026#34;string value\u0026#34;; return variable; } public string GetString() { string variable = \u0026#34;string value\u0026#34;; return variable; } Public Function GetString() As String Dim variable As String = \u0026#34;string value\u0026#34; Return variable End Function The IL code generated by all three examples is all effectively identical:\n// Methods .method public hidebysig instance string GetString () cil managed { // Method begins at RVA 0x2050  // Code size 6 (0x6)  .maxstack 8 IL_0000: ldstr \u0026#34;string value\u0026#34; IL_0005: ret } // end of method CClass::GetString  String method invocation So it\u0026rsquo;s confirmed that String and string are equivalent when declaring variables, but what about with method invocation?\nAgain, three functionally equivalent methods, but invoking the Format method differently:\npublic string StringFormat() { var insertString = \u0026#34;C#\u0026#34;; var variable = String.Format(\u0026#34;Always Developing using {0}\u0026#34;, insertString); return variable; } public string StringFormat() { var insertString = \u0026#34;C#\u0026#34;; var variable = string.Format(\u0026#34;Always Developing using {0}\u0026#34;, insertString); return variable; } Public Function StringFormat() As String Dim insertString = \u0026#34;C#\u0026#34; Dim variable = String.Format(\u0026#34;Always Developing using {0}\u0026#34;, insertString) Return variable End Function When the generated IL code is compared, in all three cases, it is equivalent:\n// Methods .method public hidebysig instance string StringFormat () cil managed { // Method begins at RVA 0x2050  // Code size 18 (0x12)  .maxstack 2 .locals init ( [0] string insertString ) IL_0000: ldstr \u0026#34;C#\u0026#34; IL_0005: stloc.0 IL_0006: ldstr \u0026#34;Always Developing using {0}\u0026#34; IL_000b: ldloc.0 IL_000c: call string [System.Private.CoreLib]System.String::Format(string, object) IL_0011: ret } // end of method CClass::StringFormat  Conclusion Use either String or string, they are effectively equivalent.\nHowever, the recommended approach is to use the C# language specific keyword string, as it works without having to include using System;\n     The recommendation method of using string comes from the official Microsoft documentation, and is included as a default style rule in Visual Studio\n        It is recommended to use implicitly type local variables (where appropriate) by using the var keyword (instead of string, in the above examples), and having the type inferred by the compiled.\nThe use of var versus explicate declaration is a personal preference, and will not effect the execution or performance of the code.\nPersonally I use var in my code: I find the code cleaner and easier to read. One can see the type being inferred by the compiler by hovering the mouse cursor over the var keyword in Visual Studio.\n   References and links Microsoft string guidance\nMicrosoft style rule\nImplicitly typed variables\nSharp lab - IL generator\n","date":"2021-10-21T01:00:00+02:00","permalink":"https://always-developing.github.io/p/string-vs-string/","title":"C# String vs string"}]