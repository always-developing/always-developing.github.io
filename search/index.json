[{"content":"Why learn keyboard shortcuts? So I confess I have no empirical evidence to backup the up to 20% more productive claim. That number is just made up, but with years of experience on my side, it honestly feels fairly accurate to me!\nHaving often been involved in assisting, troubleshooting and debugging code with fellow developers, it is apparent that the developers which are familiar with their IDE, and make use of the shortcuts, generally (but not always!) resolve tasks quicker and more efficiently than those that don\u0026rsquo;t.\nEvery hand reach for the mouse, every unnecessary cursor movement, every menu click is potentially a waste of time. It\u0026rsquo;s time two hands are not on the keyboard writing code. The more shortcuts a person is familiar with, the more the unnecessary time wasting can be minimized. Thus, more programming time and more productivity!\n Is there anything wrong with not making use of keyboard shortcuts? Definitely not. Does not using keyboard shortcuts make a person any less of a developer? Definitely not. Could using keyboard shortcuts make a person more productive? Definitely yes.  Visual Studio shortcuts to learn Below is a list of useful Visual Studio shortcuts I use the most often and find the more useful in my day to day development. This is by no means an exhaustive list - however I have no doubt a massive benefit can be gained by learning just a few of these.\nSome of these shortcuts are not just Visual Studio shortcuts, and also be leveraged in other applications (such as VS Code).\n       + indicates a combination of keys is to be pressed to perform the action.\nIn some cases (like the example below), the final key can be tapped to perform the action multiple times (while still holding down the initial two keys)\nE.g. Ctrl + Shift + -: Ctrl and Shift can be held down at the same time while the - key is pressed multiple times.\n  , is used to indicate a sequence of keys is to be pressed.\nE.g. Ctrl + M, O: Ctrl is held down, while M is pressed and then O is pressed.\n     View shortcuts   Ctrl + - and Ctrl + Shift + -: Navigate backwards and forwards üß≠\nMoves the cursor, backwards and forwards through the history of visited cursor locations in file(s). This is incredibly useful especially when used in conjunction with the Go to Definition / Ctrl + F12 function.\n  Ctrl + .: Quick actions and refactoring üí°\nWhen the cursor is over a block of code, this shortcut will bring up the quick actions and refactoring (Lightbulb or screwdriver icon) menu\n  Ctrl + Spacebar: Trigger Intellisense\n  Editor shortcuts   Ctrl + ‚Üê and Ctrl + ‚Üí: Moves cursor one word to the left or right ‚¨ÖÔ∏è‚û°Ô∏è\nGreat when used in combination with the Shift key (e.g. Ctrl + Shift + ‚Üí) to highlight/select entire word(s).\n  Ctrl + Del: Delete an entire line üö´\nWhen you dislike your code and you want it gone quickly.\n  Ctrl + M, O: Collapse to definitions üìÑ\nCollapse all methods, regions, comment blocks etc in the current document.\n  Ctrl + F: Find in current file üîç\nDefaults to search in only the current document, but this can be changed to include more documents (e.g. entire solution)\n  Ctrl + Shift + F: Find in all files üîçüîç\nOpens the Find in files dialog. Defaults to search the entire solution, but this can be changed to include less documents (e.g. current document)\n  Ctrl + H: Replace in current file üìë\nDefaults to search in only the current document, but this can be changed to include more documents (e.g. entire solution)\n  Ctrl + Shift + H: Replace in all files üìëüìë\nOpens the Replace in files_ dialog. Defaults to replace in the entire solution, but this can be changed to include less documents (e.g. current document)\n  Ctrl + K, C and Ctrl + K, U: Comments and uncomment code selection üìú\nComment and uncomment code selection. If no selection is made, the line of code the cursor is current on will be commented/un-commented.\n  Refactor shortcuts   'ctor', Tab, Tab: Constructor creation üèóÔ∏è\nThis is a prebuilt code snippet and not really a keyboard shortcut. This will create a default parameter-less constructor for the current class\n  Ctrl + R, R: Rename üí¨\nAllows for the rename of a class, method, variable etc. as well as all usages of said code. Place the cursor on a method name, for example, press Ctrl + R, R, type in the new name and hit enter. The method name and all usages of the name have now been renamed.\n  Ctrl + R, M: Extract to method üì§\nCreate a new method containing the selected code, and invoke the new method from the current code location. Great for code clean up.\n  Ctrl + R, G: Remove and sort usings ‚õî Performing this shortcut anywhere in a document will remove any unused usings in the file, as well as sort the remaining ones alphabetically.\n  Build shortcuts   F5: Build and start application with the debugger attached. üêõ\nBreakpoints will pause code execution, code can be stepped through, etc.\n  Ctrl + F5: Build and start application without the debugger attached. üèÉ‚Äç‚ôÇÔ∏è\nNo debug symbols will be loaded, so breakpoints will not be hit. Most often used when:\n Running multiple dependent services/applications in the same solution (without the need for debugging all the projects) Running benchmarking (using BenchmarkDotNet)    Code quality shortcuts  ///: Adds comments üßæ\nUsed above a method or class to create and partially auto populate the comments.\nThese comments can be used to generate an XML document file (especially useful for library authors)  Conclusion It does take a conscious effort when starting to actually slow down, lookup the shortcut to be used and force yourself to use it. But adaption happens quickly, and before you know it you\u0026rsquo;ll be using the keyboard shortcuts without even realising it.\nIt is an on-going learning process - if you find yourself performing the same time consuming action over and over in the IDE, consider investigating and learning the shortcut.\nThe list of VS2019 Keyboard shortcuts. (this mostly apply to VS2017 and VS2022 as well)\nUse shortcuts. Be more productive.\n","date":"2021-10-25T01:00:00+02:00","permalink":"https://always-developing.github.io/p/vs-keyboard-shortcuts/","title":"Useful Visual Studio keyboard shortcuts"},{"content":"What\u0026rsquo;s the issue? When working with strings in C# one can either use String (uppercase) or string (lowercase) and in both cases the code will compile and execute.\nExplicitly typed string variables can be done in either of the following ways:\nstring variable = \u0026#34;Always Developing\u0026#34;; String variable = \u0026#34;Always Developing\u0026#34;; Or when invoking string related methods, both of the following examples are valid:\nstring variable = string.Format(\u0026#34;Always Developing using {0}\u0026#34;, \u0026#34;C#\u0026#34;); String variable = String.Format(\u0026#34;Always Developing using {0}\u0026#34;, \u0026#34;Typescript\u0026#34;); Whats the difference between using String and using string? Is there a difference? Does it really matter?\nIs there a difference?   System.String is a .NET CLR (Common Runtime Library) class. This means it\u0026rsquo;s part of the core .NET environment, which sits one level below the specific language implementation.\n  string is a C# specific keyword, which is an alias for the CLR System.String type.\n  What this means is that string is just another name for System.String and they are effectively equivalent.\n     The same way int is an alias and maps to the CLR type System.Int32 and long is an alias and map to CLR type System.Int64, string is an alias and maps to the CLR type System.String\n   Deeper comparisons Variable declaration We can further confirm String and string are equivalent by comparing the IL (Intermediate Language) code generated when declaring variables using both of the types.\n     This post is primarily to compare the C# String and string types, but VB.NET examples have also been included in the comparison for completeness.\n   Take these three methods, all functionally equivalent, but declaring the variable using the different types:\npublic string GetString() { String variable = \u0026#34;string value\u0026#34;; return variable; } public string GetString() { string variable = \u0026#34;string value\u0026#34;; return variable; } Public Function GetString() As String Dim variable As String = \u0026#34;string value\u0026#34; Return variable End Function The IL code generated by all three examples is all effectively identical:\n// Methods .method public hidebysig instance string GetString () cil managed { // Method begins at RVA 0x2050  // Code size 6 (0x6)  .maxstack 8 IL_0000: ldstr \u0026#34;string value\u0026#34; IL_0005: ret } // end of method CClass::GetString  String method invocation So it\u0026rsquo;s confirmed that String and string are equivalent when declaring variables, but what about with method invocation?\nAgain, three functionally equivalent methods, but invoking the Format method differently:\npublic string StringFormat() { var insertString = \u0026#34;C#\u0026#34;; var variable = String.Format(\u0026#34;Always Developing using {0}\u0026#34;, insertString); return variable; } public string StringFormat() { var insertString = \u0026#34;C#\u0026#34;; var variable = string.Format(\u0026#34;Always Developing using {0}\u0026#34;, insertString); return variable; } Public Function StringFormat() As String Dim insertString = \u0026#34;C#\u0026#34; Dim variable = String.Format(\u0026#34;Always Developing using {0}\u0026#34;, insertString) Return variable End Function When the generated IL code is compared, in all three cases, it is equivalent:\n// Methods .method public hidebysig instance string StringFormat () cil managed { // Method begins at RVA 0x2050  // Code size 18 (0x12)  .maxstack 2 .locals init ( [0] string insertString ) IL_0000: ldstr \u0026#34;C#\u0026#34; IL_0005: stloc.0 IL_0006: ldstr \u0026#34;Always Developing using {0}\u0026#34; IL_000b: ldloc.0 IL_000c: call string [System.Private.CoreLib]System.String::Format(string, object) IL_0011: ret } // end of method CClass::StringFormat  Conclusion Use either String or string, they are effectively equivalent.\nHowever, the recommended approach is to use the C# language specific keyword string, as it works without having to include using System;\n     The recommendation method of using string comes from the official Microsoft documentation, and is included as a default style rule in Visual Studio\n        It is recommended to use implicitly type local variables (where appropriate) by using the var keyword (instead of string, in the above examples), and having the type inferred by the compiled.\nThe use of var versus explicate declaration is a personal preference, and will not effect the execution or performance of the code.\nPersonally I use var in my code: I find the code cleaner and easier to read. One can see the type being inferred by the compiler by hovering the mouse cursor over the var keyword in Visual Studio.\n   References and links Microsoft string guidance\nMicrosoft style rule\nImplicitly typed variables\nSharp lab - IL generator\n","date":"2021-10-21T01:00:00+02:00","permalink":"https://always-developing.github.io/p/string-vs-string/","title":"C# String vs string"}]