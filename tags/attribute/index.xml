<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>attribute on Always Developing</title><link>https://always-developing.github.io/tags/attribute/</link><description>Recent content in attribute on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Tue, 31 May 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/attribute/index.xml" rel="self" type="application/rss+xml"/><item><title>Generic attributes with C#11</title><link>https://always-developing.github.io/dailydrop/2022/05/31-generic-attribute/</link><pubDate>Tue, 31 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/31-generic-attribute/</guid><description>Daily Knowledge Drop Coming in C# 11 (later this year with .NET 7) is the generic attributes feature - the ability to define an attribute which takes a generic parameter. This is a more convenient style for attributes which require a Type parameter.
Generic attribute code samples below were written using the .NET 7 preview release.
Pre C# 11 - Type parameter Sometimes an attribute needs to take a Type parameter - currently (using any version prior to C# 11) the only way to do this is passing a Type parameter to the constructor.</description></item><item><title>Value type default values</title><link>https://always-developing.github.io/dailydrop/2022/05/24-value-type-default-value/</link><pubDate>Tue, 24 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/24-value-type-default-value/</guid><description>Daily Knowledge Drop Value Types by default, have to have a value and cannot be null in C# - even if uninitialized. This can lead to unexpected results if comparing a value type to null instead of the default value.
Null comparison Consider the below example:
1 2 3 4 5 6 7 8 9 10 11 12 class Program { static Point pointValue; static int IntValue; static void Main(string[] args) { // comparing an uninitialized Point to null Console.</description></item><item><title>Flags attribute for enums</title><link>https://always-developing.github.io/dailydrop/2022/05/23-flags-attribute/</link><pubDate>Mon, 23 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/23-flags-attribute/</guid><description>Daily Knowledge Drop The Flags attribute can be used to automatically treat an enum as a set of flags (a bit field) - flags are useful when elements in the enum might occur in combinations.
Bitwise operations Often an enum will have values of 0, 1, 2, 4, 8, 16 .. instead of 0, 1, 2, 3, 4, 5 .. - this is because it allows bitwise operations to be performed on the enum.</description></item><item><title>Attributes on lambda methods</title><link>https://always-developing.github.io/dailydrop/2022/05/02-lambda-attribute/</link><pubDate>Mon, 02 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/02-lambda-attribute/</guid><description>Daily Knowledge Drop Introduced with C#10, attributes can also be applied to lambda expressions and lambda parameters.
Attribute For our example, a method level attribute has been created, which can be used to mark a method for logging (this is just an example, no actual logging will be demonstrated in this post):
1 2 3 4 5 [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] class LoggingEnabledAttribute : Attribute { // marker attribute to flag this method should be logged } Attribute application This attribute, configured to target methods (using another attribute, AttributeUsage) can now be applied to any method:</description></item><item><title>Conditional attribute to exclude method execution</title><link>https://always-developing.github.io/dailydrop/2022/03/30-conditional-attribute/</link><pubDate>Wed, 30 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/30-conditional-attribute/</guid><description>Daily Knowledge Drop A method can be marked with the Conditional attribute to have its invocation excluded by the compiler under the specified condition.
Example Consider the following code:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 ProcessPerson(new Person { Id = Guid.</description></item><item><title>StringSyntaxAttribute for syntax highlighting</title><link>https://always-developing.github.io/dailydrop/2022/03/28-stringsyntaxattribute/</link><pubDate>Mon, 28 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/28-stringsyntaxattribute/</guid><description>Daily Knowledge Drop A new attribute StringSyntaxAttribute, being introduced in .NET7, allows for marking a C# string as containing a specific type of value. This results in:
Syntax highlighting for the specific type Basic validation for the specific type. At the time of this post, this feature is only available in .NET7 preview 1, and when using Visual Studio 2022 17.2.0 Preview 1.0. This may change between now and .NET7 release.</description></item><item><title>Optional method parameters</title><link>https://always-developing.github.io/dailydrop/2022/03/02-optional-param-attribute/</link><pubDate>Wed, 02 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/02-optional-param-attribute/</guid><description>Daily Knowledge Drop In additional to giving a parameter a default value, so that it can be omitted when calling a method, the Optional attribute can also be used allow for parameter omission.
Parameter default values When defining a method, the parameters can be given a default value. This allows for the parameter to be omitted when calling the method:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // both required MethodNoDefaults(&amp;#34;John&amp;#34;, 50); // all parameters are required when calling this method void MethodNoDefaults(string name, int age) { Console.</description></item><item><title>Extract calling method metadata with C#</title><link>https://always-developing.github.io/dailydrop/2022/02/11-caller-metadata/</link><pubDate>Fri, 11 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/11-caller-metadata/</guid><description>Daily Knowledge Drop As part of the C# System.Runtime assembly, there are a number of Attributes which can be used to get information about the caller of a method.
The pattern for usage is the same for all attributes. To extract the metadata when a method is called, the following needs to be done:
A new parameter needs to be added to the method (the type of the parameter depends on the attribute, see examples below) The new parameter must have a default value The new parameter must be decorated with the relevant Attribute Attributes Lets look at a few examples.</description></item><item><title>Performant logging with LoggerMessageAttribute</title><link>https://always-developing.github.io/dailydrop/2022/02/09-logger-message-attribute/</link><pubDate>Wed, 09 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/09-logger-message-attribute/</guid><description>Daily Knowledge Drop .NET6 introduced a new attribute called LoggerMessageAttribute, which leverages source generators and is designed to deliver a highly useable and performant logging solution.
It works by using source generators, triggered at compile time by the presence of LoggerMessageAttribute to generate the additional source code. This solution, due to the compile time generation, is able to eliminate performance hits, such as boxing, temporary memory allocation as well as copies which enables it to be typically considerably faster than the existing run time logging methods.</description></item></channel></rss>