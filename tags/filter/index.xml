<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>filter on Always Developing</title><link>https://always-developing.github.io/tags/filter/</link><description>Recent content in filter on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Tue, 26 Apr 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/filter/index.xml" rel="self" type="application/rss+xml"/><item><title>Soft deletes with EF global filters</title><link>https://always-developing.github.io/dailydrop/2022/04/26-ef-soft-delete/</link><pubDate>Tue, 26 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/26-ef-soft-delete/</guid><description>Daily Knowledge Drop Entity Framework Core&amp;rsquo;s global filter functionality can be used to a apply a filter automatically to all queries on a dbSet.
This is especially useful when dealing with soft delete functionality, where the data is not removed from the database table, but instead just marked as deleted (or archived or retired etc)
Setup Consider a Song class and IRetirable interface which is as follows:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public interface IRetirable { public bool IsRetired { get; set; } } [Table(&amp;#34;Song&amp;#34;)] public class Song : IRetirable { public int Id { get; set; } public string Name { get; set; } public string Artist { get; set; } public int YearReleased { get; set; } public int LengthInSeconds { get; set; } public bool IsRetired { get; set; } public override string ToString() { return $&amp;#34;Song `{Name}` by &amp;#39;{Artist} released &amp;#34; + $&amp;#34;in &amp;#39;{YearReleased}&amp;#39; and is &amp;#39;{LengthInSeconds}&amp;#39; seconds long&amp;#34;; } } Without global filters Every time the Song dbset is queried, only active records (records which have the IsRetired field set to false) should be returned.</description></item><item><title>Filtering try-catch statement</title><link>https://always-developing.github.io/dailydrop/2022/02/14-exceptions-when/</link><pubDate>Mon, 14 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/14-exceptions-when/</guid><description>Daily Knowledge Drop It is possible to filter the catch portion of the try-catch statement, as well as catch multiple exceptions at the same time using the C# when keyword.
Multiple exceptions In our use case, there are two exception types we are particularly interested in IndexOutOfRangeException and DivideByZeroException.
If either of these exceptions occur, we want to log the exception, and carry on with the workflow. However if any other exception occurs, it should be logged and re-thrown to be handled higher up the call stack.</description></item></channel></rss>