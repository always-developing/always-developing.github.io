<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>array on Always Developing</title><link>https://always-developing.github.io/tags/array/</link><description>Recent content in array on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Fri, 25 Feb 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/array/index.xml" rel="self" type="application/rss+xml"/><item><title>LINQ improvements - FirstOrDefault defaults</title><link>https://always-developing.github.io/dailydrop/2022/02/25-firstordefault-default/</link><pubDate>Fri, 25 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/25-firstordefault-default/</guid><description>Daily Knowledge Drop A number of enhancements have been made to LINQ as part of .NET6 - one of those is the ability to set a default value to be returned from .FirstOrDefault().
Examples List&amp;lt;&amp;gt; is being used in the below examples, but the method is available on all compatible types, not just List&amp;lt;&amp;gt;.
Simple type list 1 2 3 4 5 6 7 8 9 10 11 12 // list of 11 integers var intValues = new List&amp;lt;int&amp;gt; { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; // older method, value found in list Console.</description></item><item><title>Indexers - access a class as an array</title><link>https://always-developing.github.io/dailydrop/2022/02/23-indexers/</link><pubDate>Wed, 23 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/23-indexers/</guid><description>Daily Knowledge Drop Any (relevant) class can be extended so that it can be accessed as an array, using Indexers, just by adding a property to the class.
Without indexers In the examples below, we are using a ProductPrice entity. This class keeps some basic details of a product, as well as an array of prices, one price for each month of the year. So Prices[0] is the price for January, Prices[1] is the price for February and so on.</description></item></channel></rss>