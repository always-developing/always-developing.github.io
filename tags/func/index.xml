<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>func on Always Developing</title><link>https://always-developing.github.io/tags/func/</link><description>Recent content in func on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Mon, 07 Mar 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/func/index.xml" rel="self" type="application/rss+xml"/><item><title>Dependency Injection with Func and delegates</title><link>https://always-developing.github.io/dailydrop/2022/03/07-di-func-delegate/</link><pubDate>Mon, 07 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/07-di-func-delegate/</guid><description>Daily Knowledge Drop When requiring to abstract and inject a simple single method interface using dependency injection (DI), its possible to instead use a Func&amp;lt;&amp;gt; or a Delegate instead.
Examples Suppose we want to inject the date time using dependency injection, instead of using DateTime.Now or DateTimeOffSet.Now.
There are a few reasons to do this:
DateTime.Now returns the current system datetime. This does not account for users in different regions, daylight savings etc (this is a complex subject, see the NodaTime reference below for additional information) The current datetime is an external dependency - best practice is for all external dependencies to be abstracted, so that they can be mocked and successfully unit tested There are a number of ways to tackle this requirement.</description></item></channel></rss>