<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dictionary on Always Developing</title><link>https://always-developing.github.io/tags/dictionary/</link><description>Recent content in dictionary on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Tue, 03 May 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/dictionary/index.xml" rel="self" type="application/rss+xml"/><item><title>Index initializer behavior</title><link>https://always-developing.github.io/dailydrop/2022/05/03-index-initializer/</link><pubDate>Tue, 03 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/03-index-initializer/</guid><description>Daily Knowledge Drop The index initialization style of collection initialization has slightly different (but important) behavior to that of the &amp;ldquo;traditional&amp;rdquo; initialization method.
Initialization Let&amp;rsquo;s look at a few different ways a Dictionary&amp;lt;int, string&amp;gt; can be initialized, and have 5 values set:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // initialize a empty dictionary, then add the values var normalDictionary = new Dictionary&amp;lt;int, string&amp;gt;(); normalDictionary.</description></item><item><title>Creating scopes with braces</title><link>https://always-developing.github.io/dailydrop/2022/04/13-scope-braces/</link><pubDate>Wed, 13 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/13-scope-braces/</guid><description>Daily Knowledge Drop Usually braces {} are uses to define the scope of a specific statement (method, if statement, for loop etc) - but braces can also be used to define a scope without specifying a statement
Example Below is a simple code snippet to demonstrate the scopes:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 var outerVariable = 1; if(outerVariable == 1) { var innerVariable = 100; Console.</description></item><item><title>ConcurrentDictionary AddOrUpdate method</title><link>https://always-developing.github.io/dailydrop/2022/04/12-addorupdate/</link><pubDate>Tue, 12 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/12-addorupdate/</guid><description>Daily Knowledge Drop The C# ConcurrentDictionary implementation has a convenient AddOrUpdate method (unlike the Dictionary implementation) - this method allows for a value to try be added to the concurrent dictionary and if the key already exists, then update with a different value.
Dictionary updates First we&amp;rsquo;ll take a look at how to handle updates when using a Dictionary.
First, a Dictionary&amp;lt;string, int&amp;gt; is instantiated and a few items are added to the dictionary.</description></item></channel></rss>