<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>first on Always Developing</title><link>https://always-developing.github.io/tags/first/</link><description>Recent content in first on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Mon, 30 May 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/first/index.xml" rel="self" type="application/rss+xml"/><item><title>LINQ First and Single performance</title><link>https://always-developing.github.io/dailydrop/2022/05/30-linq-first-performance/</link><pubDate>Mon, 30 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/30-linq-first-performance/</guid><description>Daily Knowledge Drop When using LINQ to retrieve a value from a collection, there are a number of different techniques - however not all are equal in terms of performance.
Today we&amp;rsquo;ll explore the various methods and their comparative performance.
First performance First, we&amp;rsquo;ll look at the various ways to retrieve a single value using variations of First, when multiple values match the condition:
1 2 3 4 5 6 7 8 9 10 11 // populate with 10000 values int[] values = values = Enumerable.</description></item></channel></rss>