<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>structured on Always Developing</title><link>https://always-developing.github.io/tags/structured/</link><description>Recent content in structured on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Mon, 31 Jan 2022 03:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/structured/index.xml" rel="self" type="application/rss+xml"/><item><title>Structured logging - an introduction</title><link>https://always-developing.github.io/p/01-2022-structured-logging/</link><pubDate>Mon, 31 Jan 2022 03:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/01-2022-structured-logging/</guid><description>Introduction This post will give an introduction to structured logging, why its needed and should be used. It will also go into detail how to implement and customize the output using Serilog.
Default .NET Logging Before looking at structured logging, we&amp;rsquo;ll take a look at the default .NET logging implementation.
The default logger can be utilized by injecting ILogger&amp;lt;CategoryName&amp;gt; into the relevant constructor. The ILogger&amp;lt;&amp;gt; interface and its implementation are registered automatically with the .</description></item></channel></rss>