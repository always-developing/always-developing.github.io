<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ducktyping on Always Developing</title><link>https://always-developing.github.io/tags/ducktyping/</link><description>Recent content in ducktyping on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Thu, 10 Mar 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/ducktyping/index.xml" rel="self" type="application/rss+xml"/><item><title>Duck typing in C#</title><link>https://always-developing.github.io/dailydrop/2022/03/10-duck-typing/</link><pubDate>Thu, 10 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/10-duck-typing/</guid><description>Daily Knowledge Drop The term duck typing refers to the ability to allow for an object to be passed to a method which expects a certain type, even if the object doesn&amp;rsquo;t inherit from the type.
This is more prevalent in dynamic languages and less prevalent in strong type languages, such as C# - however it is still occasionally used.
Duck typing summary The term duck typing is explained by the populate phrase: If it walks like a duck, and quacks like a duck, it must be a duck</description></item></channel></rss>