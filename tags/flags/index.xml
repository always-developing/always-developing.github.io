<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>flags on Always Developing</title><link>https://always-developing.github.io/tags/flags/</link><description>Recent content in flags on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Tue, 24 May 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/flags/index.xml" rel="self" type="application/rss+xml"/><item><title>Value type default values</title><link>https://always-developing.github.io/dailydrop/2022/05/24-value-type-default-value/</link><pubDate>Tue, 24 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/24-value-type-default-value/</guid><description>Daily Knowledge Drop Value Types by default, have to have a value and cannot be null in C# - even if uninitialized. This can lead to unexpected results if comparing a value type to null instead of the default value.
Null comparison Consider the below example:
1 2 3 4 5 6 7 8 9 10 11 12 class Program { static Point pointValue; static int IntValue; static void Main(string[] args) { // comparing an uninitialized Point to null Console.</description></item><item><title>Flags attribute for enums</title><link>https://always-developing.github.io/dailydrop/2022/05/23-flags-attribute/</link><pubDate>Mon, 23 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/23-flags-attribute/</guid><description>Daily Knowledge Drop The Flags attribute can be used to automatically treat an enum as a set of flags (a bit field) - flags are useful when elements in the enum might occur in combinations.
Bitwise operations Often an enum will have values of 0, 1, 2, 4, 8, 16 .. instead of 0, 1, 2, 3, 4, 5 .. - this is because it allows bitwise operations to be performed on the enum.</description></item></channel></rss>