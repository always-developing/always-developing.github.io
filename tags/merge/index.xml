<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>merge on Always Developing</title><link>https://always-developing.github.io/tags/merge/</link><description>Recent content in merge on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Wed, 25 May 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/merge/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to the SQL MERGE</title><link>https://always-developing.github.io/dailydrop/2022/05/25-sql-merged/</link><pubDate>Wed, 25 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/25-sql-merged/</guid><description>Daily Knowledge Drop The SQL MERGE statement can be used to perform an INSERT, UPDATE and/or DELETE all in one statement.
This post is just an introduction and does not address any performance issues or other bugs with the statement. See here (although out of date) for a list of potential bugs.
Example In the below examples, we have a main Order table, which stores orders in our e-commerce system. However, orders placed via the mobile app are initially saved into a separate system - but then end up temporarily in the Order_Incoming table, to then be merged into the main Order table to give a single view of customer orders.</description></item></channel></rss>