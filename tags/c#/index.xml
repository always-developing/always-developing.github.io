<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>c# on Always Developing</title><link>https://always-developing.github.io/tags/c#/</link><description>Recent content in c# on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Wed, 02 Feb 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/c#/index.xml" rel="self" type="application/rss+xml"/><item><title>C# Records - the rundown</title><link>https://always-developing.github.io/dailydrop/2022/02/02-record-intro/</link><pubDate>Wed, 02 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/02-record-intro/</guid><description>Daily Knowledge Drop Heard about the new feature of C# called records, but not entirely sure whats its all about? Here&amp;rsquo;s the brief overview.
Records:
Are reference types - just like normal classes Have equality based on value and not memory - unlike normal classes Are immutable (sometimes) - unlike normal classes Can be inherited - just like normal classes Internally the compiler converts will convert a record declaration to a specialized class, so that it conforms to the above.</description></item><item><title>Use the ILogger IsEnabled method</title><link>https://always-developing.github.io/dailydrop/2022/02/01-ilogger-isenabled/</link><pubDate>Tue, 01 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/01-ilogger-isenabled/</guid><description>Daily Knowledge Drop When performing logging using the ILogger interface, to have more effective memory usage, ensure to check if logging is enabled for the relevant log level before calling the log method.
For example:
❌ Don&amp;rsquo;t do this: 1 logger.LogWarning(&amp;#34;Value is outside expected range of &amp;#39;{0}&amp;#39; to &amp;#39;{1}&amp;#39;&amp;#34;, 100, 120);
✅ Do this: 1 2 3 4 if(logger.IsEnabled(LogLevel.Warning)) { logger.LogWarning(&amp;#34;Value is outside expected range of &amp;#39;{0}&amp;#39; to &amp;#39;{1}&amp;#39;&amp;#34;, 100, 120); }</description></item><item><title>Structured logging - an introduction</title><link>https://always-developing.github.io/p/01-2022-structured-logging/</link><pubDate>Mon, 31 Jan 2022 03:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/01-2022-structured-logging/</guid><description>Introduction This post will give an introduction to structured logging, why its needed and should be used. It will also go into detail how to implement and customize the output using Serilog.
Default .NET Logging Before looking at structured logging, we&amp;rsquo;ll take a look at the default .NET logging implementation.
The default logger can be utilized by injecting ILogger&amp;lt;CategoryName&amp;gt; into the relevant constructor. The ILogger&amp;lt;&amp;gt; interface and its implementation are registered automatically with the .</description></item><item><title>Git workflows - explained</title><link>https://always-developing.github.io/p/01-2022-git-workflow/</link><pubDate>Sat, 15 Jan 2022 03:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/01-2022-git-workflow/</guid><description>Introduction This post will give a brief introduction and explanation to Git and Git workflows, and then go into detail for the most prominent workflows (in my experience), when to use them, as well as the main pros and cons of each approach.
Background Git introduction For those unfamiliar, Git (as defined on git-scm.com) is a free and open source distributed version control system, designed to handle everything from small to very large projects with speed and efficiency.</description></item><item><title>Azure Devops Symbol Server - a how to guide</title><link>https://always-developing.github.io/p/12-2021-devops-symbol-server/</link><pubDate>Tue, 04 Jan 2022 03:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/12-2021-devops-symbol-server/</guid><description>Symbol server explained What are symbols? When building a .NET project, symbol files (generally files with the extension of .pdb) are automatically created by the compiler. These symbol files contain metadata information about the source code (indexes, function names, line numbers, etc) and are used when debugging and stepping through code, by linking the debugger (e.g. Visual Studio) to the source code.
Generally, these symbol files are only available when developing locally, and building a project in debug configuration - that is, unless they are uploaded to a symbol server.</description></item><item><title>Dynamic Context (for Entity Framework Core)</title><link>https://always-developing.github.io/p/11-2020-dynamic-context/</link><pubDate>Sat, 11 Dec 2021 03:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/11-2020-dynamic-context/</guid><description>The problem Entity Framework Core is a great go-to ORM for .NET, for any type of application provides almost all the functionality required to do successful database access out the box.
However, there are two use cases, specifically with regards to retrieval of data, it doesn&amp;rsquo;t cater for - this post and the accompanying code sample/NuGet package attempts to provides solutions for these use cases.
First, the setup - an EF DbContext which has one DbSet, for storing Blogs (the below is a standard DbContext configuration):</description></item><item><title>Roslyn Analyzer - tips and tricks (Part 5)</title><link>https://always-developing.github.io/p/analyzer-extra/</link><pubDate>Sun, 28 Nov 2021 05:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/analyzer-extra/</guid><description>All posts in the series:
Part 1: Roslyn Analyzer - explained Part 2: Roslyn Analyzer - writing an analyzer
Part 3: Roslyn Analyzer - writing a code fix
Part 4: Roslyn Analyzer - testing an analyzer and code fix
Part 5: Roslyn Analyzer - tips and tricks (this post)
All code in the posts, including the sample project and working analyzer and code fix are available on Github.
Tips and tricks This post contains a list of tips and tricks, work-around&amp;rsquo;s and other bits of (what I find) useful information to aid in developing analyzers.</description></item><item><title>Roslyn Analyzer - testing an analyzer and code fix (Part 4)</title><link>https://always-developing.github.io/p/analyzer-test/</link><pubDate>Sat, 27 Nov 2021 04:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/analyzer-test/</guid><description>All posts in the series:
Part 1: Roslyn Analyzer - explained Part 2: Roslyn Analyzer - writing an analyzer
Part 3: Roslyn Analyzer - writing a code fix
Part 4: Roslyn Analyzer - testing an analyzer and code fix (this post)
Part 5: Roslyn Analyzer - tips and tricks
All code in the posts, including the sample project and working analyzer and code fix are available on Github.
Analyzer unit test introduction The previous posts in the series detail how to write an analyzer and code fix.</description></item><item><title>Roslyn Analyzer - writing the code fix (Part 3)</title><link>https://always-developing.github.io/p/analyzer-code-fix/</link><pubDate>Fri, 26 Nov 2021 03:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/analyzer-code-fix/</guid><description>All posts in the series:
Part 1: Roslyn Analyzer - explained Part 2: Roslyn Analyzer - writing an analyzer
Part 3: Roslyn Analyzer - writing a code fix (this post)
Part 4: Roslyn Analyzer - testing an analyzer and code fix
Part 5: Roslyn Analyzer - tips and tricks
All code in the posts, including the sample project and working analyzer and code fix are available on Github.
Code fix introduction As detailed in the previous post in the series, now that there is a working analyzer which accurately reports diagnostic information to Roslyn, the next step is to write the code fix to resolve the diagnostic.</description></item><item><title>Roslyn Analyzer - writing the analyzer (Part 2)</title><link>https://always-developing.github.io/p/analyzer-write/</link><pubDate>Thu, 25 Nov 2021 02:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/analyzer-write/</guid><description>All posts in the series:
Part 1: Roslyn Analyzer - explained Part 2: Roslyn Analyzer - writing an analyzer (this post)
Part 3: Roslyn Analyzer - writing a code fix
Part 4: Roslyn Analyzer - testing an analyzer and code fix
Part 5: Roslyn Analyzer - tips and tricks
All code in the posts, including the sample project and working analyzer and code fix are available on Github.
Analyzer introduction To recap from the previous post in the series, an analyzer is a piece of code which inspects code (C# or Visual Basic) during design and compile time, and based on the results of the inspection, can trigger a diagnostic as an Error, Warning or as Information.</description></item><item><title>Roslyn Analyzer - explained (Part 1)</title><link>https://always-developing.github.io/p/analyzer-explained/</link><pubDate>Wed, 24 Nov 2021 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/analyzer-explained/</guid><description>Series introduction This is a a five part series exploring the Roslyn analyzer and code fix functionality, how to successfully write and test a custom analyzer, as well as some useful tips and tricks for writing analyzers.
All posts in the series:
Part 1: Roslyn Analyzer - explained (this post)
Part 2: Roslyn Analyzer - writing an analyzer
Part 3: Roslyn Analyzer - writing a code fix
Part 4: Roslyn Analyzer - testing an analyzer and code fix</description></item><item><title>Multiple implementations of same interface - the options</title><link>https://always-developing.github.io/p/multiple-implementations/</link><pubDate>Sat, 06 Nov 2021 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/multiple-implementations/</guid><description>The challenge Consider a scenario where the requirement is to upload a file to an online provider (AWS S3, Azure Blob or a FTP site in the examples below), where the provider can be easily changed (either dynamically at runtime, or easily with minimal code changes), with the possibility additional providers being added in future.
To make use of dependency injection, a generic interface is created, IFileUploader, along with three implementations AWSUploader, AzureUploader and FTPUploader.</description></item><item><title>Useful Visual Studio keyboard shortcuts</title><link>https://always-developing.github.io/p/vs-keyboard-shortcuts/</link><pubDate>Mon, 25 Oct 2021 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/vs-keyboard-shortcuts/</guid><description>Why learn keyboard shortcuts? So I confess I have no empirical evidence to backup the up to 20% more productive claim. That number is just made up, but with years of experience on my side, it honestly feels fairly accurate to me!
Having often been involved in assisting, troubleshooting and debugging code with fellow developers, it is apparent that the developers which are familiar with their IDE, and make use of the shortcuts, generally (but not always!</description></item><item><title>C# String vs string</title><link>https://always-developing.github.io/p/string-vs-string/</link><pubDate>Thu, 21 Oct 2021 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/string-vs-string/</guid><description>What&amp;rsquo;s the issue? When working with strings in C# one can either use String (uppercase) or string (lowercase) and in both cases the code will compile and execute.
Explicitly typed string variables can be done in either of the following ways:
string variable = &amp;#34;Always Developing&amp;#34;; String variable = &amp;#34;Always Developing&amp;#34;; Or when invoking string related methods, both of the following examples are valid:
string variable = string.Format(&amp;#34;Always Developing using {0}&amp;#34;, &amp;#34;C#&amp;#34;); String variable = String.</description></item></channel></rss>