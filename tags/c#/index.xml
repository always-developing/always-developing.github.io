<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>c# on Always Developing</title><link>https://always-developing.github.io/tags/c#/</link><description>Recent content in c# on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Wed, 01 Jun 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/c#/index.xml" rel="self" type="application/rss+xml"/><item><title>Listing all ASP.NET Core routes</title><link>https://always-developing.github.io/dailydrop/2022/06/01-endpoint-data-source/</link><pubDate>Wed, 01 Jun 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/06/01-endpoint-data-source/</guid><description>Daily Knowledge Drop ASP.NET Core has a build in class, EndpointDataSource, which contains information about a route, while the IEnumerable&amp;lt;EndpointDataSource&amp;gt; collection, available through dependency injection contains information about all endpoints of an application.
Information about a specific endpoint can also be retrieved from the HttpContext for a specific request.
Listing routes First, lets look at getting all the routes (endpoints) for an application - this can be done by injecting IEnumerable&amp;lt;EndpointDataSource&amp;gt; into the relevant constructor (or endpoint delegate in the below example):</description></item><item><title>Generic attributes with C#11</title><link>https://always-developing.github.io/dailydrop/2022/05/31-generic-attribute/</link><pubDate>Tue, 31 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/31-generic-attribute/</guid><description>Daily Knowledge Drop Coming in C# 11 (later this year with .NET 7) is the generic attributes feature - the ability to define an attribute which takes a generic parameter. This is a more convenient style for attributes which require a Type parameter.
Generic attribute code samples below were written using the .NET 7 preview release.
Pre C# 11 - Type parameter Sometimes an attribute needs to take a Type parameter - currently (using any version prior to C# 11) the only way to do this is passing a Type parameter to the constructor.</description></item><item><title>LINQ First and Single performance</title><link>https://always-developing.github.io/dailydrop/2022/05/30-linq-first-performance/</link><pubDate>Mon, 30 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/30-linq-first-performance/</guid><description>Daily Knowledge Drop When using LINQ to retrieve a value from a collection, there are a number of different techniques - however not all are equal in terms of performance.
Today we&amp;rsquo;ll explore the various methods and their comparative performance.
First performance First, we&amp;rsquo;ll look at the various ways to retrieve a single value using variations of First, when multiple values match the condition:
1 2 3 4 5 6 7 8 9 10 11 // populate with 10000 values int[] values = values = Enumerable.</description></item><item><title>Raw string literals in .NET7</title><link>https://always-developing.github.io/dailydrop/2022/05/27-raw-string-literals/</link><pubDate>Fri, 27 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/27-raw-string-literals/</guid><description>Daily Knowledge Drop The new raw string literals feature coming as part of .NET7 (now available through the .NET7 preview) is a new format for dealing with strings, which allows for literals to contain whitespace, new lines, embedded quotes and other special characters without escape sequences.
This new feature is especially useful when working with embedded language strings JSON, XML, HTML etc.
Pre raw string literals Prior to the raw string literal functionality (before C#11), if building up a JSON string, especially when using string interpolation, a large number of escape characters were required:</description></item><item><title>IEnumerable count without enumeration</title><link>https://always-developing.github.io/dailydrop/2022/05/26-trygetnonenumeratedcount/</link><pubDate>Thu, 26 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/26-trygetnonenumeratedcount/</guid><description>Daily Knowledge Drop The TryGetNonEnumeratedCount method (introduced in .NET6) can be used to attempt to determine the number of elements in a sequence without forcing an enumeration over the sequence.
Some implementations of IEnumerable&amp;lt;&amp;gt; can have the count determined without enumerating over all the items, while other implementations require an enumeration. TryGetNonEnumeratedCount will perform a series of type tests, identifying common types whose count can be determined without enumerating.
Example Consider the following sample - first, a method which will return an IEnumerable&amp;lt;string&amp;gt; of shipping options:</description></item><item><title>Value type default values</title><link>https://always-developing.github.io/dailydrop/2022/05/24-value-type-default-value/</link><pubDate>Tue, 24 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/24-value-type-default-value/</guid><description>Daily Knowledge Drop Value Types by default, have to have a value and cannot be null in C# - even if uninitialized. This can lead to unexpected results if comparing a value type to null instead of the default value.
Null comparison Consider the below example:
1 2 3 4 5 6 7 8 9 10 11 12 class Program { static Point pointValue; static int IntValue; static void Main(string[] args) { // comparing an uninitialized Point to null Console.</description></item><item><title>Flags attribute for enums</title><link>https://always-developing.github.io/dailydrop/2022/05/23-flags-attribute/</link><pubDate>Mon, 23 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/23-flags-attribute/</guid><description>Daily Knowledge Drop The Flags attribute can be used to automatically treat an enum as a set of flags (a bit field) - flags are useful when elements in the enum might occur in combinations.
Bitwise operations Often an enum will have values of 0, 1, 2, 4, 8, 16 .. instead of 0, 1, 2, 3, 4, 5 .. - this is because it allows bitwise operations to be performed on the enum.</description></item><item><title>Visual Studio Code snippets</title><link>https://always-developing.github.io/dailydrop/2022/05/20-vs-snippets/</link><pubDate>Fri, 20 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/20-vs-snippets/</guid><description>Daily Knowledge Drop There are a number of code snippets shipped with Visual Studio which can leveraged to automatically create common boilerplate code.
It is possible to also created custom snippets - but this post will look at some of the more useful ones which ship with Visual Studio
Snippets All of the snippets mentioned below (as well as custom snippets) are invoked by typing the relevant shortcut and pressing tab-tab.</description></item><item><title>Creating temporary files in .NET</title><link>https://always-developing.github.io/dailydrop/2022/05/19-temp-file-name/</link><pubDate>Thu, 19 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/19-temp-file-name/</guid><description>Daily Knowledge Drop Sometimes an application needs to create a temporary file to store some data - .NET has built-in functionality to create temporary files, using the Path.GetTempFileName method.
This method will create a uniquely named, zero-byte temporary file on disk and returns the full path of that file.
GetTempFileName Creating a temporary file is incredibly simple using the GetTempFileName method:
1 2 var temporaryFile = Path.GetTempFileName(); Console.WriteLine(temporaryFile); This creates a temporary file in the users temporary folder - below is the output on Windows and on a Linux container respectively:</description></item><item><title>Anonymous type property name inference</title><link>https://always-developing.github.io/dailydrop/2022/05/18-anon-type-infer/</link><pubDate>Wed, 18 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/18-anon-type-infer/</guid><description>Daily Knowledge Drop When creating an anonymous type and setting properties based on other variables, the name of the property can be inferred from the name of the variable setting the property.
Example Below is a very simple example:
1 2 3 4 5 6 7 8 9 10 int Age = 45; string Name = &amp;#34;John Doe&amp;#34;; var anonType = new { Age, Name }; Console.WriteLine(anonType); Here, two variables (one int and one string) are being declared with values.</description></item><item><title>Static constructors in C#</title><link>https://always-developing.github.io/dailydrop/2022/05/17-static-constructor/</link><pubDate>Tue, 17 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/17-static-constructor/</guid><description>Daily Knowledge Drop A class can have a static constructor which is only every called once, the first time a class of the particular type is instantiated.
Today&amp;rsquo;s bit of knowledge is something I know I have known at some point in the past, but due to effectively never using this feature, I find myself relearning it now - and find it interesting enough to feature on today&amp;rsquo;s knowledge drop.</description></item><item><title>Catering for big numbers with BigInteger</title><link>https://always-developing.github.io/dailydrop/2022/05/16-biginteger/</link><pubDate>Mon, 16 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/16-biginteger/</guid><description>Daily Knowledge Drop In C#, the int integral type has a maximum and minimum value of 2,147,483,647 and -2,147,483,648 respectively. Going outside of these bounds will result in inaccurate output.
The BigInteger struct is an immutable type, which has no upper or lower bounds - and this can store values outside those of int.
int It was touched upon the the &amp;ldquo;checked and unchecked keywords&amp;rdquo; post, but lets have a look at what happens when going outside the limits of an int:</description></item><item><title>Controller FromServices change in .NET 7</title><link>https://always-developing.github.io/dailydrop/2022/05/13-controller-fromservices/</link><pubDate>Fri, 13 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/13-controller-fromservices/</guid><description>Daily Knowledge Drop When using minimal apis in .NET6, a class can be injected into the relevant endpoint handler method, without explicitly specifying where the instance is coming from - it is determined by the runtime (and an error thrown if it could not determined).
However when using controllers, and a class is being injected, it has to explicably be stated where the instance is coming from.
This changes in .</description></item><item><title>Rectangle text selection in Visual Studio</title><link>https://always-developing.github.io/dailydrop/2022/05/12-vs-rectangle-selection/</link><pubDate>Thu, 12 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/12-vs-rectangle-selection/</guid><description>Daily Knowledge Drop Holding down the alt key while performing a text selection with the cursor in Visual Studio will allow for a rectangular selection.
Example The best use case for this feature, is copying commented out code (there are of course many other use cases). For example:
1 2 3 4 5 6 7 public void LoopAndOutput(int iterations) { //for(int i = 0; i &amp;lt; iterations; i++) //{ // Console.</description></item><item><title>checked and unchecked keywords</title><link>https://always-developing.github.io/dailydrop/2022/05/11-checked-unchecked/</link><pubDate>Wed, 11 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/11-checked-unchecked/</guid><description>Daily Knowledge Drop The checked and unchecked C# keywords, can be used to control overflow checking when working with integral type arithmetic operations and conversions:
checked: is used to explicitly enable overflow checking unchecked: is used to suppress overflow-checking checked The checked keyword is used to explicitly enable overflow checking. Consider the following:
1 2 3 4 5 int maxInt = Int32.MaxValue; Console.WriteLine(maxInt); maxInt = maxInt + 10; Console.WriteLine(maxInt); Here an int is being defined with its value set to the maximum possible value an int can have.</description></item><item><title>Creating a deterministic guid</title><link>https://always-developing.github.io/dailydrop/2022/05/10-deterministic-guid/</link><pubDate>Tue, 10 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/10-deterministic-guid/</guid><description>Daily Knowledge Drop The MD5 algorithm implementation in conjunction with string encoding can be used to create a deterministic guid based on string value.
Use case Assume you are writing a system, and are using guids as primary keys for all of your data. You are required to consume employee data supplied by a third party - however this data doesn&amp;rsquo;t have a primary key as such, but uses a string employee number to unique identify an employee.</description></item><item><title>Error and warning preprocessor directives</title><link>https://always-developing.github.io/dailydrop/2022/05/09-preprocessor-directives/</link><pubDate>Mon, 09 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/09-preprocessor-directives/</guid><description>Daily Knowledge Drop There are a number of C# directives which can be used to instruct the compiler to generate user-defined errors and warnings as well as control line information:
#error #warning #line #error The #error directive can be used to generate a compiler error with a specific message.
Suppose (for no good reason I can think of), the below code should only be executed when in Release build configuration:</description></item><item><title>Multi-statement line breakpoints</title><link>https://always-developing.github.io/dailydrop/2022/05/06-breakpoint-shortcut/</link><pubDate>Fri, 06 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/06-breakpoint-shortcut/</guid><description>Daily Knowledge Drop When a line of code contains multiple statements, the Toggle Breakpoint shortcut F9, in combination with the I-beam position, can be used to create a breakpoint on a single statement in the line.
This post refers to Visual Studio functionality - the experience might differ with other IDEs.
The problem When a single line contains multiple statements, creating a breakpoint by clicking in the row margin creates a breakpoint on the entire line.</description></item><item><title>Capture exception state</title><link>https://always-developing.github.io/dailydrop/2022/05/05-eventdispatchinfo/</link><pubDate>Thu, 05 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/05-eventdispatchinfo/</guid><description>Daily Knowledge Drop When catching an exception, the ExceptionDispatchInfo class can be used to capture the state of the exception. This can then later be used to throw the original exception, preserving its original state.
Use case The ExceptionDispatchInfo class is used in the situation where an exception occurs and is caught, but additional processing has to occur before the exception can be thrown up the call stack.
The following examples will clear when and why to use ExceptionDispatchInfo.</description></item><item><title>Environment.FailFast</title><link>https://always-developing.github.io/dailydrop/2022/05/04-failfast/</link><pubDate>Wed, 04 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/04-failfast/</guid><description>Daily Knowledge Drop The Environment.FaiFast method can be used to close an application without calling any finally blocks or finalizers.
FailFast sample In the below simple example, the application will try save a record to the database:
if a non-connectivity related exception occurs, the error message is saved to the database. On exit of the code block (in the finally), a information message is also logged to the database if a connectivity related exception occurs, the system is obviously unable to save the exception to the database.</description></item><item><title>Index initializer behavior</title><link>https://always-developing.github.io/dailydrop/2022/05/03-index-initializer/</link><pubDate>Tue, 03 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/03-index-initializer/</guid><description>Daily Knowledge Drop The index initialization style of collection initialization has slightly different (but important) behavior to that of the &amp;ldquo;traditional&amp;rdquo; initialization method.
Initialization Let&amp;rsquo;s look at a few different ways a Dictionary&amp;lt;int, string&amp;gt; can be initialized, and have 5 values set:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // initialize a empty dictionary, then add the values var normalDictionary = new Dictionary&amp;lt;int, string&amp;gt;(); normalDictionary.</description></item><item><title>Attributes on lambda methods</title><link>https://always-developing.github.io/dailydrop/2022/05/02-lambda-attribute/</link><pubDate>Mon, 02 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/02-lambda-attribute/</guid><description>Daily Knowledge Drop Introduced with C#10, attributes can also be applied to lambda expressions and lambda parameters.
Attribute For our example, a method level attribute has been created, which can be used to mark a method for logging (this is just an example, no actual logging will be demonstrated in this post):
1 2 3 4 5 [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] class LoggingEnabledAttribute : Attribute { // marker attribute to flag this method should be logged } Attribute application This attribute, configured to target methods (using another attribute, AttributeUsage) can now be applied to any method:</description></item><item><title>Sealed class performance</title><link>https://always-developing.github.io/dailydrop/2022/04/29-sealed-performance/</link><pubDate>Fri, 29 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/29-sealed-performance/</guid><description>Daily Knowledge Drop There are a number of situations in which performance gains can be had by marking a class as sealed.
Sealed class A sealed class is a class (marked with the sealed keyword) which cannot be inherited from. If the intention is to not have a class available for inheritance (probably the majority of classes by default) the class should be marked as sealed to prevent unwanted effects of it being inherited - but there is the benefit of some performance improvements.</description></item><item><title>Using throw expressions in C#</title><link>https://always-developing.github.io/dailydrop/2022/04/28-throw-expressions/</link><pubDate>Thu, 28 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/28-throw-expressions/</guid><description>Daily Knowledge Drop Throw expressions, introduced in C#7, enabled throw to be used as an expression as well as a statement. This allowed throw to be used in contexts which previously where not supported, specifically:
Conditional operator Null-coalescing expression Expression-bodied method Examples 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Song { public string Name { get; set; } public string Artist { get; set; } public Song(string name) =&amp;gt; Name = name ?</description></item><item><title>Separating pinned documents</title><link>https://always-developing.github.io/dailydrop/2022/04/27-vs-pinned-tab/</link><pubDate>Wed, 27 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/27-vs-pinned-tab/</guid><description>Daily Knowledge Drop Visual Studio has the ability to pin documents which will ensure, by default, that the documents are always on the left side of the open documents tabs.
However it is also possible to pin the documents so they appear in their own separate row - where they are easier to find at a glance.
Default pinning Below is a screen shot of what the default pinning looks like, with appsettings.</description></item><item><title>Soft deletes with EF global filters</title><link>https://always-developing.github.io/dailydrop/2022/04/26-ef-soft-delete/</link><pubDate>Tue, 26 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/26-ef-soft-delete/</guid><description>Daily Knowledge Drop Entity Framework Core&amp;rsquo;s global filter functionality can be used to a apply a filter automatically to all queries on a dbSet.
This is especially useful when dealing with soft delete functionality, where the data is not removed from the database table, but instead just marked as deleted (or archived or retired etc)
Setup Consider a Song class and IRetirable interface which is as follows:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public interface IRetirable { public bool IsRetired { get; set; } } [Table(&amp;#34;Song&amp;#34;)] public class Song : IRetirable { public int Id { get; set; } public string Name { get; set; } public string Artist { get; set; } public int YearReleased { get; set; } public int LengthInSeconds { get; set; } public bool IsRetired { get; set; } public override string ToString() { return $&amp;#34;Song `{Name}` by &amp;#39;{Artist} released &amp;#34; + $&amp;#34;in &amp;#39;{YearReleased}&amp;#39; and is &amp;#39;{LengthInSeconds}&amp;#39; seconds long&amp;#34;; } } Without global filters Every time the Song dbset is queried, only active records (records which have the IsRetired field set to false) should be returned.</description></item><item><title>Goto and switch statements</title><link>https://always-developing.github.io/dailydrop/2022/04/25-goto-switch/</link><pubDate>Mon, 25 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/25-goto-switch/</guid><description>Daily Knowledge Drop The goto statement can be used to transfer control to a statement marked with a label, but it can also be used in a switch statement to transfer control to a different switch section using the switch case label.
This post, nor I, am endorsing the actual use of the goto statement - this post is for information purposes.
The goto statement is an unstructured code flow statement, making code difficult to read and maintain.</description></item><item><title>String interning in C#</title><link>https://always-developing.github.io/dailydrop/2022/04/22-string-interning/</link><pubDate>Fri, 22 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/22-string-interning/</guid><description>Daily Knowledge Drop String interning is a process whereby different string variables of the same value, can both point to the same memory location (to improve memory usage). This is done automatically in most cases, but it is also possible to force this process when not automatically done.
Below we&amp;rsquo;ll look at some cases when interning is done automatically, and how to force it when not automatically done.
Automatic interning First let&amp;rsquo;s look at how string interning happens automatically.</description></item><item><title>Line breaks in string interpolation</title><link>https://always-developing.github.io/dailydrop/2022/04/21-interpolation-line-break/</link><pubDate>Thu, 21 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/21-interpolation-line-break/</guid><description>Daily Knowledge Drop Coming with C#11 (.NET7), line breaks will now be allowed in the interpolation expressions in interpolated strings.
Prior to C#11 Let&amp;rsquo;s look at a simple example:
1 2 3 4 5 6 7 8 9 var aCollectionOfStringValues = new string[] { &amp;#34;String1&amp;#34;, &amp;#34;String2&amp;#34;, &amp;#34;String3&amp;#34; }; // Before C#11 Console.WriteLine($&amp;#34;The first letter of the 2nd item is {aCollectionOfStringValues[1].ToLower().First()}&amp;#34;); The interpolation expression of aCollectionOfStringValues[1].ToLower().First() is fairly long however, unlike normal code, it cannot be split across different lines.</description></item><item><title>Creating a task in a task</title><link>https://always-developing.github.io/dailydrop/2022/04/20-task-attachtoparent/</link><pubDate>Wed, 20 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/20-task-attachtoparent/</guid><description>Daily Knowledge Drop By default, when creating a child task from within a parent task, the child task has no dependency on the parent task - they are unrelated and will be run independently.
If a parent task is require to wait on the child task(s) to complete, then the TaskCreationOptions.AttachedToParent option is to be used when creating the child task.
Single Task First we&amp;rsquo;ll look at an example of just a single task being created:</description></item><item><title>Chaining null-coalescing operator</title><link>https://always-developing.github.io/dailydrop/2022/04/19-chain-null-coalescing/</link><pubDate>Tue, 19 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/19-chain-null-coalescing/</guid><description>Daily Knowledge Drop The C# null-coalescing operator ?? can be chained together to eventually get to a non-null value.
Null-Coalescing operator The null-coalescing operator returns the value of its left-hand operand if it isn&amp;rsquo;t null, otherwise it will return the right-hand operand and assign it to the result.
Below is a simple example:
1 2 3 4 5 6 string value1 = &amp;#34;value1&amp;#34;; string? value2 = null; string resultValue = value2 ?</description></item><item><title>Executing code before Main</title><link>https://always-developing.github.io/dailydrop/2022/04/18-before-main/</link><pubDate>Mon, 18 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/18-before-main/</guid><description>Daily Knowledge Drop In C#, the Main method is the entry point of an application - however there are a few scenarios where it is possible to have code executed before the Main method
Base application Below is the base application we will build on. This is a simple console application which outputs to the console when the Main method is called.
1 2 3 4 5 6 7 public class Program { public static void Main() { Console.</description></item><item><title>Accessing private variables</title><link>https://always-developing.github.io/dailydrop/2022/04/15-accessing-private/</link><pubDate>Fri, 15 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/15-accessing-private/</guid><description>Daily Knowledge Drop Private variables of a class cannot be accessed from outside the class - except for in one specific case!
Private variables of one instance of a class, can be accessed from within another instance of the same class
Example Consider the Person example below:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class Person { public DateOnly BirthDay { get; set; } private int Age; public Person() { } public Person(DateOnly birthday) { BirthDay = birthday; Age = DateOnly.</description></item><item><title>Using Partitioner to improve parallel processing</title><link>https://always-developing.github.io/dailydrop/2022/04/14-partitioner/</link><pubDate>Thu, 14 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/14-partitioner/</guid><description>Daily Knowledge Drop When using Parallel.ForEach to execute tasks in parallel, it might be more performant to execute the tasks in parallel chucks (partitions), using the Partitioner functionality.
Performing tasks In all of the below examples, an array of 1000 sequential integers (starting at 0 all the way up to 999) is used. Each of the 1000 values are multiplied by itself and then stored in the corresponding location in the results array.</description></item><item><title>Creating scopes with braces</title><link>https://always-developing.github.io/dailydrop/2022/04/13-scope-braces/</link><pubDate>Wed, 13 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/13-scope-braces/</guid><description>Daily Knowledge Drop Usually braces {} are uses to define the scope of a specific statement (method, if statement, for loop etc) - but braces can also be used to define a scope without specifying a statement
Example Below is a simple code snippet to demonstrate the scopes:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 var outerVariable = 1; if(outerVariable == 1) { var innerVariable = 100; Console.</description></item><item><title>ConcurrentDictionary AddOrUpdate method</title><link>https://always-developing.github.io/dailydrop/2022/04/12-addorupdate/</link><pubDate>Tue, 12 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/12-addorupdate/</guid><description>Daily Knowledge Drop The C# ConcurrentDictionary implementation has a convenient AddOrUpdate method (unlike the Dictionary implementation) - this method allows for a value to try be added to the concurrent dictionary and if the key already exists, then update with a different value.
Dictionary updates First we&amp;rsquo;ll take a look at how to handle updates when using a Dictionary.
First, a Dictionary&amp;lt;string, int&amp;gt; is instantiated and a few items are added to the dictionary.</description></item><item><title>Exploring the new list pattern</title><link>https://always-developing.github.io/dailydrop/2022/04/11-slice-pattern/</link><pubDate>Mon, 11 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/11-slice-pattern/</guid><description>Daily Knowledge Drop C# 11 (being released towards the end of 2022 with.NET7) is introducing the new list pattern which allows for matching against lists and arrays.
One can also match to zero or more elements (which can then be captured or discarded) in the list pattern, using the new slice pattern, two single dots (..)
The below examples are using C# 11 preview 2, so may change by final release.</description></item><item><title>Setting readonly variable using init</title><link>https://always-developing.github.io/dailydrop/2022/04/08-init-readonly/</link><pubDate>Fri, 08 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/08-init-readonly/</guid><description>Daily Knowledge Drop Readonly variables on a class can be set, not only in the constructor, but also using the init keyword.
Before init Prior to the introduction of the init keyword in C#9, if a class had a readonly variable, its value had to be set either:
when declared in the constructor of the class Consider the following class:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public class Song { // if not explicitly set, this variable will have // default int value public readonly int Id; // explicitly set the value public readonly DateTime DateCreated = DateTime.</description></item><item><title>Managing multi-thread access with ReaderWriterLockSlim</title><link>https://always-developing.github.io/dailydrop/2022/04/07-readerwriterlockslim/</link><pubDate>Thu, 07 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/07-readerwriterlockslim/</guid><description>Daily Knowledge Drop The ReaderWriterLockSlim class can be used to allow multiple threads to read a resource, while only allowing one thread to write to a resource.
In a previous Daily Drop post we looked at how the Interlocked can be used to lock a resource - ReaderWriterLockSlim is similar to this, but allows for finer control over how the resource is locked.
Base setup In the setup, we have a Price class which stores a price.</description></item><item><title>Static anonymous functions</title><link>https://always-developing.github.io/dailydrop/2022/04/06-static-anon-functions/</link><pubDate>Wed, 06 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/06-static-anon-functions/</guid><description>Daily Knowledge Drop When using anonymous functions (lambda functions) - in certain use cases static anonymous functions can be used instead to improve performance of the application.
Anonymous function Code In the below sample, a function OutputDatetime is called to output the current datetime.
However the formatting of the output is determined by a Func (an anonymous function) in conjunction with either the formattedTime string or slimTime string (or any other string format which can be specified).</description></item><item><title>Interlocked vs using the lock keyword</title><link>https://always-developing.github.io/dailydrop/2022/04/05-interlocked/</link><pubDate>Tue, 05 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/05-interlocked/</guid><description>Daily Knowledge Drop Instead of using the lock keyword to block a portion of code from negative effects of multi-threading, the Interlocked class can be used instead to simplify the code.
Why even lock? So why would we need to even lock? consider the following example, regarding a bank account.
The bank account has a balance, and two methods to Deposit and Withdraw money from the account.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Account { public int Balance { get; set; } public void Deposit(int depositAmount) { Balance += depositAmount; } public void Withdraw(int withdrawAmount) { Balance -= withdrawAmount; } } The following code simulates a high volume number of transactions on the bank account - it loops for 10000 iterations in total, creating tasks to deposit $5 and to withdraw $5.</description></item><item><title>Linked Lists in C#</title><link>https://always-developing.github.io/dailydrop/2022/04/04-linked-list/</link><pubDate>Mon, 04 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/04-linked-list/</guid><description>Daily Knowledge Drop There is a built in Linked List implementation in C#, which can be used in certain situations to improve performance.
What is a Linked List? A linked list is a general, linear data structure containing multiple elements, where the elements are linked to each other via pointers (the memory address of the element)
The C# implementation of a linked list is a double linked list, meaning each element points to the element in front of it in the list, as well as the element behind it in the lis (vs each element only pointing to the element in front of it in the list)</description></item><item><title>Cancel a task with OperationCanceledException</title><link>https://always-developing.github.io/dailydrop/2022/04/01-task-cancellationtoken/</link><pubDate>Fri, 01 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/01-task-cancellationtoken/</guid><description>Daily Knowledge Drop When cancelling tasks using a CancellationTokenSource, rather than do a soft cancellation, an OperationCanceledException should be thrown.
Cancellation Token A quick summary of cancellation tokens - they &amp;ldquo;enable cooperative cancellation between threads, thread pool work items or Task objects&amp;rdquo;.
Basically cancellation tokens are instantiated outside a particular thread, and then passed into the thread, to allow for cancellation from outside the thread.
Examples In each of the below examples, there is a &amp;ldquo;long&amp;rdquo; running process which runs for 10 seconds.</description></item><item><title>Anonymous types and with keyword</title><link>https://always-developing.github.io/dailydrop/2022/03/31-anon-with/</link><pubDate>Thu, 31 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/31-anon-with/</guid><description>Daily Knowledge Drop The with keyword can be used to create a new instance of an anonymous type where one of more properties have new values.
Anonymous types First off, a brief explanation of anonymous types. Anonymous types are a way to encapsulate a set of read only properties into a single object without explicitly defining a type. The type name is generated internally by the compiler and the type of each property is inferred by the compiler.</description></item><item><title>Conditional attribute to exclude method execution</title><link>https://always-developing.github.io/dailydrop/2022/03/30-conditional-attribute/</link><pubDate>Wed, 30 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/30-conditional-attribute/</guid><description>Daily Knowledge Drop A method can be marked with the Conditional attribute to have its invocation excluded by the compiler under the specified condition.
Example Consider the following code:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 ProcessPerson(new Person { Id = Guid.</description></item><item><title>Using underscore as a digit separator</title><link>https://always-developing.github.io/dailydrop/2022/03/29-underscore-separator/</link><pubDate>Tue, 29 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/29-underscore-separator/</guid><description>Daily Knowledge Drop An underscore (_) can be used to separate digits when dealing with numeric literals to make it easier to read.
Decimal literals When dealing with large numeric literals, it can sometimes be difficult to read them.
Consider a value representing pi to 100 digits:
1 var pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679; This can instead be represented as follows, with a 3 digit separator. This has no effect on the actual value, just how it appears:</description></item><item><title>StringSyntaxAttribute for syntax highlighting</title><link>https://always-developing.github.io/dailydrop/2022/03/28-stringsyntaxattribute/</link><pubDate>Mon, 28 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/28-stringsyntaxattribute/</guid><description>Daily Knowledge Drop A new attribute StringSyntaxAttribute, being introduced in .NET7, allows for marking a C# string as containing a specific type of value. This results in:
Syntax highlighting for the specific type Basic validation for the specific type. At the time of this post, this feature is only available in .NET7 preview 1, and when using Visual Studio 2022 17.2.0 Preview 1.0. This may change between now and .NET7 release.</description></item><item><title>Null checking with the is keyword</title><link>https://always-developing.github.io/dailydrop/2022/03/25-is-instead-of-equals/</link><pubDate>Fri, 25 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/25-is-instead-of-equals/</guid><description>Daily Knowledge Drop When checking if an instances of a object is null, the is keyword should be used instead of the double equals == operator.
This is because the == operator can be overloaded to change its meaning, while the is keyword cannot.
Comparing using == Consider a Person class, which contains Name and Age properties.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Person p1 = null; Person p2 = new Person(); Person p3 = new Person { Name = &amp;#34;John&amp;#34;, Age = 33 }; if (p1 == null) { Console.</description></item><item><title>Indices and ranges</title><link>https://always-developing.github.io/dailydrop/2022/03/24-indices-ranges/</link><pubDate>Thu, 24 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/24-indices-ranges/</guid><description>Daily Knowledge Drop C#8, first introduced with .NET Core 3, added support for indices and ranges, which provide a succinct syntax for accessing single elements or ranges in a sequence.
Two new operators were introduced to support this functionality:
^: The index from end operator ..: The range operator ^ operator The new ^ operator is an index from end operator, which specifies that an index is relative to the end of the sequence.</description></item><item><title>Using Func&lt;> as an intermediary</title><link>https://always-developing.github.io/dailydrop/2022/03/23-func-as-intermediary/</link><pubDate>Wed, 23 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/23-func-as-intermediary/</guid><description>Daily Knowledge Drop A Func (or Action) can be used as an intermediary to keep code cleaner when dealing with multiple methods or delegates of the same signature.
The setup The root of this post stems from a real-world situation I&amp;rsquo;d encountered. The examples below will be a simplified example of the situation but the setup is as follows:
A handler is obtained from the dependency injection container A collection of none or many interceptors are obtained from the dependency injection container If no interceptors are obtained, then Invoke a HandleOperation method on the handler If any interceptors are obtained, then build up a &amp;ldquo;pipeline&amp;rdquo; of all interceptors and then the handler at the end of the pipeline.</description></item><item><title>ArgumentNullException improvements</title><link>https://always-developing.github.io/dailydrop/2022/03/22-argnullexception/</link><pubDate>Tue, 22 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/22-argnullexception/</guid><description>Daily Knowledge Drop The way in which the validity of a method parameter, and the way the consequent exception is thrown, has evolved over time and has become a lot simpler and cleaner to do.
Today we&amp;rsquo;ll look at the evolution of the ArgumentNullException.
Manual check and throw The first example is probably the most familiar way to do validate - check the value and then throw an exception if the validation passes.</description></item><item><title>Downcasting automatically with dynamic keyword</title><link>https://always-developing.github.io/dailydrop/2022/03/21-dynamic-downcast/</link><pubDate>Mon, 21 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/21-dynamic-downcast/</guid><description>Daily Knowledge Drop The dynamic keyword can be used to to automatically downcast a variable to the correct type when calling a method.
This technique is useful when having a variable of a base type, and a method needs to be called using a derived type.
Lets look at a few examples, which will help make things a bit clearer.
Base setup In the examples below, the following hierarchy of classes is used:</description></item><item><title>Covariance and Contravariance in C#</title><link>https://always-developing.github.io/dailydrop/2022/03/18-co-contravariance/</link><pubDate>Fri, 18 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/18-co-contravariance/</guid><description>Daily Knowledge Drop The way in which base and inherited classes can automatically be cast up or down the hierarchy (depending on the situation) is referred to covariance and contravariance.
Most developers have probably used the concepts of covariance and contravariance in their code, perhaps without even realising it. Looking at a some examples, will help explain in a bit more detail.
Base setup In the examples below, the following hierarchy of classes is used:</description></item><item><title>Closures explained</title><link>https://always-developing.github.io/dailydrop/2022/03/16-closures/</link><pubDate>Wed, 16 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/16-closures/</guid><description>Daily Knowledge Drop A closure is a particular type of first class function, which is linked to the environment in which it was declared, and as such can reference variables in this environment, even if outside the scope of the function.
First class function A closure is a first class function - this basically means C# treats the function as a data type, and as such can be used as if it were a data type.</description></item><item><title>Private variables prefixed with underscore?</title><link>https://always-developing.github.io/dailydrop/2022/03/15-private-underscore/</link><pubDate>Tue, 15 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/15-private-underscore/</guid><description>Daily Knowledge Drop The current convention/standard/best practice when it comes to naming private fields on a class, is to prefix the name with an underscore. Turns out, that this convention is all due to a misunderstanding!
Explained In version 1.0 of the C# language specification, there was a reference to this and underscore. From page 213 of the spec:
1 2 3 4 5 6 7 8 9 public class Nested { C this_c; public Nested(C c) { this_c = c; } public void G() { Console.</description></item><item><title>Enum validity with IsDefined</title><link>https://always-developing.github.io/dailydrop/2022/03/14-enum-isdefined/</link><pubDate>Mon, 14 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/14-enum-isdefined/</guid><description>Daily Knowledge Drop There is a helper IsDefined method on the Enum class, which will check if a numerical value is valid for a specific enum type.
IsDefined method Assume an enum is defined as below:
1 2 3 4 5 6 7 public enum Direction { North, East, South, West } The IsDefined can be invoked as follows:
1 2 3 4 bool IsEnumDefined(int direction) { return Enum.IsDefined(typeof(Direction), direction); } The method takes in the enum type, as well as the numerical value and validates if the enum defines a value for the numerical value.</description></item><item><title>Evolution of multi case switch statements</title><link>https://always-developing.github.io/dailydrop/2022/03/11-switch-multi-case/</link><pubDate>Fri, 11 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/11-switch-multi-case/</guid><description>Daily Knowledge Drop There are numerous ways of handling the multiple case switch statement/expression in C#, and these various methods have evolved over time as C# language features have been introduced and enhanced.
Today we&amp;rsquo;ll look at a few of these ways, specifically around having multiple cases returning the same result.
Switch statement With the traditional switch statement, each case needs to be specified explicitly (except for the default case). This can become very long and tedious if there are many different cases.</description></item><item><title>Duck typing in C#</title><link>https://always-developing.github.io/dailydrop/2022/03/10-duck-typing/</link><pubDate>Thu, 10 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/10-duck-typing/</guid><description>Daily Knowledge Drop The term duck typing refers to the ability to allow for an object to be passed to a method which expects a certain type, even if the object doesn&amp;rsquo;t inherit from the type.
This is more prevalent in dynamic languages and less prevalent in strong type languages, such as C# - however it is still occasionally used.
Duck typing summary The term duck typing is explained by the populate phrase: If it walks like a duck, and quacks like a duck, it must be a duck</description></item><item><title>Lazy loading objects with Lazy&lt;></title><link>https://always-developing.github.io/dailydrop/2022/03/09-lazy-class/</link><pubDate>Wed, 09 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/09-lazy-class/</guid><description>Daily Knowledge Drop The loading of (large) objects can be deferred until they are actually used and required using the Lazy&amp;lt;&amp;gt; class
Sample Use case In our use case, we have a FileEntity which contains details about a file in a specific location. There are two child entities which are properties to FileEntity:
FileSize: stores the file size in bytes (and just stores a double value, so is small) FileContents: stores the contents of the file as a string (depending on the size of the file, this can obviously be very large) The contents of the file will not always be used and are potentially very large - so let&amp;rsquo;s look at how we can defer loading the data until it is actually used and required.</description></item><item><title>Customize debugger class display</title><link>https://always-developing.github.io/dailydrop/2022/03/08-debug-ouput/</link><pubDate>Tue, 08 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/08-debug-ouput/</guid><description>Daily Knowledge Drop The format of how classes are displayed in the debugger can be customized, using a couple of methods.
Sample All the samples below use an instance of the following simple entity class:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // class definition public class Song { public int Id { get; set; } public string Name { get; set; } public string Artist { get; set; } public int YearReleased { get; set; } public int LengthInSeconds { get; set; } } // instance of the class var song = new Song { Id = 1, Name = &amp;#34;Everlong&amp;#34;, Artist = &amp;#34;Foo Fighters&amp;#34;, LengthInSeconds = 250, YearReleased = 1997 }; Default Display By default, the output of a class in the debugger uses the ToString method on a class.</description></item><item><title>Dependency Injection with Func and delegates</title><link>https://always-developing.github.io/dailydrop/2022/03/07-di-func-delegate/</link><pubDate>Mon, 07 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/07-di-func-delegate/</guid><description>Daily Knowledge Drop When requiring to abstract and inject a simple single method interface using dependency injection (DI), its possible to instead use a Func&amp;lt;&amp;gt; or a Delegate instead.
Examples Suppose we want to inject the date time using dependency injection, instead of using DateTime.Now or DateTimeOffSet.Now.
There are a few reasons to do this:
DateTime.Now returns the current system datetime. This does not account for users in different regions, daylight savings etc (this is a complex subject, see the NodaTime reference below for additional information) The current datetime is an external dependency - best practice is for all external dependencies to be abstracted, so that they can be mocked and successfully unit tested There are a number of ways to tackle this requirement.</description></item><item><title>Incremental source generators</title><link>https://always-developing.github.io/dailydrop/2022/03/04-incremental-generator/</link><pubDate>Fri, 04 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/04-incremental-generator/</guid><description>Daily Knowledge Drop Incremental source generators can be used to generated fixed code, which can be used in user code, which can then be used by the source generator to generate additional code.
This is done through the usage of RegisterPostInitializationOutput available to incremental generators.
This will make more sense as we look at an example. This example below is an extension of the example in last week&amp;rsquo;s &amp;ldquo;emitting source generated files&amp;rdquo; post.</description></item><item><title>Enumeration on a custom class</title><link>https://always-developing.github.io/dailydrop/2022/03/03-getenumerator/</link><pubDate>Thu, 03 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/03-getenumerator/</guid><description>Daily Knowledge Drop To enable enumeration on a class (ability to foreach on the class), the only requirement is for a method named GetEnumerator to exist on the class.
There is no requirement for the class to implement any interface (IEnumerable, IEnumerator etc), just the presence of the method is enough.
Without GetEnumerator Last week we looked at adding indexing to a class - adding enumeration is similar, so we&amp;rsquo;ll use similar examples.</description></item><item><title>Optional method parameters</title><link>https://always-developing.github.io/dailydrop/2022/03/02-optional-param-attribute/</link><pubDate>Wed, 02 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/02-optional-param-attribute/</guid><description>Daily Knowledge Drop In additional to giving a parameter a default value, so that it can be omitted when calling a method, the Optional attribute can also be used allow for parameter omission.
Parameter default values When defining a method, the parameters can be given a default value. This allows for the parameter to be omitted when calling the method:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // both required MethodNoDefaults(&amp;#34;John&amp;#34;, 50); // all parameters are required when calling this method void MethodNoDefaults(string name, int age) { Console.</description></item><item><title>System.Text.Json notifications</title><link>https://always-developing.github.io/dailydrop/2022/03/01-json-notifications/</link><pubDate>Tue, 01 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/01-json-notifications/</guid><description>Daily Knowledge Drop As part of .NET6, notification functionality was added to System.Text.Json, allowing for custom logic to be invoked during the serialization and deserializing of objects.
New interfaces Four new interfaces were introduced which can be implemented, according to the requirements:
IJsonOnSerialized IJsonOnSerializing IJsonOnDeserialized IJsonOnDeserializing To receive notifications, the class being serialized/deserialized, needs to implement one or many of the above interfaces.
Example For the examples below, consider a Song class, which has certain required fields in order to be valid.</description></item><item><title>EF Core 6 column order</title><link>https://always-developing.github.io/dailydrop/2022/02/28-ef-column-order/</link><pubDate>Mon, 28 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/28-ef-column-order/</guid><description>Daily Knowledge Drop The Column attribute, as well as the new HasColumnOrder fluent API can be used to determine the specifically order of sequence of columns in the table.
Configurations previously In previous version of Entity Framework Core (EF) the order in which the columns were defined on the entity, where the order in which they were created on the table
1 2 3 4 5 6 7 8 9 10 11 12 public class Song { public string Artist { get; set; } public int YearReleased { get; set; } public int Id { get; set; } public int LengthInSeconds { get; set; } public string Name { get; set; } } The Up method migration created to create the table would look as below.</description></item><item><title>LINQ improvements - FirstOrDefault defaults</title><link>https://always-developing.github.io/dailydrop/2022/02/25-firstordefault-default/</link><pubDate>Fri, 25 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/25-firstordefault-default/</guid><description>Daily Knowledge Drop A number of enhancements have been made to LINQ as part of .NET6 - one of those is the ability to set a default value to be returned from .FirstOrDefault().
Examples List&amp;lt;&amp;gt; is being used in the below examples, but the method is available on all compatible types, not just List&amp;lt;&amp;gt;.
Simple type list 1 2 3 4 5 6 7 8 9 10 11 12 // list of 11 integers var intValues = new List&amp;lt;int&amp;gt; { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; // older method, value found in list Console.</description></item><item><title>Entity Framework Core interceptors</title><link>https://always-developing.github.io/dailydrop/2022/02/24-efcore-interceptors/</link><pubDate>Thu, 24 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/24-efcore-interceptors/</guid><description>Daily Knowledge Drop Entity Framework Core has the concept of interceptors which allow for the insertion of custom logic during the query execution process.
There a number of real world applications for the functionality, for example:
Caching and retrieval of data Logging query or diagnostics information under certain conditions Modifying the query parameters, such as the timeout under certain conditions Interceptor structure Creating an interceptor is straight forward - a class is created which implements the abstract class DbCommandInterceptor, and then overrides the required relevant method(s).</description></item><item><title>Indexers - access a class as an array</title><link>https://always-developing.github.io/dailydrop/2022/02/23-indexers/</link><pubDate>Wed, 23 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/23-indexers/</guid><description>Daily Knowledge Drop Any (relevant) class can be extended so that it can be accessed as an array, using Indexers, just by adding a property to the class.
Without indexers In the examples below, we are using a ProductPrice entity. This class keeps some basic details of a product, as well as an array of prices, one price for each month of the year. So Prices[0] is the price for January, Prices[1] is the price for February and so on.</description></item><item><title>Customize source generator output location</title><link>https://always-developing.github.io/dailydrop/2022/02/22-emit-source-generator-files/</link><pubDate>Tue, 22 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/22-emit-source-generator-files/</guid><description>Daily Knowledge Drop The output location of code created by a Roslyn source generator can be customized, so that the output file can be included in source control (to be included in code reviews for example).
This post will give a brief overview of source generators, and then show the default behavior and how it can be customized.
This post will not go into detail regarding the finer details of source generators - if you would like more details on source generators, see the reference links below.</description></item><item><title>EF Core 6 EntityTypeConfiguration Attribute</title><link>https://always-developing.github.io/dailydrop/2022/02/21-ef-core6-entitytypeconfig/</link><pubDate>Mon, 21 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/21-ef-core6-entitytypeconfig/</guid><description>Daily Knowledge Drop A new attribute called EntityTypeConfiguration was introduced in Entity Framework 6, which allows for easier configuration of custom entity configurations.
Let&amp;rsquo;s take a look at how is simplifies the configuration of an entity.
Configurations previously There are a number of steps performed when manually configuring an entity using Entity Framework Core (EF).
Note: The entity structure below is not optimized or suitable for a production system, it is used just for sample purposes</description></item><item><title>Garbage collection configuration</title><link>https://always-developing.github.io/dailydrop/2022/02/18-gc-variables/</link><pubDate>Fri, 18 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/18-gc-variables/</guid><description>Daily Knowledge Drop There are a number of settings related to the .NET garbage collector (GC) which can be set at runtime using a variety of methods. Generally these do not need to be manually configured, but can be changed from the default to tweak and optimize performance of the application.
Configurations The settings which can be configured are listed below (more detailed information can be found under references section below)</description></item><item><title>Using with IDisposable</title><link>https://always-developing.github.io/dailydrop/2022/02/17-using-idisposable/</link><pubDate>Thu, 17 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/17-using-idisposable/</guid><description>Daily Knowledge Drop To make use of the using statement in C#, all you need to do is implement the IDisposable interface on a class.
The using statement provides a convenient syntax to ensure the correct use of IDisposable objects. The object in question will exists for the scope of the using and then automatically be disposed once out of scope.
This functionality can also be leveraged to create scoped helper instances for certain use cases.</description></item><item><title>Task.WaitAsync in .NET6</title><link>https://always-developing.github.io/dailydrop/2022/02/16-task-wait-async/</link><pubDate>Wed, 16 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/16-task-wait-async/</guid><description>Daily Knowledge Drop A new method on Task called WaitAsync was introduced in .NET6. This method allows for waiting on a Task for a specific period of time before throwing a timeout exception.
On the surface, this might not seem very useful, but lets look at some examples to see how this new method can be leveraged.
The issue Long running processes Suppose we have a long running method which returns a Task - in the below example we are simulating a download process which takes 5 seconds</description></item><item><title>Aliases with global using directives</title><link>https://always-developing.github.io/dailydrop/2022/02/15-global-using-directives/</link><pubDate>Tue, 15 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/15-global-using-directives/</guid><description>Daily Knowledge Drop With the introduction of global usings in C#10, it is now also possible to defined a global alias to have a shortcut to a specific type, across an entire project.
Global usings A quick intro to global usings - In C#10 the concept of global usings was introduced. It allows for a using statement to be prefixed with global, which then includes that using in all files automatically when compiled.</description></item><item><title>Filtering try-catch statement</title><link>https://always-developing.github.io/dailydrop/2022/02/14-exceptions-when/</link><pubDate>Mon, 14 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/14-exceptions-when/</guid><description>Daily Knowledge Drop It is possible to filter the catch portion of the try-catch statement, as well as catch multiple exceptions at the same time using the C# when keyword.
Multiple exceptions In our use case, there are two exception types we are particularly interested in IndexOutOfRangeException and DivideByZeroException.
If either of these exceptions occur, we want to log the exception, and carry on with the workflow. However if any other exception occurs, it should be logged and re-thrown to be handled higher up the call stack.</description></item><item><title>Extract calling method metadata with C#</title><link>https://always-developing.github.io/dailydrop/2022/02/11-caller-metadata/</link><pubDate>Fri, 11 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/11-caller-metadata/</guid><description>Daily Knowledge Drop As part of the C# System.Runtime assembly, there are a number of Attributes which can be used to get information about the caller of a method.
The pattern for usage is the same for all attributes. To extract the metadata when a method is called, the following needs to be done:
A new parameter needs to be added to the method (the type of the parameter depends on the attribute, see examples below) The new parameter must have a default value The new parameter must be decorated with the relevant Attribute Attributes Lets look at a few examples.</description></item><item><title>C# Channels - Produce &amp; Consume data</title><link>https://always-developing.github.io/dailydrop/2022/02/10-channels/</link><pubDate>Thu, 10 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/10-channels/</guid><description>Daily Knowledge Drop Today we dive into a little-known C# feature, I&amp;rsquo;d previously never heard about called Channels.
So what is a channel? - In short, a channel is a feature which allows for passing of data between a producer and consumer(s). It is an efficient, thread-safe queuing mechanism.
Usage The examples set out below are very simple, and do not reflect a real world scenario. They have eben kept as minimal as possible to display the core concepts of the Channel.</description></item><item><title>Performant logging with LoggerMessageAttribute</title><link>https://always-developing.github.io/dailydrop/2022/02/09-logger-message-attribute/</link><pubDate>Wed, 09 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/09-logger-message-attribute/</guid><description>Daily Knowledge Drop .NET6 introduced a new attribute called LoggerMessageAttribute, which leverages source generators and is designed to deliver a highly useable and performant logging solution.
It works by using source generators, triggered at compile time by the presence of LoggerMessageAttribute to generate the additional source code. This solution, due to the compile time generation, is able to eliminate performance hits, such as boxing, temporary memory allocation as well as copies which enables it to be typically considerably faster than the existing run time logging methods.</description></item><item><title>Scheduling with GitHub Actions</title><link>https://always-developing.github.io/dailydrop/2022/02/08-github-action-schedule/</link><pubDate>Tue, 08 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/08-github-action-schedule/</guid><description>Daily Knowledge Drop A GitHub Action can be configured to executed on a set schedule, and it&amp;rsquo;s as simple as adding a line to the workflow YAML using Cron syntax.
As part of the development of this blog, there was a requirement to execute an Action on a schedule - which turned out to be easier than anticipated.
Cron Quick intro to Cron syntax - if you are already familiar with this you can jump straight to how to implement in workflow YAML</description></item><item><title>C# ValueTuple</title><link>https://always-developing.github.io/dailydrop/2022/02/07-valuetuple/</link><pubDate>Mon, 07 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/07-valuetuple/</guid><description>Daily Knowledge Drop You may have heard of C# the Tuple type, but there is also a ValueTuple type available, which has existed in C# since .NET 4.7!
The post will will take a brief look at the Tuple type and compare its functionality to that of the ValueTuple type.
Tuple Tuple usage A Tuple is a data structure which has a specific number and sequence of elements. The data structure can contain up to 8 elements, but if more are required, nested tuple objects can be leveraged in the 8th element to extent the number of elements.</description></item><item><title>EF Core 6: GroupBy enhancements</title><link>https://always-developing.github.io/dailydrop/2022/02/04-ef-core6-groupby/</link><pubDate>Fri, 04 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/04-ef-core6-groupby/</guid><description>Daily Knowledge Drop The GroupBy support in Entity Framework Core 6 got an update, and has made things a lot easier.
In short, the following is now supported:
Translate GroupBy followed by FirstOrDefault (or similar) over a group Supports selecting the top N results from a group Expands navigation&amp;rsquo;s after the GroupBy operator has been applied Examples Setup In all the example below the setup is very simple - a single Song entity and corresponding database table.</description></item><item><title>Use IOptions&lt;> for application configuration</title><link>https://always-developing.github.io/dailydrop/2022/02/03-ioptions/</link><pubDate>Thu, 03 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/03-ioptions/</guid><description>Daily Knowledge Drop Instead of trying to manually setup the dependency injection container with configuration from the, for example, appsettings.json file, use the built in .NET functionality and use the IOptions interface instead - and get IOptionsSnapshot and IOptionsMonitor for free!
This post won&amp;rsquo;t go into details around the options pattern specifically, but it&amp;rsquo;s the recommended approach when dealing with application settings as it enables the application to adhere to two important software architecture principles:</description></item><item><title>C# Records - the rundown</title><link>https://always-developing.github.io/dailydrop/2022/02/02-record-intro/</link><pubDate>Wed, 02 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/02-record-intro/</guid><description>Daily Knowledge Drop Heard about the new feature of C# called records, but not entirely sure whats its all about? Here&amp;rsquo;s the brief overview.
Records:
Are reference types - just like normal classes Have equality based on value and not memory - unlike normal classes Are immutable (sometimes) - unlike normal classes Can be inherited - just like normal classes Internally the compiler converts will convert a record declaration to a specialized class, so that it conforms to the above.</description></item><item><title>Use the ILogger IsEnabled method</title><link>https://always-developing.github.io/dailydrop/2022/02/01-ilogger-isenabled/</link><pubDate>Tue, 01 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/01-ilogger-isenabled/</guid><description>Daily Knowledge Drop When performing logging using the ILogger interface, to have more effective memory usage, ensure to check if logging is enabled for the relevant log level before calling the log method.
For example:
❌ Don&amp;rsquo;t do this: 1 logger.LogWarning(&amp;#34;Value is outside expected range of &amp;#39;{0}&amp;#39; to &amp;#39;{1}&amp;#39;&amp;#34;, 100, 120); ✅ Do this: 1 2 3 4 if(logger.IsEnabled(LogLevel.Warning)) { logger.LogWarning(&amp;#34;Value is outside expected range of &amp;#39;{0}&amp;#39; to &amp;#39;{1}&amp;#39;&amp;#34;, 100, 120); } Both examples will:</description></item><item><title>Structured logging - an introduction</title><link>https://always-developing.github.io/p/01-2022-structured-logging/</link><pubDate>Mon, 31 Jan 2022 03:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/01-2022-structured-logging/</guid><description>Introduction This post will give an introduction to structured logging, why its needed and should be used. It will also go into detail how to implement and customize the output using Serilog.
Default .NET Logging Before looking at structured logging, we&amp;rsquo;ll take a look at the default .NET logging implementation.
The default logger can be utilized by injecting ILogger&amp;lt;CategoryName&amp;gt; into the relevant constructor. The ILogger&amp;lt;&amp;gt; interface and its implementation are registered automatically with the .</description></item><item><title>Git workflows - explained</title><link>https://always-developing.github.io/p/01-2022-git-workflow/</link><pubDate>Sat, 15 Jan 2022 03:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/01-2022-git-workflow/</guid><description>Introduction This post will give a brief introduction and explanation to Git and Git workflows, and then go into detail for the most prominent workflows (in my experience), when to use them, as well as the main pros and cons of each approach.
Background Git introduction For those unfamiliar, Git (as defined on git-scm.com) is a free and open source distributed version control system, designed to handle everything from small to very large projects with speed and efficiency.</description></item><item><title>Azure Devops Symbol Server - a how to guide</title><link>https://always-developing.github.io/p/12-2021-devops-symbol-server/</link><pubDate>Tue, 04 Jan 2022 03:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/12-2021-devops-symbol-server/</guid><description>Symbol server explained What are symbols? When building a .NET project, symbol files (generally files with the extension of .pdb) are automatically created by the compiler. These symbol files contain metadata information about the source code (indexes, function names, line numbers, etc) and are used when debugging and stepping through code, by linking the debugger (e.g. Visual Studio) to the source code.
Generally, these symbol files are only available when developing locally, and building a project in debug configuration - that is, unless they are uploaded to a symbol server.</description></item><item><title>Dynamic Context (for Entity Framework Core)</title><link>https://always-developing.github.io/p/11-2020-dynamic-context/</link><pubDate>Sat, 11 Dec 2021 03:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/11-2020-dynamic-context/</guid><description>The problem Entity Framework Core is a great go-to ORM for .NET, for any type of application provides almost all the functionality required to do successful database access out the box.
However, there are two use cases, specifically with regards to retrieval of data, it doesn&amp;rsquo;t cater for - this post and the accompanying code sample/NuGet package attempts to provides solutions for these use cases.
First, the setup - an EF DbContext which has one DbSet, for storing Blogs (the below is a standard DbContext configuration):</description></item><item><title>Roslyn Analyzer - tips and tricks (Part 5)</title><link>https://always-developing.github.io/p/analyzer-extra/</link><pubDate>Sun, 28 Nov 2021 05:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/analyzer-extra/</guid><description>All posts in the series:
Part 1: Roslyn Analyzer - explained Part 2: Roslyn Analyzer - writing an analyzer
Part 3: Roslyn Analyzer - writing a code fix
Part 4: Roslyn Analyzer - testing an analyzer and code fix
Part 5: Roslyn Analyzer - tips and tricks (this post)
All code in the posts, including the sample project and working analyzer and code fix are available on Github.
Tips and tricks This post contains a list of tips and tricks, work-around&amp;rsquo;s and other bits of (what I find) useful information to aid in developing analyzers.</description></item><item><title>Roslyn Analyzer - testing an analyzer and code fix (Part 4)</title><link>https://always-developing.github.io/p/analyzer-test/</link><pubDate>Sat, 27 Nov 2021 04:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/analyzer-test/</guid><description>All posts in the series:
Part 1: Roslyn Analyzer - explained Part 2: Roslyn Analyzer - writing an analyzer
Part 3: Roslyn Analyzer - writing a code fix
Part 4: Roslyn Analyzer - testing an analyzer and code fix (this post)
Part 5: Roslyn Analyzer - tips and tricks
All code in the posts, including the sample project and working analyzer and code fix are available on Github.
Analyzer unit test introduction The previous posts in the series detail how to write an analyzer and code fix.</description></item><item><title>Roslyn Analyzer - writing the code fix (Part 3)</title><link>https://always-developing.github.io/p/analyzer-code-fix/</link><pubDate>Fri, 26 Nov 2021 03:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/analyzer-code-fix/</guid><description>All posts in the series:
Part 1: Roslyn Analyzer - explained Part 2: Roslyn Analyzer - writing an analyzer
Part 3: Roslyn Analyzer - writing a code fix (this post)
Part 4: Roslyn Analyzer - testing an analyzer and code fix
Part 5: Roslyn Analyzer - tips and tricks
All code in the posts, including the sample project and working analyzer and code fix are available on Github.
Code fix introduction As detailed in the previous post in the series, now that there is a working analyzer which accurately reports diagnostic information to Roslyn, the next step is to write the code fix to resolve the diagnostic.</description></item><item><title>Roslyn Analyzer - writing the analyzer (Part 2)</title><link>https://always-developing.github.io/p/analyzer-write/</link><pubDate>Thu, 25 Nov 2021 02:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/analyzer-write/</guid><description>All posts in the series:
Part 1: Roslyn Analyzer - explained Part 2: Roslyn Analyzer - writing an analyzer (this post)
Part 3: Roslyn Analyzer - writing a code fix
Part 4: Roslyn Analyzer - testing an analyzer and code fix
Part 5: Roslyn Analyzer - tips and tricks
All code in the posts, including the sample project and working analyzer and code fix are available on Github.
Analyzer introduction To recap from the previous post in the series, an analyzer is a piece of code which inspects code (C# or Visual Basic) during design and compile time, and based on the results of the inspection, can trigger a diagnostic as an Error, Warning or as Information.</description></item><item><title>Roslyn Analyzer - explained (Part 1)</title><link>https://always-developing.github.io/p/analyzer-explained/</link><pubDate>Wed, 24 Nov 2021 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/analyzer-explained/</guid><description>Series introduction This is a a five part series exploring the Roslyn analyzer and code fix functionality, how to successfully write and test a custom analyzer, as well as some useful tips and tricks for writing analyzers.
All posts in the series:
Part 1: Roslyn Analyzer - explained (this post)
Part 2: Roslyn Analyzer - writing an analyzer
Part 3: Roslyn Analyzer - writing a code fix
Part 4: Roslyn Analyzer - testing an analyzer and code fix</description></item><item><title>Multiple implementations of same interface - the options</title><link>https://always-developing.github.io/p/multiple-implementations/</link><pubDate>Sat, 06 Nov 2021 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/multiple-implementations/</guid><description>The challenge Consider a scenario where the requirement is to upload a file to an online provider (AWS S3, Azure Blob or a FTP site in the examples below), where the provider can be easily changed (either dynamically at runtime, or easily with minimal code changes), with the possibility additional providers being added in future.
To make use of dependency injection, a generic interface is created, IFileUploader, along with three implementations AWSUploader, AzureUploader and FTPUploader.</description></item><item><title>Useful Visual Studio keyboard shortcuts</title><link>https://always-developing.github.io/p/vs-keyboard-shortcuts/</link><pubDate>Mon, 25 Oct 2021 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/vs-keyboard-shortcuts/</guid><description>Why learn keyboard shortcuts? So I confess I have no empirical evidence to backup the up to 20% more productive claim. That number is just made up, but with years of experience on my side, it honestly feels fairly accurate to me!
Having often been involved in assisting, troubleshooting and debugging code with fellow developers, it is apparent that the developers which are familiar with their IDE, and make use of the shortcuts, generally (but not always!</description></item><item><title>C# String vs string</title><link>https://always-developing.github.io/p/string-vs-string/</link><pubDate>Thu, 21 Oct 2021 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/string-vs-string/</guid><description>What&amp;rsquo;s the issue? When working with strings in C# one can either use String (uppercase) or string (lowercase) and in both cases the code will compile and execute.
Explicitly typed string variables can be done in either of the following ways:
string variable = &amp;#34;Always Developing&amp;#34;; String variable = &amp;#34;Always Developing&amp;#34;; Or when invoking string related methods, both of the following examples are valid:
string variable = string.Format(&amp;#34;Always Developing using {0}&amp;#34;, &amp;#34;C#&amp;#34;); String variable = String.</description></item></channel></rss>