<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>check on Always Developing</title><link>https://always-developing.github.io/tags/check/</link><description>Recent content in check on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Fri, 25 Mar 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/check/index.xml" rel="self" type="application/rss+xml"/><item><title>Null checking with the is keyword</title><link>https://always-developing.github.io/dailydrop/2022/03/25-is-instead-of-equals/</link><pubDate>Fri, 25 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/25-is-instead-of-equals/</guid><description>Daily Knowledge Drop When checking if an instances of a object is null, the is keyword should be used instead of the double equals == operator.
This is because the == operator can be overloaded to change its meaning, while the is keyword cannot.
Comparing using == Consider a Person class, which contains Name and Age properties.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Person p1 = null; Person p2 = new Person(); Person p3 = new Person { Name = &amp;#34;John&amp;#34;, Age = 33 }; if (p1 == null) { Console.</description></item></channel></rss>