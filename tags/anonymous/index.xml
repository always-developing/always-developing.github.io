<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>anonymous on Always Developing</title><link>https://always-developing.github.io/tags/anonymous/</link><description>Recent content in anonymous on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Wed, 18 May 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/anonymous/index.xml" rel="self" type="application/rss+xml"/><item><title>Anonymous type property name inference</title><link>https://always-developing.github.io/dailydrop/2022/05/18-anon-type-infer/</link><pubDate>Wed, 18 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/18-anon-type-infer/</guid><description>Daily Knowledge Drop When creating an anonymous type and setting properties based on other variables, the name of the property can be inferred from the name of the variable setting the property.
Example Below is a very simple example:
1 2 3 4 5 6 7 8 9 10 int Age = 45; string Name = &amp;#34;John Doe&amp;#34;; var anonType = new { Age, Name }; Console.WriteLine(anonType); Here, two variables (one int and one string) are being declared with values.</description></item><item><title>Static anonymous functions</title><link>https://always-developing.github.io/dailydrop/2022/04/06-static-anon-functions/</link><pubDate>Wed, 06 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/06-static-anon-functions/</guid><description>Daily Knowledge Drop When using anonymous functions (lambda functions) - in certain use cases static anonymous functions can be used instead to improve performance of the application.
Anonymous function Code In the below sample, a function OutputDatetime is called to output the current datetime.
However the formatting of the output is determined by a Func (an anonymous function) in conjunction with either the formattedTime string or slimTime string (or any other string format which can be specified).</description></item><item><title>Cancel a task with OperationCanceledException</title><link>https://always-developing.github.io/dailydrop/2022/04/01-task-cancellationtoken/</link><pubDate>Fri, 01 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/01-task-cancellationtoken/</guid><description>Daily Knowledge Drop When cancelling tasks using a CancellationTokenSource, rather than do a soft cancellation, an OperationCanceledException should be thrown.
Cancellation Token A quick summary of cancellation tokens - they &amp;ldquo;enable cooperative cancellation between threads, thread pool work items or Task objects&amp;rdquo;.
Basically cancellation tokens are instantiated outside a particular thread, and then passed into the thread, to allow for cancellation from outside the thread.
Examples In each of the below examples, there is a &amp;ldquo;long&amp;rdquo; running process which runs for 10 seconds.</description></item><item><title>Anonymous types and with keyword</title><link>https://always-developing.github.io/dailydrop/2022/03/31-anon-with/</link><pubDate>Thu, 31 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/31-anon-with/</guid><description>Daily Knowledge Drop The with keyword can be used to create a new instance of an anonymous type where one of more properties have new values.
Anonymous types First off, a brief explanation of anonymous types. Anonymous types are a way to encapsulate a set of read only properties into a single object without explicitly defining a type. The type name is generated internally by the compiler and the type of each property is inferred by the compiler.</description></item></channel></rss>