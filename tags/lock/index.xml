<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lock on Always Developing</title><link>https://always-developing.github.io/tags/lock/</link><description>Recent content in lock on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Thu, 07 Apr 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/lock/index.xml" rel="self" type="application/rss+xml"/><item><title>Managing multi-thread access with ReaderWriterLockSlim</title><link>https://always-developing.github.io/dailydrop/2022/04/07-readerwriterlockslim/</link><pubDate>Thu, 07 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/07-readerwriterlockslim/</guid><description>Daily Knowledge Drop The ReaderWriterLockSlim class can be used to allow multiple threads to read a resource, while only allowing one thread to write to a resource.
In a previous Daily Drop post we looked at how the Interlocked can be used to lock a resource - ReaderWriterLockSlim is similar to this, but allows for finer control over how the resource is locked.
Base setup In the setup, we have a Price class which stores a price.</description></item><item><title>Interlocked vs using the lock keyword</title><link>https://always-developing.github.io/dailydrop/2022/04/05-interlocked/</link><pubDate>Tue, 05 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/05-interlocked/</guid><description>Daily Knowledge Drop Instead of using the lock keyword to block a portion of code from negative effects of multi-threading, the Interlocked class can be used instead to simplify the code.
Why even lock? So why would we need to even lock? consider the following example, regarding a bank account.
The bank account has a balance, and two methods to Deposit and Withdraw money from the account.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Account { public int Balance { get; set; } public void Deposit(int depositAmount) { Balance += depositAmount; } public void Withdraw(int withdrawAmount) { Balance -= withdrawAmount; } } The following code simulates a high volume number of transactions on the bank account - it loops for 10000 iterations in total, creating tasks to deposit $5 and to withdraw $5.</description></item></channel></rss>