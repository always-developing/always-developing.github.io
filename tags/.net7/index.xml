<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.net7 on Always Developing</title><link>https://always-developing.github.io/tags/.net7/</link><description>Recent content in .net7 on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Fri, 27 May 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/.net7/index.xml" rel="self" type="application/rss+xml"/><item><title>Raw string literals in .NET7</title><link>https://always-developing.github.io/dailydrop/2022/05/27-raw-string-literals/</link><pubDate>Fri, 27 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/27-raw-string-literals/</guid><description>Daily Knowledge Drop The new raw string literals feature coming as part of .NET7 (now available through the .NET7 preview) is a new format for dealing with strings, which allows for literals to contain whitespace, new lines, embedded quotes and other special characters without escape sequences.
This new feature is especially useful when working with embedded language strings JSON, XML, HTML etc.
Pre raw string literals Prior to the raw string literal functionality (before C#11), if building up a JSON string, especially when using string interpolation, a large number of escape characters were required:</description></item><item><title>Line breaks in string interpolation</title><link>https://always-developing.github.io/dailydrop/2022/04/21-interpolation-line-break/</link><pubDate>Thu, 21 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/21-interpolation-line-break/</guid><description>Daily Knowledge Drop Coming with C#11 (.NET7), line breaks will now be allowed in the interpolation expressions in interpolated strings.
Prior to C#11 Let&amp;rsquo;s look at a simple example:
1 2 3 4 5 6 7 8 9 var aCollectionOfStringValues = new string[] { &amp;#34;String1&amp;#34;, &amp;#34;String2&amp;#34;, &amp;#34;String3&amp;#34; }; // Before C#11 Console.WriteLine($&amp;#34;The first letter of the 2nd item is {aCollectionOfStringValues[1].ToLower().First()}&amp;#34;); The interpolation expression of aCollectionOfStringValues[1].ToLower().First() is fairly long however, unlike normal code, it cannot be split across different lines.</description></item></channel></rss>