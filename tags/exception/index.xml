<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>exception on Always Developing</title><link>https://always-developing.github.io/tags/exception/</link><description>Recent content in exception on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Thu, 05 May 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/exception/index.xml" rel="self" type="application/rss+xml"/><item><title>Capture exception state</title><link>https://always-developing.github.io/dailydrop/2022/05/05-eventdispatchinfo/</link><pubDate>Thu, 05 May 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/05/05-eventdispatchinfo/</guid><description>Daily Knowledge Drop When catching an exception, the ExceptionDispatchInfo class can be used to capture the state of the exception. This can then later be used to throw the original exception, preserving its original state.
Use case The ExceptionDispatchInfo class is used in the situation where an exception occurs and is caught, but additional processing has to occur before the exception can be thrown up the call stack.
The following examples will clear when and why to use ExceptionDispatchInfo.</description></item><item><title>ArgumentNullException improvements</title><link>https://always-developing.github.io/dailydrop/2022/03/22-argnullexception/</link><pubDate>Tue, 22 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/22-argnullexception/</guid><description>Daily Knowledge Drop The way in which the validity of a method parameter, and the way the consequent exception is thrown, has evolved over time and has become a lot simpler and cleaner to do.
Today we&amp;rsquo;ll look at the evolution of the ArgumentNullException.
Manual check and throw The first example is probably the most familiar way to do validate - check the value and then throw an exception if the validation passes.</description></item><item><title>Filtering try-catch statement</title><link>https://always-developing.github.io/dailydrop/2022/02/14-exceptions-when/</link><pubDate>Mon, 14 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/14-exceptions-when/</guid><description>Daily Knowledge Drop It is possible to filter the catch portion of the try-catch statement, as well as catch multiple exceptions at the same time using the C# when keyword.
Multiple exceptions In our use case, there are two exception types we are particularly interested in IndexOutOfRangeException and DivideByZeroException.
If either of these exceptions occur, we want to log the exception, and carry on with the workflow. However if any other exception occurs, it should be logged and re-thrown to be handled higher up the call stack.</description></item></channel></rss>