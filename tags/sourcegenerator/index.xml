<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sourceGenerator on Always Developing</title><link>https://always-developing.github.io/tags/sourcegenerator/</link><description>Recent content in sourceGenerator on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Tue, 22 Feb 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/sourcegenerator/index.xml" rel="self" type="application/rss+xml"/><item><title>Customize source generator output location</title><link>https://always-developing.github.io/dailydrop/2022/02/22-emit-source-generator-files/</link><pubDate>Tue, 22 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/22-emit-source-generator-files/</guid><description>Daily Knowledge Drop The output location of code created by a Roslyn source generator can be customized, so that the output file can be included in source control (to be included in code reviews for example).
This post will give a brief overview of source generators, and then show the default behavior and how it can be customized.
This post will not go into detail regarding the finer details of source generators - if you would like more details on source generators, see the reference links below.</description></item><item><title>Performant logging with LoggerMessageAttribute</title><link>https://always-developing.github.io/dailydrop/2022/02/09-logger-message-attribute/</link><pubDate>Wed, 09 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/09-logger-message-attribute/</guid><description>Daily Knowledge Drop .NET6 introduced a new attribute called LoggerMessageAttribute, which leverages source generators and is designed to deliver a highly useable and performant logging solution.
It works by using source generators, triggered at compile time by the presence of LoggerMessageAttribute to generate the additional source code. This solution, due to the compile time generation, is able to eliminate performance hits, such as boxing, temporary memory allocation as well as copies which enables it to be typically considerably faster than the existing run time logging methods.</description></item></channel></rss>