<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>partitioner on Always Developing</title><link>https://always-developing.github.io/tags/partitioner/</link><description>Recent content in partitioner on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Thu, 14 Apr 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/partitioner/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Partitioner to improve parallel processing</title><link>https://always-developing.github.io/dailydrop/2022/04/14-partitioner/</link><pubDate>Thu, 14 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/14-partitioner/</guid><description>Daily Knowledge Drop When using Parallel.ForEach to execute tasks in parallel, it might be more performant to execute the tasks in parallel chucks (partitions), using the Partitioner functionality.
Performing tasks In all of the below examples, an array of 1000 sequential integers (starting at 0 all the way up to 999) is used. Each of the 1000 values are multiplied by itself and then stored in the corresponding location in the results array.</description></item></channel></rss>