<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>efcore on Always Developing</title><link>https://always-developing.github.io/tags/efcore/</link><description>Recent content in efcore on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Tue, 26 Apr 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/tags/efcore/index.xml" rel="self" type="application/rss+xml"/><item><title>Soft deletes with EF global filters</title><link>https://always-developing.github.io/dailydrop/2022/04/26-ef-soft-delete/</link><pubDate>Tue, 26 Apr 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/04/26-ef-soft-delete/</guid><description>Daily Knowledge Drop Entity Framework Core&amp;rsquo;s global filter functionality can be used to a apply a filter automatically to all queries on a dbSet.
This is especially useful when dealing with soft delete functionality, where the data is not removed from the database table, but instead just marked as deleted (or archived or retired etc)
Setup Consider a Song class and IRetirable interface which is as follows:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public interface IRetirable { public bool IsRetired { get; set; } } [Table(&amp;#34;Song&amp;#34;)] public class Song : IRetirable { public int Id { get; set; } public string Name { get; set; } public string Artist { get; set; } public int YearReleased { get; set; } public int LengthInSeconds { get; set; } public bool IsRetired { get; set; } public override string ToString() { return $&amp;#34;Song `{Name}` by &amp;#39;{Artist} released &amp;#34; + $&amp;#34;in &amp;#39;{YearReleased}&amp;#39; and is &amp;#39;{LengthInSeconds}&amp;#39; seconds long&amp;#34;; } } Without global filters Every time the Song dbset is queried, only active records (records which have the IsRetired field set to false) should be returned.</description></item><item><title>EF Core 6 column order</title><link>https://always-developing.github.io/dailydrop/2022/02/28-ef-column-order/</link><pubDate>Mon, 28 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/28-ef-column-order/</guid><description>Daily Knowledge Drop The Column attribute, as well as the new HasColumnOrder fluent API can be used to determine the specifically order of sequence of columns in the table.
Configurations previously In previous version of Entity Framework Core (EF) the order in which the columns were defined on the entity, where the order in which they were created on the table
1 2 3 4 5 6 7 8 9 10 11 12 public class Song { public string Artist { get; set; } public int YearReleased { get; set; } public int Id { get; set; } public int LengthInSeconds { get; set; } public string Name { get; set; } } The Up method migration created to create the table would look as below.</description></item><item><title>Entity Framework Core interceptors</title><link>https://always-developing.github.io/dailydrop/2022/02/24-efcore-interceptors/</link><pubDate>Thu, 24 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/24-efcore-interceptors/</guid><description>Daily Knowledge Drop Entity Framework Core has the concept of interceptors which allow for the insertion of custom logic during the query execution process.
There a number of real world applications for the functionality, for example:
Caching and retrieval of data Logging query or diagnostics information under certain conditions Modifying the query parameters, such as the timeout under certain conditions Interceptor structure Creating an interceptor is straight forward - a class is created which implements the abstract class DbCommandInterceptor, and then overrides the required relevant method(s).</description></item><item><title>EF Core 6 EntityTypeConfiguration Attribute</title><link>https://always-developing.github.io/dailydrop/2022/02/21-ef-core6-entitytypeconfig/</link><pubDate>Mon, 21 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/21-ef-core6-entitytypeconfig/</guid><description>Daily Knowledge Drop A new attribute called EntityTypeConfiguration was introduced in Entity Framework 6, which allows for easier configuration of custom entity configurations.
Let&amp;rsquo;s take a look at how is simplifies the configuration of an entity.
Configurations previously There are a number of steps performed when manually configuring an entity using Entity Framework Core (EF).
Note: The entity structure below is not optimized or suitable for a production system, it is used just for sample purposes</description></item><item><title>EF Core 6: GroupBy enhancements</title><link>https://always-developing.github.io/dailydrop/2022/02/04-ef-core6-groupby/</link><pubDate>Fri, 04 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/04-ef-core6-groupby/</guid><description>Daily Knowledge Drop The GroupBy support in Entity Framework Core 6 got an update, and has made things a lot easier.
In short, the following is now supported:
Translate GroupBy followed by FirstOrDefault (or similar) over a group Supports selecting the top N results from a group Expands navigation&amp;rsquo;s after the GroupBy operator has been applied Examples Setup In all the example below the setup is very simple - a single Song entity and corresponding database table.</description></item></channel></rss>