<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dailydrops on Always Developing</title><link>https://always-developing.github.io/dailydrop/</link><description>Recent content in Dailydrops on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Mon, 07 Feb 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/dailydrop/index.xml" rel="self" type="application/rss+xml"/><item><title>C# ValueTuple</title><link>https://always-developing.github.io/dailydrop/2022/02/07-valuetuple/</link><pubDate>Mon, 07 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/07-valuetuple/</guid><description>Daily Knowledge Drop You may have heard of C# the Tuple type, but there is also a ValueTuple type available, which has existed in C# since .NET 4.7!
The post will will take a brief look at the Tuple type and compare its functionality to that of the ValueTuple type.
Tuple Tuple usage A Tuple is a data structure which has a specific number and sequence of elements. The data structure can contain up to 8 elements, but if more are required, nested tuple objects can be leveraged in the 8th element to extent the number of elements.</description></item><item><title>EF Core 6: GroupBy enhancements</title><link>https://always-developing.github.io/dailydrop/2022/02/04-ef-core6-groupby/</link><pubDate>Fri, 04 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/04-ef-core6-groupby/</guid><description>Daily Knowledge Drop The GroupBy support in Entity Framework Core 6 got an update, and has made things a lot easier.
In short, the following is now supported:
Translate GroupBy followed by FirstOrDefault (or similar) over a group Supports selecting the top N results from a group Expands navigation&amp;rsquo;s after the GroupBy operator has been applied Examples Setup In all the example below the setup is very simple - a single Song entity and corresponding database table.</description></item><item><title>Use IOptions&lt;> for application configuration</title><link>https://always-developing.github.io/dailydrop/2022/02/03-ioptions/</link><pubDate>Thu, 03 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/03-ioptions/</guid><description>Daily Knowledge Drop Instead of trying to manually setup the dependency injection container with configuration from the, for example, appsettings.json file, use the built in .NET functionality and use the IOptions interface instead - and get IOptionsSnapshot and IOptionsMonitor for free!
This post won&amp;rsquo;t go into details around the options pattern specifically, but it&amp;rsquo;s the recommended approach when dealing with application settings as it enables the application to adhere to two important software architecture principles:</description></item><item><title>C# Records - the rundown</title><link>https://always-developing.github.io/dailydrop/2022/02/02-record-intro/</link><pubDate>Wed, 02 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/02-record-intro/</guid><description>Daily Knowledge Drop Heard about the new feature of C# called records, but not entirely sure whats its all about? Here&amp;rsquo;s the brief overview.
Records:
Are reference types - just like normal classes Have equality based on value and not memory - unlike normal classes Are immutable (sometimes) - unlike normal classes Can be inherited - just like normal classes Internally the compiler converts will convert a record declaration to a specialized class, so that it conforms to the above.</description></item><item><title>Use the ILogger IsEnabled method</title><link>https://always-developing.github.io/dailydrop/2022/02/01-ilogger-isenabled/</link><pubDate>Tue, 01 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/01-ilogger-isenabled/</guid><description>Daily Knowledge Drop When performing logging using the ILogger interface, to have more effective memory usage, ensure to check if logging is enabled for the relevant log level before calling the log method.
For example:
❌ Don&amp;rsquo;t do this: 1 logger.LogWarning(&amp;#34;Value is outside expected range of &amp;#39;{0}&amp;#39; to &amp;#39;{1}&amp;#39;&amp;#34;, 100, 120);
✅ Do this: 1 2 3 4 if(logger.IsEnabled(LogLevel.Warning)) { logger.LogWarning(&amp;#34;Value is outside expected range of &amp;#39;{0}&amp;#39; to &amp;#39;{1}&amp;#39;&amp;#34;, 100, 120); }</description></item></channel></rss>