<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>https://alwaysdeveloping.net/</id>
	<title />
	<link rel="self" href="https://alwaysdeveloping.net/" />
	<rights>Copyright © 2022</rights>
	<updated>2022-07-11T04:12:09Z</updated>
	<subtitle>always learning | always growing</subtitle>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/07/11-initializer-expansion</id>
		<title>Expanding on an property initializer</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/07/11-initializer-expansion" />
		<updated>2022-07-11T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;A class &lt;code&gt;property initializer can be expanded on in the class declaration&lt;/code&gt; (assuming the property type supports it, such as Dictionary) to a have additional values added.&lt;/p&gt;
&lt;p&gt;This technique (explained further below) does have fairly limited practical application and is quite niche - but it does have its place, and practical or not, is very interesting.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="use-case"&gt;Use case&lt;/h2&gt;
&lt;p&gt;In our use case, when an exception occurs, we want to capture some generic information about the PC on which the exception occurred (machine name, operating system), as well as the actual exception.&lt;/p&gt;
&lt;p&gt;If we have an &lt;code&gt;ExceptionInformation&lt;/code&gt; class to capture all this information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static information such as the &lt;em&gt;machine name&lt;/em&gt; can be &lt;code&gt;automatically initialized&lt;/code&gt; on instantiation of an &lt;em&gt;ExceptionInformation&lt;/em&gt; instance&lt;/li&gt;
&lt;li&gt;Dynamic information such as the &lt;em&gt;exception&lt;/em&gt; must be &lt;code&gt;manually supplied&lt;/code&gt; to our capture class&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="constructor"&gt;Constructor&lt;/h3&gt;
&lt;p&gt;One way of &lt;em&gt;manually&lt;/em&gt; supplying the exception information is pass it to the &lt;code&gt;ExceptionInformation&lt;/code&gt; instance in the constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class ExceptionInformation
{
    // string representation of the exception
    private readonly string _exceptionString;

    // set the exception in the constructor
    public ExceptionInformation(string exceptionString)
    {
        _exceptionString = exceptionString;
    }

    // A dictionary to contain all the relevent information about the exception
    // initialize it with the information on class initialization
    public Dictionary&amp;lt;string, object&amp;gt; Configuration { get; } = 
        new Dictionary&amp;lt;string, object&amp;gt;
        {
            [&amp;quot;MachineName&amp;quot;] = Environment.MachineName,
            [&amp;quot;OsVersion&amp;quot;] = Environment.OSVersion
        };

    // override method to be able to output a representation of the class
    public override string ToString()
    {
        return $&amp;quot;{_exceptionString}{Environment.NewLine}&amp;quot; +
            $&amp;quot;{String.Join(Environment.NewLine, Configuration.Select(d =&amp;gt; $&amp;quot;{d.Key}: { d.Value}&amp;quot;))}&amp;quot;;
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The usage of the class would be as follows (with an exception being forced to occur):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;try
{
    // force a divide by zero exception
    var intValue = 100;
    _ = intValue / 0;
}
catch(Exception ex)
{
    // capture the exception
    var ei = new ExceptionInformation(ex.ToString());
    Console.WriteLine(ei.ToString());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;System.DivideByZeroException: Attempted to divide by zero.
   at Program.&amp;lt;Main&amp;gt;$(String[] args) in 
    C:\Development\Projects\InitializerExpansion\Program.cs:line 5
MachineName: T800
OsVersion: Microsoft Windows NT 10.0.22000.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are other options to achieve the same result - instead of a setting the private &lt;em&gt;_exceptionString&lt;/em&gt; variable, the exception string value could have been added directly to the dictionary in the constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public ExceptionInformation(string exceptionString)
{
    this.Configuration.Add(&amp;quot;ExceptionString&amp;quot;, exceptionString);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both of the above approaches are valid and will achieve the desired result, however another interesting approach is to &lt;em&gt;expand on the property initializer&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="initializer-expansion"&gt;Initializer expansion&lt;/h3&gt;
&lt;p&gt;The initializer can be expanded to include adding custom information to the &lt;em&gt;ExceptionInformation&lt;/em&gt; instance. Similar to how the &lt;em&gt;exceptionString&lt;/em&gt; was added to the dictionary in the constructor in the above example, except this method is more dynamic and allows for any values to be added.&lt;/p&gt;
&lt;p&gt;If we remove all references to &lt;em&gt;exceptionString&lt;/em&gt; from the &lt;em&gt;ExceptionInformation&lt;/em&gt; class, including from the constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class ExceptionInformation
{
    // No constructor which takes the exception
   
    // A dictionary to contain all the relevent information about the exception
    // initialize it with the information on class initialization
    public Dictionary&amp;lt;string, object&amp;gt; Configuration { get; } = 
        new Dictionary&amp;lt;string, object&amp;gt;
        {
            [&amp;quot;MachineName&amp;quot;] = Environment.MachineName,
            [&amp;quot;OsVersion&amp;quot;] = Environment.OSVersion
        };

    // override method to be able to output a representation of the class
    // Now ONLY outputs the dictionary
    public override string ToString()
    {
        return String.Join(Environment.NewLine, Configuration.Select(d =&amp;gt; $&amp;quot;{d.Key}: {d.Value}&amp;quot;));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This usage of the class is now as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;try
{
    // force a divide by zero exception
    var intValue = 100;
    _ = intValue / 0;
}
catch(Exception ex)
{
    // capture the exception by expanding the Configuration initialization
    var ei = new ExceptionInformation
    {
        Configuration =
        {
            [&amp;quot;ExceptionString&amp;quot;] = ex.ToString()
            // any other data can be added here
        }
    };
    Console.WriteLine(ei.ToString());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the &lt;em&gt;Configuration&lt;/em&gt; values specified when an instance of &lt;em&gt;ExceptionInformation&lt;/em&gt; is initialized, &lt;code&gt;are added&lt;/code&gt; to the values initialized internally in the class.&lt;/p&gt;
&lt;p&gt;The output of the above is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;MachineName: T800
OsVersion: Microsoft Windows NT 10.0.22000.0
ExceptionString: System.DivideByZeroException: Attempted to divide by zero.
   at Program.&amp;lt;Main&amp;gt;$(String[] args) in 
    C:\Development\Projects\InitializerExpansion\Program.cs:line 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One &lt;code&gt;advantage&lt;/code&gt; of the initializer expansion method, is that all data is now contained in a single place (the dictionary) and more values can be added dynamically.&lt;br /&gt;
However, on the &lt;code&gt;negative side&lt;/code&gt;, its not apparently obvious to the developer using the &lt;em&gt;ExceptionInformation&lt;/em&gt; class, that additional items can be added to the dictionary in this manner.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;As mentioned, this has a fairly niche use case - and even though there are other methods to do the achieve the same outcome, I find this method especially appealing. Even if I never have a practical need for it in a real application - I still find it an interesting usage of the language features.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/8BitVentilator/status/1524685108606914564"&gt;8 Bit Ventilator tweet&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;114: 11-07-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/07/08-lowing-for-loop</id>
		<title>For loop lowering in C#</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/07/08-lowing-for-loop" />
		<updated>2022-07-08T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;In C#, a &lt;code&gt;for loop&lt;/code&gt; is &lt;em&gt;lowered&lt;/em&gt; to a &lt;code&gt;while loop&lt;/code&gt; by the compiler.&lt;/p&gt;
&lt;p&gt;At a lower level, the &lt;code&gt;for&lt;/code&gt; loop &lt;em&gt;does not exist&lt;/em&gt; - it gets translated into a &lt;code&gt;while&lt;/code&gt; loop by the C# compiler, and then is executed as such.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="lowering"&gt;Lowering&lt;/h2&gt;
&lt;p&gt;Done by the C# compiler, &lt;code&gt;lowering&lt;/code&gt; is the process of rewriting high-level language features, into low-level language features in the &lt;em&gt;same language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There are a number of C# features, which are just &lt;em&gt;syntactic sugar&lt;/em&gt; over (often) more complex lower-level features - the compiler will take the high-level feature and &lt;em&gt;lower&lt;/em&gt; it to the lower-level feature.&lt;/p&gt;
&lt;p&gt;Lowering is done for a number of reasons, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Working with high-level features, are easier and simpler to work with&lt;/li&gt;
&lt;li&gt;Optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post is specifically about the &lt;code&gt;for&lt;/code&gt; loop, not an especially complex feature - however it is more complex than the &lt;code&gt;while&lt;/code&gt; loop, its lower-level equivalent.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="for-loop"&gt;For loop&lt;/h2&gt;
&lt;p&gt;Using &lt;a href="https://sharplab.io/"&gt;sharplab.io&lt;/a&gt;, one is able to see the lowered code the compiler generates.&lt;/p&gt;
&lt;p&gt;Here is an example of some code written in Visual Studio:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForLoopExample() 
{
    for(int i = 0; i &amp;lt; 100; i++)
    {
        Console.WriteLine(i);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the lowered code the compiler generates:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForLoopExample()
{
    int num = 0;
    while (num &amp;lt; 100)
    {
        Console.WriteLine(num);
        num++;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see - the &lt;code&gt;for&lt;/code&gt; loop is converted to a &lt;code&gt;while&lt;/code&gt; loop!&lt;/p&gt;
&lt;p&gt;Another example, in a previous post we learnt how the &lt;em&gt;iterator section&lt;/em&gt; of a for loop could &lt;a href="https://alwaysdeveloping.net/06/30-for-multi-operations"&gt;contain multiple statements&lt;/a&gt;. Looking at the lowered code for that example, the &lt;code&gt;while&lt;/code&gt; loop is controlled only by the &lt;em&gt;condition section&lt;/em&gt; of the &lt;code&gt;for&lt;/code&gt; loop - this is why this portion of the for loop can only contain one statement, while the other sections can contain multiple.&lt;/p&gt;
&lt;p&gt;Original C# code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForLoopExample2() 
{
    int countDown = 100;
    for(int i = 0; i &amp;lt; 100; i++, countDown--)
    {
        Console.WriteLine(i);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the lowered code the compiler generates:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForLoopExample2()
{
    int num = 100;
    int num2 = 0;
    while (num2 &amp;lt; 100)
    {
        Console.WriteLine(num2);
        num2++;
        num--;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id="foreach"&gt;Foreach&lt;/h2&gt;
&lt;p&gt;Just for reference, the &lt;code&gt;foreach&lt;/code&gt; does not operate the same way as the &lt;code&gt;for&lt;/code&gt; loop - even though both iterate through a list of items, they do it very differently.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Foreach&lt;/code&gt; works using the &lt;em&gt;&lt;a href="https://alwaysdeveloping.net/03/03-getenumerator"&gt;GetEnumerator&lt;/a&gt;&lt;/em&gt; method on a class, and is not lowered to a &lt;code&gt;while&lt;/code&gt; loop:&lt;/p&gt;
&lt;p&gt;Original C# code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForEachLoopExample() 
{
    var list = new List&amp;lt;int&amp;gt; { 1, 2, 3, 4, 5, };

    foreach (var item in list)
    {
        Console.WriteLine(item);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the lowered code the compiler generates:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForEachLoopExample()
{
    List&amp;lt;int&amp;gt; list = new List&amp;lt;int&amp;gt;();
    list.Add(1);
    list.Add(2);
    list.Add(3);
    list.Add(4);
    list.Add(5);
    List&amp;lt;int&amp;gt; list2 = list;
    List&amp;lt;int&amp;gt;.Enumerator enumerator = list2.GetEnumerator();
    try
    {
        while (enumerator.MoveNext())
        {
            int current = enumerator.Current;
            Console.WriteLine(current);
        }
    }
    finally
    {
        ((IDisposable)enumerator).Dispose();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While the developer written code for a &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;foreach&lt;/code&gt; loop are fairly similar - the lowered code for the &lt;code&gt;foreach&lt;/code&gt; is a bit more complex than a simple &lt;code&gt;while&lt;/code&gt; loop.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;While this may not be something one has to worry or think about when coding - its always good to have a general knowledge of how the compiler works, and what its doing (even at a high level), and how the code written impacts the lowered code which gets executed.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://sharplab.io/"&gt;sharplab.io&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;!--?# DailyDrop ?--&gt;113: 08-07-2022&lt;!--?#/ DailyDrop ?--&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/07/07-implicit-type-conversion</id>
		<title>Type conversion with the implicit operator</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/07/07-implicit-type-conversion" />
		<updated>2022-07-07T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;implicit operator&lt;/code&gt; keywords can be used to define a method to perform an implicit conversion from one type to another.&lt;/p&gt;
&lt;p&gt;Effectively this is a mapper function, which is implicitly invoked without any special syntax - making its usage automatic and more natural.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;p&gt;In this simple example, we have two types, &lt;em&gt;SourceType&lt;/em&gt; and &lt;em&gt;DestinationType&lt;/em&gt; - &lt;em&gt;SourceType&lt;/em&gt; contains an &lt;strong&gt;int&lt;/strong&gt; field, while &lt;em&gt;DestinationType&lt;/em&gt; contains a &lt;strong&gt;string&lt;/strong&gt; field. We require the ability to convert an instance of &lt;em&gt;SourceType&lt;/em&gt; to an instance of &lt;em&gt;DestinationType&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class SourceType
{
    public int Value { get; set; }
}

public class DestinationType
{
    public string Name { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="mapper"&gt;Mapper&lt;/h2&gt;
&lt;p&gt;A conversion between the two types can be performed with a &lt;em&gt;mapper&lt;/em&gt; method. There are a number of places this method could be defined, including (but not limited to):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a method inside source type&lt;/li&gt;
&lt;li&gt;the constructor of the destination type&lt;/li&gt;
&lt;li&gt;a method outside of the source or destination types&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class SourceType
{
    // 1. Method inside SourceType to return
    // an instance of DestinationType
    DestinationType ToDestinationType()
    {
        return new DestinationType
        {
            Name = this.Value.ToString()
        };
    }

    public int Value { get; set; }
}

public class DestinationType
{
    public DestinationType() { }

    // 2. Constructor which takes a parameter of SourceType
    public DestinationType(SourceType sourceType)
    {
        this.Name = sourceType.Value.ToString();
    }

    public string Name { get; set; }
}

// 3. External method to do the mapping between SourceType 
// and DestinationType
DestinationType SourceToDestinationMapper(SourceType sourceType)
{
    return new DestinationType
    {
        Name = sourceType.Value.ToString()
    };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any of the above will work, however they are required to be invoked explicitly for the conversion to take place.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="implicit"&gt;Implicit&lt;/h2&gt;
&lt;p&gt;Instead of one of the mapper methods described above, another technique is to use the &lt;code&gt;implicit operator&lt;/code&gt; keywords. Effectively this is a mapper method - but is implicitly invoked under certain conditions, instead of having to explicitly be invoked as with a mapper method.&lt;/p&gt;
&lt;p&gt;The operator is added to the &lt;em&gt;SourceType&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class SourceType
{
    public int Value { get; set; }

    public static implicit operator DestinationType(SourceType t) =&amp;gt; 
        new DestinationType { Name = t.Value.ToString() };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the operator has the same logic as the mapper methods above - a &lt;em&gt;SourceType&lt;/em&gt; is accepted as a parameter, and a &lt;em&gt;DestinationType&lt;/em&gt; is returned.&lt;/p&gt;
&lt;p&gt;Next'll we'll look at how the operator is implicitly invoked.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;p&gt;There are a number of scenarios in which the implicit operator is automatically invoked.&lt;/p&gt;
&lt;p&gt;Assigning a &lt;em&gt;SourceType&lt;/em&gt; to a &lt;em&gt;DestinationType&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var source = new SourceType { Value = 100 };

// implicit operator code is called for this line
DestinationType destination = source;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A &lt;em&gt;cast&lt;/em&gt; from one type to the other:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var source = new SourceType { Value = 100 };

// implicit operator code is called for this line
// x is of type DestinationType
var x = (DestinationType)source;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When calling a method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var source = new SourceType { Value = 100 };

// pass SourceType to the method
DoProcessing(source);

// method accepts DestinationType
// implicit operator code is called for this line
public void DoProcessing(DestinationType dest)
{
    Console.WriteLine($&amp;quot;Doing processing on '{dest.Name}'&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, no mapper functions are required to be called - the conversion &lt;em&gt;implicitly&lt;/em&gt; occurs, resulting in cleaner code.&lt;/p&gt;
&lt;h2 id="limitations"&gt;Limitations&lt;/h2&gt;
&lt;p&gt;One limitation of this &lt;code&gt;implicit operator&lt;/code&gt; keywords, is that is not considered by the &lt;code&gt;is&lt;/code&gt; or &lt;code&gt;as&lt;/code&gt; operators. A &lt;em&gt;cast&lt;/em&gt; should be invoked to the explicit conversion.&lt;/p&gt;
&lt;p&gt;The following will &lt;strong&gt;NOT&lt;/strong&gt; compile:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// NOT ALLOWED
var destination = source as DestinationType;
Console.WriteLine(destination.Name);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Personally, I find this simplifies the usage and readability of the code and is something I will try to implement more where it makes sense.&lt;br /&gt;
One potentially drawback of the &lt;code&gt;implicit operator&lt;/code&gt;, depending on the specific code architecture, is that &lt;em&gt;SourceType&lt;/em&gt; now requires a reference to &lt;em&gt;DestinationType&lt;/em&gt; which may not make sense or be practical (if &lt;em&gt;SourceType&lt;/em&gt; is from a 3rd party for example).&lt;/p&gt;
&lt;p&gt;As always, consider your own use case, and which method will work best for that use case.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/user-defined-conversion-operators"&gt;User-defined conversion operators (C# reference)&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;112: 07-07-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/07/06-sql-2022-enhancements</id>
		<title>T-SQL enhancements in SQL Server 2022</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/07/06-sql-2022-enhancements" />
		<updated>2022-07-06T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;There are a number of very useful T-SQL enhancements coming with SQL Server 2022 (currently in preview). Some of these include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;STRING_SPLIT&lt;/code&gt; - splits a string into rows of substrings, based on a specified separator character, now with &lt;strong&gt;ordinal support&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GREATEST/LEAST&lt;/code&gt; - Similar to &lt;em&gt;MAX/MIN&lt;/em&gt;, but operates across columns instead of across rows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GENERATE_SERIES&lt;/code&gt; - Produces a set-based sequence of numeric values&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSON functions&lt;/code&gt; - Including functions to test whether a string is valid JSON, construct a JSON object and construct a JSON array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DATE_BUCKET&lt;/code&gt; - Returns the date-time value corresponding to the start of each date-time bucket from the timestamp defined&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below we'll explore some of the enhancements I will find most useful (based on my previous experiences and requirements), while additional details on the other enhancements can be found in the references below.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="string_split"&gt;STRING_SPLIT&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;SPLIT_STRING&lt;/code&gt; function, first introduced with SQL Server 2016, allows for the splitting a string into rows of substrings - especially useful for developers making extensive use of stored procedures (for example, with SQL Server Reporting Services)&lt;/p&gt;
&lt;p&gt;For example, executing the following SQL:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * from STRING_SPLIT('one,two,three,four,five', ',')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Results in the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;value
-----------------------
one
two
three
four
five
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;Coming in SQL Server 2022, is the ability to &lt;em&gt;determine the nth item of the list&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For example, executing the following SQL:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * from STRING_SPLIT('one,two,three,four,five', ',' , 1) WHERE ordinal = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Results in the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;value                   ordinal
----------------------- --------------------
three                   3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An additional parameter, &lt;em&gt;enable_ordinal&lt;/em&gt; is available which will return an &lt;em&gt;ordinal&lt;/em&gt; column - which can then be used as part of a WHERE clause.&lt;/p&gt;
&lt;p&gt;One limitation of the &lt;code&gt;SPLIT_STRING&lt;/code&gt; remains, and that is that the delimiter can only be a single character, and not a string.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="greatestleast"&gt;GREATEST/LEAST&lt;/h2&gt;
&lt;p&gt;The new &lt;code&gt;GREATEST and LEAST&lt;/code&gt; functions, are similar to the existing  &lt;em&gt;MAX and MIN&lt;/em&gt; functions, but operates across columns instead of across rows.&lt;/p&gt;
&lt;p&gt;Consider the following &lt;em&gt;VisitorsPerMonth&lt;/em&gt; table which stores the number of unique visitors to a website, per month, per year.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * FROM VisitorsPerMonth

Year        Jan         Feb         March
----------- ----------- ----------- -----------
2020        435         643         763
2021        893         1121        1327
2022        1923        2107        2782

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use &lt;em&gt;Max&lt;/em&gt; to determine &lt;em&gt;maximum number of visitors in any January&lt;/em&gt; (a max across rows):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT MAX(Jan)
FROM VisitorsPerMonth
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, what if we wanted the &lt;em&gt;max number of visitors in any particular month in a year&lt;/em&gt; - this requires an operation across columns, which is where the &lt;code&gt;GREATEST&lt;/code&gt; function comes into play.&lt;/p&gt;
&lt;p&gt;A number of &lt;em&gt;columns&lt;/em&gt; are supplied to the function, and the greatest value will be returned:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT Year, GREATEST(Jan, Feb, March) as HighestVisitors
FROM VisitorsPerMonth
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This results in the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;Year        HighestVisitors
----------- ---------------
2020        763
2021        1327
2022        2782
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now know how many visitors the site had in its most popular month in each year.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="generate_series"&gt;GENERATE_SERIES&lt;/h2&gt;
&lt;p&gt;This new function produces a set-based sequence of numeric values based on specified &lt;em&gt;START&lt;/em&gt;, &lt;em&gt;STOP&lt;/em&gt; and &lt;em&gt;STEP&lt;/em&gt; values.&lt;/p&gt;
&lt;p&gt;The usage is fairly straightforward:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT value FROM GENERATE_SERIES(START = 1, STOP = 3);
SELECT value FROM GENERATE_SERIES(START = 0, STOP = 25, STEP = 5);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which results in the output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;value
-----------
1
2
3

value
-----------
0
5
10
15
20
25
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If no &lt;em&gt;STEP&lt;/em&gt; value is specified, a value of &lt;strong&gt;1&lt;/strong&gt; is used.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;As a C# developer, in recent years, my focus has been more on using Entity Framework Core and less on raw SQL usage - however, knowledge of these enhancement will come in useful when the need arises to do raw SQL (a custom query through EF, or Dapper, or a report stored procedure, for example).&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.mssqltips.com/sqlservertip/7265/sql-server-2022-t-sql-enhancements/"&gt;My Favorite T-SQL Enhancements in SQL Server 2022&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/date-bucket-transact-sql?view=sql-server-ver16"&gt;DATE_BUCKET (Transact-SQL)&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/json-object-transact-sql?view=sql-server-ver16"&gt;JSON_OBJECT (Transact-SQL)&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;111: 06-07-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/07/05-getdebugview</id>
		<title>View config values with GetDebugView</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/07/05-getdebugview" />
		<updated>2022-07-05T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;All configuration values for an aapplication, as well &lt;code&gt;as their source&lt;/code&gt;, can be viewed with the &lt;code&gt;GetDebugView&lt;/code&gt; method on &lt;em&gt;IConfigurationRoot&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;While this core functionality has been available since .NET Core 3, enhancements are also coming with .NET7 (currently in preview) to allow for confidential values to be masked.&lt;/p&gt;
&lt;p&gt;All of this in more detail below.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="getdebugview-current"&gt;GetDebugView: Current&lt;/h2&gt;
&lt;p&gt;To retrieve the configuration information is fairly straightforward - all one needs is the &lt;em&gt;IConfiguration&lt;/em&gt; implementation.&lt;/p&gt;
&lt;p&gt;The below uses top-level statements and minimal API to expose a &lt;em&gt;config&lt;/em&gt; endpoint:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// inject IConfiguration from dependency injection container
app.MapGet(&amp;quot;/config&amp;quot;, (IConfiguration config) =&amp;gt;
{
    // convert to IConfigurationRoot
    var root = config as IConfigurationRoot;

    return root.GetDebugView();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With a &lt;em&gt;appsettings.json&lt;/em&gt; file which contains the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;Logging&amp;quot;: {
    &amp;quot;LogLevel&amp;quot;: {
      &amp;quot;Default&amp;quot;: &amp;quot;Information&amp;quot;,
      &amp;quot;Microsoft.AspNetCore&amp;quot;: &amp;quot;Warning&amp;quot;
    }
  },
  &amp;quot;AllowedHosts&amp;quot;: &amp;quot;*&amp;quot;,
  &amp;quot;ServiceCredentials&amp;quot;: {
    &amp;quot;username&amp;quot;: &amp;quot;admin123&amp;quot;,
    &amp;quot;password&amp;quot; : &amp;quot;admin456&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Browsing to the endpoint will return the following &lt;em&gt;relevent configuration values&lt;/em&gt; (along with numerous other system environment variables):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;AllowedHosts=* (JsonConfigurationProvider for 'appsettings.json' (Optional))
ASPNETCORE_ENVIRONMENT=Development (EnvironmentVariablesConfigurationProvider Prefix: '')
Logging:
  LogLevel:
    Default=Information (JsonConfigurationProvider for 'appsettings.Development.json' (Optional))
    Microsoft.AspNetCore=Warning (JsonConfigurationProvider for 'appsettings.Development.json' (Optional))
ServiceCredentials:
  password=admin456 (JsonConfigurationProvider for 'appsettings.json' (Optional))
  username=admin123 (JsonConfigurationProvider for 'appsettings.json' (Optional))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The configuration from the &lt;em&gt;appsettings.json&lt;/em&gt; config file are displayed, with the corresponding provider source (&lt;em&gt;JsonConfigurationProvider&lt;/em&gt;) as well as a configuration value sourced from the environment variable provider (&lt;em&gt;EnvironmentVariablesConfigurationProvider&lt;/em&gt;).&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="secrets-exposed"&gt;Secrets exposed&lt;/h3&gt;
&lt;p&gt;One limitation of the current (.NET Core 3 to .NET 6) implementation, which is demonstrated above - is that configuration values which are secrets (keys, passwords, etc.) are included in the output.&lt;/p&gt;
&lt;p&gt;In my example the password was stored in the &lt;em&gt;appsettings.json&lt;/em&gt;, which ideally shouldn't happen - however even if injected at runtime as an environment variable, the same would occur, and the value would still be exposed (just coming from a different provider source).&lt;/p&gt;
&lt;p&gt;The enhancements in .NET7 aim to improve this.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="getdebugview-preview"&gt;GetDebugView: Preview&lt;/h2&gt;
&lt;p&gt;Bear in mind, that the following is done using a &lt;em&gt;Preview&lt;/em&gt; version of .NET7, and may change by the time it is officially release.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;GetDebugView&lt;/code&gt; now has an overload which accepts a &lt;em&gt;Func&lt;/em&gt; and allows for custom processing and manipulation of the configuration values for display:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// inject IConfiguration from dependency injection container
app.MapGet(&amp;quot;/config&amp;quot;, (IConfiguration config) =&amp;gt;
{
    // convert to IConfigurationRoot
    var root = config as IConfigurationRoot;

    return root.GetDebugView(context =&amp;gt;
    {
        // this Func keys called for each Key in the configuration

        // if the key is one we know contains a password
        if(context.Key == &amp;quot;ServiceCredentials:password&amp;quot;)
        {
            // return a masked value
            return &amp;quot;***&amp;quot;;
        }
        
        // otherwise return the original configuration value
        return context.Value;
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With a &lt;em&gt;appsettings.json&lt;/em&gt; file the same as before&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;Logging&amp;quot;: {
    &amp;quot;LogLevel&amp;quot;: {
      &amp;quot;Default&amp;quot;: &amp;quot;Information&amp;quot;,
      &amp;quot;Microsoft.AspNetCore&amp;quot;: &amp;quot;Warning&amp;quot;
    }
  },
  &amp;quot;AllowedHosts&amp;quot;: &amp;quot;*&amp;quot;,
  &amp;quot;ServiceCredentials&amp;quot;: {
    &amp;quot;username&amp;quot;: &amp;quot;admin123&amp;quot;,
    &amp;quot;password&amp;quot; : &amp;quot;admin456&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Browsing to the endpoint will return the same as before, but with one small adjustment:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;AllowedHosts=* (JsonConfigurationProvider for 'appsettings.json' (Optional))
ASPNETCORE_ENVIRONMENT=Development (EnvironmentVariablesConfigurationProvider Prefix: '')
Logging:
  LogLevel:
    Default=Information (JsonConfigurationProvider for 'appsettings.Development.json' (Optional))
    Microsoft.AspNetCore=Warning (JsonConfigurationProvider for 'appsettings.Development.json' (Optional))
ServiceCredentials:
  password=*** (JsonConfigurationProvider for 'appsettings.json' (Optional))
  username=admin123 (JsonConfigurationProvider for 'appsettings.json' (Optional))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The password returned is now the &lt;code&gt;masked value&lt;/code&gt; specified in the &lt;em&gt;Func&lt;/em&gt;!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Having the ability to expose all configuration values can definitely save time and effort - it eliminates the need to remote into other machines or containers and get a list of environment variables when doing investigations. However the fact that confidential information could be exposed is far from ideal, and depending on how serious security is taken, could render the functionality unusable.&lt;/p&gt;
&lt;p&gt;However the .NET7 enhancements provides a working solution for this, which I look forward to being able to leverage.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://dunnhq.com/posts/2022/viewing-configuration-values/"&gt;Viewing .NET configuration values&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;110: 05-07-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/07/04-ef-find-vs-single</id>
		<title>EF Find vs First performance </title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/07/04-ef-find-vs-single" />
		<updated>2022-07-04T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;When retrieving a single record from the database using Entity Framework, the &lt;code&gt;Single (or SingleOrDefault)&lt;/code&gt; method can be used - however the &lt;code&gt;Find&lt;/code&gt; method on the DbSet is potentially more efficient, however it comes with some limitations.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="first"&gt;First&lt;/h2&gt;
&lt;p&gt;The first method is using &lt;code&gt;First (or FirstOrDefault)&lt;/code&gt; - this is an extension method on &lt;em&gt;Queryable&lt;/em&gt; (an important factor when comparing it to the &lt;em&gt;Find&lt;/em&gt; method)&lt;/p&gt;
&lt;p&gt;As &lt;em&gt;DbSet&lt;/em&gt; implement &lt;em&gt;IQueryable&lt;/em&gt;, this method can be use directly on the &lt;em&gt;DbSet&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Assuming we have a &lt;em&gt;DbContext&lt;/em&gt; with a &amp;quot;Song&amp;quot; &lt;em&gt;DbSet&lt;/em&gt;, a single record can be retrieved as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using var context = new DemoContext();

// using Single
var song = context.Songs.Single(x =&amp;gt; x.Id == 43);

// using SingleOrDefault
var song2 = context.Songs.SingleOrDefault(x =&amp;gt; x.Id == 43);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="find"&gt;Find&lt;/h2&gt;
&lt;p&gt;The next method is using &lt;code&gt;Find&lt;/code&gt; - this is an extension method on &lt;em&gt;DBset&lt;/em&gt; itself.&lt;/p&gt;
&lt;p&gt;Again, assuming we have a &lt;em&gt;DbContext&lt;/em&gt; with a &amp;quot;Song&amp;quot; &lt;em&gt;DbSet&lt;/em&gt;, a record can be retrieved as follows using &lt;em&gt;Find&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using var context = new DemoContext();

var song = context.Songs.Find(43);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="limitation"&gt;Limitation&lt;/h3&gt;
&lt;p&gt;As mentioned above, having &lt;code&gt;Find&lt;/code&gt; as an extension method on &lt;strong&gt;DbSet&lt;/strong&gt; does limit its usage. It cannot be used in conjunction with other &lt;em&gt;IQueryable&lt;/em&gt; extension methods.&lt;/p&gt;
&lt;p&gt;The following examples are &lt;strong&gt;NOT&lt;/strong&gt; valid and will &lt;strong&gt;NOT&lt;/strong&gt; compile:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Find() returns a 'Song' and as such Include()
// cannot be used in this example
var song = context.Songs.Find(43).Include(&amp;quot;Artist&amp;quot;);

// Include() returns a 'IQueryable' and as such Find()
// cannot be used in this example
var song2 = context.Songs.Include(&amp;quot;Artist&amp;quot;).Find(43);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, the following using &lt;code&gt;Single&lt;/code&gt; &lt;strong&gt;is VALID&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Include() returns a 'IQueryable' and as Single is
// an extension method on 'IQueryable' it CAN be used
var song = context.Songs.Include(&amp;quot;Artist&amp;quot;).Single(x =&amp;gt; x.Id == 43);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="benchmark"&gt;Benchmark&lt;/h2&gt;
&lt;p&gt;The different methods where benchmarked, with a:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shared DbContext&lt;/code&gt; - defined in the constructor once, and reused&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Single-use DbContext&lt;/code&gt; - a new DbContext is declared for each database call&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Error&lt;/th&gt;
&lt;th style="text-align: right;"&gt;StdDev&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Median&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Ratio&lt;/th&gt;
&lt;th style="text-align: right;"&gt;RatioSD&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;FindSharedContext&lt;/td&gt;
&lt;td style="text-align: right;"&gt;14.93 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.845 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;8.071 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;12.00 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.14&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.07&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SingleDefaultSharedContext&lt;/td&gt;
&lt;td style="text-align: right;"&gt;123.26 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.294 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.146 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;123.22 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.98&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.05&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SingleSharedContext&lt;/td&gt;
&lt;td style="text-align: right;"&gt;123.78 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.320 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;4.242 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;122.09 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FindOneUseContext&lt;/td&gt;
&lt;td style="text-align: right;"&gt;488.81 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;9.539 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;10.207 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;487.06 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.91&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SingleDefaultOneUseContext&lt;/td&gt;
&lt;td style="text-align: right;"&gt;261.49 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;5.098 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;5.236 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;260.91 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.09&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SingleOneUseContext&lt;/td&gt;
&lt;td style="text-align: right;"&gt;259.93 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;5.166 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;10.317 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;257.45 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.11&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;p&gt;The &lt;em&gt;Find&lt;/em&gt; method is &lt;code&gt;substantially quicker&lt;/code&gt; when reusing the DbContext (as one should).&lt;/p&gt;
&lt;p&gt;However, interestingly, with a single-use DbContext, the &lt;em&gt;Single/SingleOrDefault&lt;/em&gt; method is almost twice as quick as the &lt;em&gt;Find&lt;/em&gt; method.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;While &lt;em&gt;Find&lt;/em&gt; is approximately &lt;code&gt;7 times&lt;/code&gt; faster than the equivalent &lt;em&gt;Single&lt;/em&gt; method, it does come with considerable limitations. If performance is critical, it might be worth finding a way to work around the limitations - however keep in mind that the differences are being measured in microseconds, so the performance gain might not be worth the potential additional effort.&lt;/p&gt;
&lt;p&gt;Be aware of the performance differences, and the limitations - and for each specific use case, apply the more appropriate technique.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/danylaws/status/1524284247049216000"&gt;Daniel Lawson tweet&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;109: 04-07-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/07/01-keyset-pagination</id>
		<title>Keyset Pagination (vs Offset pagination)</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/07/01-keyset-pagination" />
		<updated>2022-07-01T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;In a previous daily drop post, I learn about using &lt;a href="https://alwaysdeveloping.net/03/17-sql-offset-fetch"&gt;OFFSET and FETCH&lt;/a&gt; to perform paging when retrieving data - however this is &lt;code&gt;not always a good method&lt;/code&gt; for retrieving results, especially with a large dataset.&lt;/p&gt;
&lt;p&gt;Instead, the usage of &lt;code&gt;keyset pagination&lt;/code&gt; should be considered, as it is more performant. &lt;code&gt;Keyset pagination&lt;/code&gt; returns a subset of the dataset by using a &lt;code&gt;WHERE&lt;/code&gt; clause instead of the &lt;code&gt;OFFSET&lt;/code&gt; clause as with &lt;em&gt;offset pagination&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There are however some limitations with the &lt;code&gt;keyset&lt;/code&gt; approach, which will be explored below.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="offset"&gt;Offset&lt;/h2&gt;
&lt;h3 id="recap"&gt;Recap&lt;/h3&gt;
&lt;p&gt;First, a brief recap on &lt;code&gt;offset pagination&lt;/code&gt; - this method uses the &lt;code&gt;OFFSET&lt;/code&gt; and &lt;code&gt;FETCH&lt;/code&gt; clauses to effectively skip &lt;em&gt;X&lt;/em&gt; rows, and FETCH the following &lt;em&gt;Y&lt;/em&gt; rows, ordered by the specified column(s):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;DECLARE @PageNumber INT = 5,
        @PageSize INT = 20; 

-- In this example, skip 100 records
-- and return the next 20
SELECT Id 
FROM OffSetDemo
ORDER BY Id ASC
OFFSET @PageNumber * @PageSize ROWS
FETCH NEXT @PageSize ROWS ONLY
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Based on &lt;em&gt;PageNumber&lt;/em&gt; and &lt;em&gt;PageSize&lt;/em&gt;, the appropriate number of rows and skipped, and then &lt;em&gt;PageSize&lt;/em&gt; rows retrieved.&lt;/p&gt;
&lt;p&gt;This approach works, however might not be suitable for all use cases.&lt;/p&gt;
&lt;h3 id="issues"&gt;Issues&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Large datasets&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One issue with the &lt;code&gt;offset pagination&lt;/code&gt; approach, is that when the &lt;code&gt;OFFSET&lt;/code&gt; clauses is used, the database is still required to go through all rows to find the correct starting record.&lt;/p&gt;
&lt;p&gt;For example, if we have a database with 1 000 000 rows.&lt;/p&gt;
&lt;p&gt;When the following is executed, the database still needs to go through the first 100 rows (the OFFSET value) to find the 101st row.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT Id 
FROM OffSetDemo
ORDER BY Id ASC
OFFSET 100 ROWS
FETCH NEXT 50 ROWS ONLY
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will probably not have a negative impact on performance, however if the following is executed:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT Id 
FROM OffSetDemo
ORDER BY Id ASC
OFFSET 900 000 ROWS
FETCH NEXT 50 ROWS ONLY
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the database needs to go through 900 000 rows (the OFFSET value) to find the 900 001st row, which could definitely have a performance impact.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Missing/duplicate records&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If the dataset being used is changing while being queried, the &lt;code&gt;offset&lt;/code&gt; method could result in records either being missed, or records being duplicated as paging occurs.&lt;/p&gt;
&lt;p&gt;With a page size of 20, when the first page is queried, the first 20 records are returned. When the second page is being queried for, the first 20 rows are skipped (with &lt;code&gt;OFFSET&lt;/code&gt;) and the next 20 rows are returned. Consider however, if between loading the first and second page, a record in the first 20 is deleted. The record which was number 21 when the first page loaded, is record 20 when the second page is loaded - this is missed when loading page 1 and page 2.&lt;/p&gt;
&lt;p&gt;The same applied if a record is added which falls into the first 20 - the record which previously was number 20, would become record number 21, and thus would appear on page 1 and page 2.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Keyset pagination&lt;/code&gt; solves aims to solve these problems (while introducing a different set of limitations).&lt;/p&gt;
&lt;h2 id="keyset"&gt;Keyset&lt;/h2&gt;
&lt;p&gt;With &lt;code&gt;keyset&lt;/code&gt; pagination, instead of using the &lt;code&gt;OFFSET&lt;/code&gt; clause to skip rows to determine where the returned dataset should start, a &lt;code&gt;WHERE&lt;/code&gt; clause is used to determine where the returned dataset should start.&lt;/p&gt;
&lt;p&gt;A few examples will make it clearer - again consider a database with 1 000 000 rows, with an int &lt;em&gt;Id&lt;/em&gt; primary key column on which the data is sorted.&lt;/p&gt;
&lt;p&gt;To retrieve the first page:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;-- OFFSET pagination
SELECT Id 
FROM OffSetDemo
ORDER BY Id ASC
OFFSET 0 ROWS
FETCH NEXT 50 ROWS ONLY

-- KEYSET pagination
SELECT TOP 50 Id 
FROM OffSetDemo
WHERE Id &amp;gt; 0
ORDER BY Id ASC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To retrieve the 10th page (for example):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;-- OFFSET pagination
SELECT Id 
FROM OffSetDemo
ORDER BY Id ASC
OFFSET 500 ROWS -- 50 x 10
FETCH NEXT 50 ROWS ONLY

-- KEYSET pagination
SELECT TOP 50 Id 
FROM OffSetDemo
WHERE Id &amp;gt; 500
ORDER BY Id ASC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In terms of performance, the keyset version is a lot more performant - assuming there are indexes created on the &lt;code&gt;WHERE&lt;/code&gt; clause columns. Using the WHERE clause and the index, SQL does not need to go through &lt;em&gt;X&lt;/em&gt; number rows to find the correct starting point&lt;/p&gt;
&lt;p&gt;This also solves the problem of records being duplicated or being missed as absolute values are being used to do the lookup and not offsets. If a record in the first 20 is deleted, it will not effect the second page of 20 records, and the same applied if a new record is added to the first 20 - the second page of 20 records is unaffected.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Keyset pagination&lt;/code&gt; is not without its own limitations though.&lt;/p&gt;
&lt;h3 id="limitations"&gt;Limitations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;No random access&lt;/code&gt; - with &lt;em&gt;keyset pagination&lt;/em&gt; one is unable to get, for example, the 15th page. To get a page of data, the last &lt;em&gt;Id&lt;/em&gt; (in the above example) of the previous page is required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Complicated multi-column filtering&lt;/code&gt; - with the above examples, the &lt;code&gt;WHERE&lt;/code&gt; clause is straightforward, but this can get complicated. Consider if the data is going to be sorted by a &lt;em&gt;CreatedDate&lt;/em&gt; column, and if two record have the same &lt;em&gt;CreatedDate&lt;/em&gt;, then they should be sorted by &lt;em&gt;Id&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT TOP 50 DateCreated, Id 
FROM OffSetDemo
WHERE ((DateCreated &amp;gt; '2022/06/12') OR (DateCreated = '2022/06/12' AND Id &amp;gt; 500))
ORDER BY DateCreated, Id ASC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depending on how many filter conditions there are, the &lt;code&gt;WHERE&lt;/code&gt; clause could become complex.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;The choice between the two methods (and any other), as always, comes down to the specific use case.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Need random access to any page? Use offset&lt;/li&gt;
&lt;li&gt;Large dataset, and no random access required? Use keyset&lt;/li&gt;
&lt;li&gt;Large dataset, but do require random access? Why not both? - offset for the random access, and keyset for the &lt;em&gt;next/previous&lt;/em&gt; functionality&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=DIKH-q-gJNU"&gt;.NET Data Community Standup - Database Pagination&lt;/a&gt;&lt;/p&gt;
&lt;!--?# DailyDrop ?--&gt;108: 01-07-2022&lt;!--?#/ DailyDrop ?--&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/30-for-multi-operations</id>
		<title>Multiple statements in a for loop</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/30-for-multi-operations" />
		<updated>2022-06-30T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;Not only can the &lt;em&gt;iterator section&lt;/em&gt; (the last section) in a &lt;code&gt;for loop&lt;/code&gt; contain &lt;code&gt;multiple operations&lt;/code&gt;, but it can also contain &lt;code&gt;statements&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="iterator-section"&gt;Iterator section&lt;/h2&gt;
&lt;p&gt;Generally, when defining and using a &lt;code&gt;for loop&lt;/code&gt;, the &lt;em&gt;iterator section&lt;/em&gt; only increases (or decreased) the initializer variable, &lt;code&gt;loopCount&lt;/code&gt; in the below example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;for (var loopCount = 0; loopCount &amp;lt; 100; loopCount++) 
{ 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;em&gt;iterator section&lt;/em&gt; &lt;code&gt;can actually contain statements, separated by a comma!&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="operations"&gt;Operations&lt;/h3&gt;
&lt;p&gt;In this simple example, each loop handles its iterations with the &lt;code&gt;i&lt;/code&gt; variable, but also decreases a shared &lt;code&gt;progress&lt;/code&gt; variable representing overall progress:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var valueArray = new int[] { 100, 25, 70 };
var progress = valueArray.Sum();

for (int i = 0; i &amp;lt; valueArray[0]; i++, progress--)
{
    // Simulate some processing
    Thread.Sleep(10);
    
    Console.Clear();
    Console.WriteLine($&amp;quot;{progress} items remaining to be processed&amp;quot;);
}

for (int i = 0; i &amp;lt; valueArray[1]; i++, progress--)
{
    // Simulate some processing
    Thread.Sleep(10);
    
    Console.Clear();
    Console.WriteLine($&amp;quot;{progress} items remaining to be processed&amp;quot;);
}

for (int i = 0; i &amp;lt;= valueArray[2]; i++, progress--)
{
    // Simulate some processing
    Thread.Sleep(10);
    
    Console.Clear();
    Console.WriteLine($&amp;quot;{progress} items remaining to be processed&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="statements"&gt;Statements&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;iterator section&lt;/em&gt; can doesn't only have to contain operations, but can also contain statements.&lt;/p&gt;
&lt;p&gt;For example purposes, consider logging is to be performed for each record being processed - you might do it as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;for (int i = 1; i &amp;lt;= recordsToProcess.Count(); i++)
{
    // log some information about the record
    Console.WriteLine($&amp;quot;Current value of process record: {recordsToProcess[i]}&amp;quot;);

    // Simulate some processing
    Thread.Sleep(10);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The keep the code contained within the for loop block clear, one could move the log statement into the &lt;code&gt;for loop iterator section&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// logging moved to into the for loop statement
for (int i = 1; i &amp;lt;= recordsToProcess.Count(); 
    Console.WriteLine($&amp;quot;Current value of process record: {recordsToProcess[i]}&amp;quot;), i++)
{
    // actual code block is cleaner

    // Simulate some processing
    Thread.Sleep(10);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="methods"&gt;Methods&lt;/h3&gt;
&lt;p&gt;Expanding on the previous example, methods can also be invoked in the &lt;em&gt;iterator section&lt;/em&gt; - the logging can be moved to its own method to keep the code slightly cleaner:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;for (int i = 0; i &amp;lt;= recordsToProcess.Count(); LogRecord(recordsToProcess[i]), i++)
{
    // Simulate some processing
    Thread.Sleep(10);
}

// ---------------------

void LogRecord(int recordValue)
{
    Console.WriteLine($&amp;quot;Current value of process record: {recordValue}&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;This bit of knowledge does have limited practical application, and one could argue that it makes the code &lt;em&gt;harder&lt;/em&gt; to read - however it does have it's place, and I think could be especially useful in the first example to keep track of multiple &amp;quot;progress-type&amp;quot; counters.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/buhakmeh/status/1526275436140961805"&gt;Khalid Abuhakmeh Tweet&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;107: 30-06-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/29-css-all</id>
		<title>CSS property: all</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/29-css-all" />
		<updated>2022-06-29T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The CSS &lt;code&gt;all&lt;/code&gt; property can be used to reset all properties on an element to their initial values.&lt;/p&gt;
&lt;p&gt;Not directly related to .NET/C#, but still relevent to any .NET developer doing any kind of web development.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="valid-values"&gt;Valid values&lt;/h2&gt;
&lt;p&gt;Before we see the &lt;code&gt;all&lt;/code&gt; property in action, le't have a look at all its possible values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;initial&lt;/em&gt;&lt;/strong&gt;: Specifies that all the element's properties should be changed to their initial values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;inherit&lt;/em&gt;&lt;/strong&gt;: Specifies that all the element's properties should be changed to their inherited values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;unset&lt;/em&gt;&lt;/strong&gt;: Specifies that all the element's properties should be changed to their inherited values if they inherit by default, or to their initial values if not.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;revert&lt;/em&gt;&lt;/strong&gt;: Resulting values depend on the stylesheet origin where this property is located.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;revert-layer&lt;/em&gt;&lt;/strong&gt;: Specifies that all the element's properties should roll back the cascade to a previous cascade layer, if one exists.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="example"&gt;Example&lt;/h2&gt;
&lt;h3 id="base"&gt;Base&lt;/h3&gt;
&lt;p&gt;The below examples will use this HTML and CSS snippet:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;style&amp;gt;
        article {
            color: red;
            text-decoration: underline;
            font-size: 24pt;
        }

        h1 {
            color: green;
            font-size: 14pt;
            line-height: 2em;
            background-color: aqua;
        }

        .title {}
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;article&amp;gt;
    &amp;lt;h1 class="title"&amp;gt;AlwaysDeveloping.net&amp;lt;/p&amp;gt;
    &amp;lt;h1&amp;gt;always learning | always growing&amp;lt;/p&amp;gt;
&amp;lt;/article&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above results in this well designed, elegant HTML page:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/base.png" alt="Base page"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="the-issue"&gt;The issue&lt;/h3&gt;
&lt;p&gt;The "issue" with this setup that, as &lt;code&gt;h1&lt;/code&gt; element with the &lt;code&gt;title&lt;/code&gt; class automatically inherits all the properties from &lt;code&gt;h1&lt;/code&gt;, so to generally stop this inheritence, I've been manually overwriting each inherited property.&lt;/p&gt;
&lt;p&gt;For example, if we &lt;em&gt;just&lt;/em&gt; want the &lt;code&gt;title&lt;/code&gt; class element to have a yellow background, but none of the other properties inherited from &lt;code&gt;h1&lt;/code&gt;, then the following is required:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;style&amp;gt;
    article {
        color: red;
        text-decoration: underline;
        font-size: 24pt;
    }

    h1 {
        color: green;
        font-size: 14pt;
        line-height: 2em;
        background-color: aqua;
    }

    .title {
        color: red;
        font-size: 24pt;
        background-color: yellow;
    }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each property that is inherited from &lt;code&gt;h1&lt;/code&gt; needs to be set back to the &lt;code&gt;article&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;This results in the HTML looking as we want it, as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/issue.png" alt="Overwritten properties"&gt;&lt;/p&gt;
&lt;p&gt;However, the &lt;code&gt;all&lt;/code&gt; property can simplify this for us! Next we'll have a look at how this property effects the HTML output.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="initial"&gt;initial&lt;/h3&gt;
&lt;p&gt;First up, the &lt;code&gt;all&lt;/code&gt; property with a value of &lt;code&gt;initial&lt;/code&gt; - this sets the properties back to their &lt;em&gt;initial values&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;style&amp;gt;
    article {
        color: red;
        text-decoration: underline;
        font-size: 24pt;
    }

    h1 {
        color: green;
        font-size: 14pt;
        line-height: 2em;
        background-color: aqua;
    }

    .title {
        all: initial;
        background-color: yellow;
    }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we set &lt;code&gt;all: initial&lt;/code&gt; and then set the background color to yellow. The result is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/initial.png" alt="all: initial"&gt;&lt;/p&gt;
&lt;p&gt;The properties of &lt;code&gt;article&lt;/code&gt; are not (all) respected - the element reverts back to its &lt;em&gt;initial values&lt;/em&gt; and then subsequent defined properties (background of yellow) are applied.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="inherit"&gt;inherit&lt;/h3&gt;
&lt;p&gt;Next up, the &lt;code&gt;all&lt;/code&gt; property with a value of &lt;code&gt;inherit&lt;/code&gt; - this sets the properties back to their &lt;em&gt;inherited values&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;style&amp;gt;
    article {
        color: red;
        text-decoration: underline;
        font-size: 24pt;
    }

    h1 {
        color: green;
        font-size: 14pt;
        line-height: 2em;
        background-color: aqua;
    }

    .title {
        all: inherit;
        background-color: yellow;
    }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with the previous example, here we set &lt;code&gt;all: inherit&lt;/code&gt; and then set the background color to yellow. The result is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/inherit.png" alt="all: inherit"&gt;&lt;/p&gt;
&lt;p&gt;The properties of &lt;code&gt;title&lt;/code&gt; revert back to the inherited values from &lt;code&gt;article&lt;/code&gt; - this is the same outcome as when each property was manually overwritten, just with less manual work!&lt;/p&gt;
&lt;p&gt;For completeness we'll have a quick look at the other &lt;code&gt;all&lt;/code&gt; property values as well.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="unset"&gt;unset&lt;/h3&gt;
&lt;p&gt;Next up, the &lt;code&gt;all&lt;/code&gt; property with a value of &lt;code&gt;unset&lt;/code&gt; - this sets the properties back to either their respective value, either &lt;em&gt;initial or inherited&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;style&amp;gt;
    article {
        color: red;
        text-decoration: underline;
        font-size: 24pt;
    }

    h1 {
        color: green;
        font-size: 14pt;
        line-height: 2em;
        background-color: aqua;
    }

    .title {
        all: unset;
        background-color: yellow;
    }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At first glance it might seem like the output is the same as &lt;code&gt;all: inherit&lt;/code&gt;, but the padding and width of the elements have been reset (or unset) in this instance.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/unset.png" alt="all: inherit"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="revert-and-revert-layer"&gt;revert and revert-layer&lt;/h3&gt;
&lt;p&gt;Lastly is the &lt;code&gt;all&lt;/code&gt; property with a value of &lt;code&gt;revert&lt;/code&gt; or &lt;code&gt;revert-layer&lt;/code&gt;. These have been grouped together for this example as they produce the exact same result.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;style&amp;gt;
    article {
        color: red;
        text-decoration: underline;
        font-size: 24pt;
    }

    h1 {
        color: green;
        font-size: 14pt;
        line-height: 2em;
        background-color: aqua;
    }

    .title {
        all: revert;
        background-color: yellow;
    }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/revert.png" alt="all: revert"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Having recently moved this blog to &lt;a href="https://alwaysdeveloping.net/www.statiq.dev"&gt;Statiq&lt;/a&gt;, which included customizing the theme - I wish I had learnt about this property sooner.&lt;/p&gt;
&lt;p&gt;I don't often do website styling, but if (when) I do in future, I'll be sure to keep this property in mind.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/2022/05/lesser-known-underused-css-features-2022/#all-property"&gt;all Property&lt;/a&gt;&lt;/p&gt;
&lt;!--?# DailyDrop ?--&gt;106: 29-06-2022&lt;!--?#/ DailyDrop ?--&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/28-dictionary-tuple</id>
		<title>Destructing a Dictionary record into a Tuple</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/28-dictionary-tuple" />
		<updated>2022-06-28T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;Dictionary&lt;/code&gt; record can be destructed into a &lt;code&gt;Tuple&lt;/code&gt; - specifically the &lt;code&gt;KeyValuePair&lt;/code&gt; type representing a dictionary record can be destructed into a &lt;code&gt;Tuple&lt;/code&gt;. In addition, as the &lt;code&gt;Dictionary&lt;/code&gt; type contains a &lt;em&gt;GetEnumerator&lt;/em&gt; method, &lt;a href="https://alwaysdeveloping.net/03/03-getenumerator"&gt;it can be iterated over&lt;/a&gt; into a &lt;code&gt;Tuple&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;p&gt;In all of the below examples, &lt;em&gt;numberDictionary&lt;/em&gt; is of type &lt;code&gt;Dictionary&amp;lt;string, int&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="key-iteration"&gt;Key iteration&lt;/h3&gt;
&lt;p&gt;One way to iterate through all entries in a &lt;code&gt;Dictionary&lt;/code&gt; is to loop through each &lt;code&gt;Key&lt;/code&gt; and then use the &lt;em&gt;Key&lt;/em&gt; to retrieve the entry &lt;code&gt;Value&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void IterateKeyValue()
{
    var sum = 0;

    // iterate of each key in the dictionary
    foreach (var key in numberDictionary.Keys)
    {
        // get the int value based on the key
        sum += numberDictionary[key];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the &lt;code&gt;Dictionary&lt;/code&gt; is accessed twice, once to get the &lt;em&gt;Key&lt;/em&gt; and a second time to get the &lt;em&gt;Value&lt;/em&gt; for the specific Key.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="keyvalue-iteration"&gt;KeyValue iteration&lt;/h3&gt;
&lt;p&gt;The next method for iteration, is to iterate through each &lt;code&gt;Dictionary&lt;/code&gt; record, a &lt;code&gt;KeyValuePair&lt;/code&gt;. This is possible because Dictionary contains a &lt;em&gt;GetEnumerator&lt;/em&gt; method.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void IterateKVPair()
{
    var sum = 0;

    // iterate of each KeyValuePair in the dictionary
    foreach (KeyValuePair&amp;lt;string, int&amp;gt; kv in numberDictionary)
    {
        // get the value part of the KeyValuePair
        sum += kv.Value;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simpler than the previous method, and here the Dictionary itself is only accessed only once to get the &lt;code&gt;KeyValuePair&lt;/code&gt; which in turn contains all the information for the entry.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="tuple"&gt;Tuple&lt;/h3&gt;
&lt;p&gt;The last method for iteration, is to iterate through each &lt;code&gt;Dictionary&lt;/code&gt; item, but &lt;code&gt;destruct the KeyValuePair into a Tuple&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void IterateTuple()
{
    var sum = 0;

    // iterate and destruct into a tuple
    foreach (var (key, value) in numberDictionary)
    {
        // access the value directly
        sum += value;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One could argue whether this version is easier to read than the previous &lt;em&gt;KeyValuePair&lt;/em&gt; version - personally I do find this version more readable. An added benefit is that the name of the &lt;code&gt;Tuple&lt;/code&gt; items can be customized to make it obvious to the reader as to what they contains. So instead of &lt;em&gt;Key&lt;/em&gt; and &lt;em&gt;Value&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void IterateProducts()
{
    var sum = 0;
    foreach (var (productName, price) in productDictionary)
    {
        sum += intValue;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id="benchmarks"&gt;Benchmarks&lt;/h2&gt;
&lt;p&gt;So we've looked at three ways to get the information from a Dictionary, but how to each of them perform?&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Error&lt;/th&gt;
&lt;th style="text-align: right;"&gt;StdDev&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Ratio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IterateKeyValue&lt;/td&gt;
&lt;td style="text-align: right;"&gt;14.827 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.1774 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.1659 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IterateTuple&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.529 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0468 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0438 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IterateKVPair&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.519 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0296 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0262 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.24&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;KeyValuePair&lt;/code&gt; and &lt;code&gt;Tuple&lt;/code&gt; versions are comparable, while iterating through each &lt;em&gt;Key&lt;/em&gt; and then getting the &lt;em&gt;Value&lt;/em&gt; is &lt;code&gt;4 times slower&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Iterating through &lt;em&gt;Keys&lt;/em&gt;, to then retrieve the &lt;em&gt;Value&lt;/em&gt; shouldn't ever be the default method for iteration - especially when there are other more performant and easier to read methods available.&lt;br&gt;
&lt;em&gt;KeyValuePair&lt;/em&gt; and &lt;em&gt;Tuple&lt;/em&gt; iteration are comparable, and usage comes down to personal preference - personally I prefer the &lt;code&gt;Tuple&lt;/code&gt; with its added benefit of being able to accurately name the &lt;em&gt;Key&lt;/em&gt; and &lt;em&gt;Value&lt;/em&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/buhakmeh/status/1525885135727501312"&gt;Khalid Abuhakmeh Tweet&lt;/a&gt;&lt;/p&gt;
&lt;!--?# DailyDrop ?--&gt;105: 28-06-2022&lt;!--?#/ DailyDrop ?--&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
</feed>