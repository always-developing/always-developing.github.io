<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>https://alwaysdeveloping.net/</id>
	<title />
	<link rel="self" href="https://alwaysdeveloping.net/" />
	<rights>Copyright © 2022</rights>
	<updated>2022-06-20T03:59:43Z</updated>
	<subtitle>always learning | always growing</subtitle>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/20-base-conversion</id>
		<title>Binary and hexadecimal conversion</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/20-base-conversion" />
		<updated>2022-06-20T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;Convert&lt;/code&gt; class can be used to convert any integer value to it's corresponding value of a &lt;code&gt;different base&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Binary&lt;/code&gt; (base 2), &lt;code&gt;Octal&lt;/code&gt; (base 8), &lt;code&gt;Decimal&lt;/code&gt; (base 10) and &lt;code&gt;Hexadecimal&lt;/code&gt; (base 16) are supported.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="convert-class"&gt;Convert class&lt;/h2&gt;
&lt;p&gt;Using the &lt;code&gt;Convert&lt;/code&gt; class to perform the conversion is incredibly simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var intValue = 642;

// use the ToString method, specifying the new base
var binary = Convert.ToString(intValue, 2);
var octal = Convert.ToString(intValue, 8);
var hex = Convert.ToString(intValue, 16);

Console.WriteLine(binary);
Console.WriteLine(octal);
Console.WriteLine(hex);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;1010000010
1202
282
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Negative values are also supported:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var intValue = 642;

// use the ToString method, specifying the new base
var binaryNeg = Convert.ToString(intValue * 1, 2);
var octalNeg = Convert.ToString(intValue * -1, 8);
var hexNeg = Convert.ToString(intValue * -1, 16);

Console.WriteLine(binaryNeg);
Console.WriteLine(octalNeg);
Console.WriteLine(hexNeg);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;11111111111111111111110101111110
37777776576
fffffd7e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that's all there is to it - simple and occasionally useful!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;In my almost 20 years of programming, I don't think I've ever had to perform these kinds of conversions (outside of assignments at university), so this functionality is probably not useful for every day development for most applications - however when the need does arise, it's useful to know it can be easily implemented.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/buhakmeh/status/1523685323875635200"&gt;Khalid Abuhakmeh Tweet&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;99: 20-06-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/07/08-lowing-for-loop</id>
		<title>For loop lowering in C#</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/07/08-lowing-for-loop" />
		<updated>2022-06-20T00:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;In C#, a &lt;code&gt;for loop&lt;/code&gt; is &lt;em&gt;lowered&lt;/em&gt; to a &lt;code&gt;while loop&lt;/code&gt; by the compiler.&lt;/p&gt;
&lt;p&gt;At a lower level, the &lt;code&gt;for&lt;/code&gt; loop &lt;em&gt;does not exist&lt;/em&gt; - it gets translated into a &lt;code&gt;while&lt;/code&gt; loop by the C# compiler, and then is executed as such.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="lowering"&gt;Lowering&lt;/h2&gt;
&lt;p&gt;Done by the C# compiler, &lt;code&gt;lowering&lt;/code&gt; is the process of rewriting high-level language features, into low-level language features in the &lt;em&gt;same language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There are a number of C# features, which are just &lt;em&gt;syntactic sugar&lt;/em&gt; over (often) more complex lower-level features - the compiler will take the high-level feature and &lt;em&gt;lower&lt;/em&gt; it to the lower-level feature.&lt;/p&gt;
&lt;p&gt;Lowering is done for a number of reasons, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Working with high-level features, are easier and simpler to work with&lt;/li&gt;
&lt;li&gt;Optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post is specifically about the &lt;code&gt;for&lt;/code&gt; loop, not an especially complex feature - however it is more complex than the &lt;code&gt;while&lt;/code&gt; loop, its lower-level equivalent.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="for-loop"&gt;For loop&lt;/h2&gt;
&lt;p&gt;Using &lt;a href="https://sharplab.io/"&gt;sharplab.io&lt;/a&gt;, one is able to see the lowered code the compiler generates.&lt;/p&gt;
&lt;p&gt;Here is an example of some code written in Visual Studio:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForLoopExample() 
{
    for(int i = 0; i &amp;lt; 100; i++)
    {
        Console.WriteLine(i);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the lowered code the compiler generates:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForLoopExample()
{
    int num = 0;
    while (num &amp;lt; 100)
    {
        Console.WriteLine(num);
        num++;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see - the &lt;code&gt;for&lt;/code&gt; loop is converted to a &lt;code&gt;while&lt;/code&gt; loop!&lt;/p&gt;
&lt;p&gt;Another example, in a previous post we learnt how the &lt;em&gt;iterator section&lt;/em&gt; of a for loop could &lt;a href="https://alwaysdeveloping.net/06/30-for-multi-operations"&gt;contain multiple statements&lt;/a&gt;. Looking at the lowered code for that example, the &lt;code&gt;while&lt;/code&gt; loop is controlled only by the &lt;em&gt;condition section&lt;/em&gt; of the &lt;code&gt;for&lt;/code&gt; loop - this is why this portion of the for loop can only contain one statement, while the other sections can contain multiple.&lt;/p&gt;
&lt;p&gt;Original C# code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForLoopExample2() 
{
    int countDown = 100;
    for(int i = 0; i &amp;lt; 100; i++, countDown--)
    {
        Console.WriteLine(i);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the lowered code the compiler generates:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForLoopExample2()
{
    int num = 100;
    int num2 = 0;
    while (num2 &amp;lt; 100)
    {
        Console.WriteLine(num2);
        num2++;
        num--;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id="foreach"&gt;Foreach&lt;/h2&gt;
&lt;p&gt;Just for reference, the &lt;code&gt;foreach&lt;/code&gt; does not operate the same way as the &lt;code&gt;for&lt;/code&gt; loop - even though both iterate through a list of items, they do it very differently.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Foreach&lt;/code&gt; works using the &lt;em&gt;&lt;a href="https://alwaysdeveloping.net/03/03-getenumerator"&gt;GetEnumerator&lt;/a&gt;&lt;/em&gt; method on a class, and is not lowered to a &lt;code&gt;while&lt;/code&gt; loop:&lt;/p&gt;
&lt;p&gt;Original C# code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForEachLoopExample() 
{
    var list = new List&amp;lt;int&amp;gt; { 1, 2, 3, 4, 5, };

    foreach (var item in list)
    {
        Console.WriteLine(item);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the lowered code the compiler generates:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForEachLoopExample()
{
    List&amp;lt;int&amp;gt; list = new List&amp;lt;int&amp;gt;();
    list.Add(1);
    list.Add(2);
    list.Add(3);
    list.Add(4);
    list.Add(5);
    List&amp;lt;int&amp;gt; list2 = list;
    List&amp;lt;int&amp;gt;.Enumerator enumerator = list2.GetEnumerator();
    try
    {
        while (enumerator.MoveNext())
        {
            int current = enumerator.Current;
            Console.WriteLine(current);
        }
    }
    finally
    {
        ((IDisposable)enumerator).Dispose();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While the developer written code for a &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;foreach&lt;/code&gt; loop are fairly similar - the lowered code for the &lt;code&gt;foreach&lt;/code&gt; is a bit more complex than a simple &lt;code&gt;while&lt;/code&gt; loop.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;While this may not be something one has to worry or think about when coding - its always good to have a general knowledge of how the compiler works, and what its doing (even at a high level), and how the code written impacts the lowered code which gets executed.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://sharplab.io/"&gt;sharplab.io&lt;/a&gt;&lt;/p&gt;
&lt;!--?# DailyDrop ?--&gt;113: 07-08-2022&lt;!--?#/ DailyDrop ?--&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/17-sortable-guids</id>
		<title>Sortable Guids using NewId</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/17-sortable-guids" />
		<updated>2022-06-17T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;Often &lt;code&gt;Guids&lt;/code&gt; are used as database primary keys, as they are "guaranteed" to be unique and random or un-guessable. However one drawback of them, is that due to their uniqueness there is no ordering, which leads to &lt;a href="https://www.mssqltips.com/sqlservertip/4331/sql-server-index-fragmentation-overview/"&gt;index fragmentation&lt;/a&gt;, an increase in database size, as well as a potential performance degradation.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://www.nuget.org/packages/NewId/"&gt;NewId&lt;/a&gt; library, can assist with this, by generating unique, but sortable &lt;code&gt;Guids&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="guid"&gt;Guid&lt;/h2&gt;
&lt;p&gt;In C#, &lt;code&gt;Guid's&lt;/code&gt; are mostly created using the &lt;code&gt;Guid.NewGuid&lt;/code&gt; method (there are other ways, such as using this &lt;a href="https://alwaysdeveloping.net/05/10-deterministic-guid"&gt;technique to create a deterministic Guid&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;Guid.NewGuid&lt;/code&gt; to created 10 &lt;code&gt;Guids&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;for (int i = 0; i &amp;lt; 10; i++)
{
    var id = Guid.NewGuid();
    Console.WriteLine(id);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see, as by design, the values of the 10 &lt;code&gt;Guids&lt;/code&gt; are random and are unrelated to one another:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;7620e975-26e6-46ca-876d-dff93495ad57
24751db7-6372-4b8c-94fd-2ae3ad92f926
c8791bf1-f85a-4b12-81e7-18cab1516cb9
5a78214c-adb6-4d59-8921-bca021b50b22
e46a7e0e-faf4-4af3-bd2e-39a1102af894
807ad5c4-7314-4ebb-8914-3b9a0f38386f
ca536113-ea85-41a6-844f-891d8aab40e4
44cf6ff1-89da-458f-8f69-57d4c68c73cf
b18e4911-e439-4506-9f23-b5017ce82d55
225557ab-a5eb-48e1-b04e-7a72696e85ca
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As mentioned, having unique values is the desired goal, but having them be completely random can cause issues if they are being used as database primary keys.&lt;br&gt;
The non-sequential nature of this approach leads to index fragmentation, but also means records cannot be sorted by this field, and requires another field (e.g. DateCreated) to be sortable.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="newid"&gt;NewId&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://www.nuget.org/packages/NewId/"&gt;Newid&lt;/a&gt; library addresses these issues, by creating unique, semi-random, sortable &lt;code&gt;Ids&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The library is very easy to use, with the &lt;code&gt;NewId.Next()&lt;/code&gt; method used to produce an &lt;code&gt;Id&lt;/code&gt;. It is also possible to set a start &lt;code&gt;Id&lt;/code&gt;, or a start byte-array, from quick subsequent &lt;code&gt;Ids&lt;/code&gt; are based.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;NewId&lt;/code&gt; to created 10 &lt;code&gt;Ids&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;for (int i = 0; i &amp;lt; 10; i++)
{
    var newId = NewId.Next().ToGuid();
    Console.WriteLine(newId);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The 10 unique, but sortable &lt;code&gt;Guids&lt;/code&gt; are as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;df1d0000-0a83-7cd3-fdf2-08da40cae578
df1d0000-0a83-7cd3-467a-08da40cae579
df1d0000-0a83-7cd3-48ba-08da40cae579
df1d0000-0a83-7cd3-49de-08da40cae579
df1d0000-0a83-7cd3-4aba-08da40cae579
df1d0000-0a83-7cd3-4b95-08da40cae579
df1d0000-0a83-7cd3-4c93-08da40cae579
df1d0000-0a83-7cd3-4d6e-08da40cae579
df1d0000-0a83-7cd3-4e8b-08da40cae579
df1d0000-0a83-7cd3-4f5c-08da40cae579
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As one can see, the &lt;code&gt;Guids&lt;/code&gt; are unique and sorted, but don't look entirely random - this is because some parts are in fact not entirely random.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Id&lt;/code&gt; generated is made up of three portions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df1d0000-0a83-7cd3&lt;/code&gt;: this portion is the same for all &lt;code&gt;Ids&lt;/code&gt; generated by the same process/worker Id. This will be constant on a particular machine, but will differ PC to PC.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4f5c&lt;/code&gt;: this portion will change with each &lt;code&gt;Id&lt;/code&gt; generated.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;08da40cae579&lt;/code&gt;: this portion increments, but slowly and not for every &lt;code&gt;Id&lt;/code&gt; generated (as is evident in the the above example)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are three sources of information are used to construct the &lt;code&gt;Id&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;process/worker Id&lt;/code&gt;: unique and constant for each PC&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;timestamp&lt;/code&gt;: by definition, incrementing and thus orderable&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;sequence&lt;/code&gt;: this is an incrementing Id&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Generating a &lt;code&gt;NewId&lt;/code&gt; is just as easy as generating a &lt;code&gt;Guid&lt;/code&gt; directly - and are directly convertible to a &lt;code&gt;Guid&lt;/code&gt; (as was done in the above code example)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;NewId&lt;/code&gt; is not suitable for every situation - in some cases you would want the generated &lt;code&gt;Id&lt;/code&gt; to be completely random and un-guessable. However, if you are using &lt;code&gt;Guids&lt;/code&gt; as database primary keys, consider using &lt;code&gt;NewId&lt;/code&gt; to generate the &lt;code&gt;Ids&lt;/code&gt; instead of &lt;em&gt;Guid.NewGuid&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I appreciate the fact that, while the library does generate its own type (also called &lt;em&gt;NewId&lt;/em&gt;), this type is effectively a &lt;code&gt;Guid&lt;/code&gt;, and can easy be converted to one. This means that any underlying entities which currently use a &lt;code&gt;Guid&lt;/code&gt; do not need to be updated with a new type, or reference a third party package - they can be kept "clean".&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.nuget.org/packages/NewId/"&gt;NewId&lt;/a&gt;&lt;br&gt;
&lt;a href="https://andrewlock.net/generating-sortable-guids-using-newid/"&gt;Generating sortable Guids using NewId&lt;/a&gt;&lt;/p&gt;
&lt;!--?# DailyDrop ?--&gt;98: 17-06-2022&lt;!--?#/ DailyDrop ?--&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/16-nullable-performance</id>
		<title>The cost of Nullable variables</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/16-nullable-performance" />
		<updated>2022-06-16T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The ability to mark a variable as &lt;code&gt;Nullable&lt;/code&gt; (using the ? syntax) is a useful feature in C#, but does come with a large (relative to non-nullable) performance cost.&lt;/p&gt;
&lt;p&gt;Today we'll have a look at some simple benchmarks and how making a variable nullable impacts performance.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="benchmark"&gt;Benchmark&lt;/h2&gt;
&lt;p&gt;The benchmarks were be run on .NET6, using BenchmarkDotNet.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Benchmark(Baseline =true)]
[Arguments(1, 2)]
[Arguments(2, 4)]
[Arguments(0, 0)]
public void NotNullableParameters(int a, int b)
{
    int result = 0;

    for (int i = 0; i &amp;lt; 1000; i++)
    {
        result += a * b;
    }
}

[Benchmark]
[Arguments(1, 2)]
[Arguments(2, 4)]
[Arguments(0, 0)]
[Arguments(null, null)]
public void NullableParameters(int? a, int? b)
{
    int? result = 0;

    for (int i = 0; i &amp;lt; 1000; i++)
    {
        result += a * b;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The logic of each method is the same, and is straight-forward - multiple two int values, 1000 times, and keep a running total of the result.&lt;/p&gt;
&lt;p&gt;The first benchmark will us non-nullable int values, while the second will use nullable int values.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="results"&gt;Results&lt;/h2&gt;
&lt;p&gt;Running the benchmarks yields the following results:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Error&lt;/th&gt;
&lt;th style="text-align: right;"&gt;StdDev&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Ratio&lt;/th&gt;
&lt;th style="text-align: right;"&gt;RatioSD&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;NullableParameters&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1,196.4 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;21.79 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;20.38 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;?&lt;/td&gt;
&lt;td style="text-align: right;"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NotNullableParameters&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td style="text-align: right;"&gt;240.0 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.53 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.13 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NullableParameters&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1,051.0 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;5.70 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;4.45 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;4.37&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.06&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NotNullableParameters&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td style="text-align: right;"&gt;241.4 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.74 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.50 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NullableParameters&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1,054.5 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;8.60 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;7.18 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;4.37&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.07&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NotNullableParameters&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td style="text-align: right;"&gt;240.8 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.92 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.73 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NullableParameters&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1,053.6 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;8.73 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;6.81 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;4.38&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.06&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In all cases, the &lt;code&gt;non-nullable version is approximately 4.4x faster than the nullable version&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Bear in mind, this is measured in nano-seconds, so probably won't make a material different to performance, unless the logic is computational heavy.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="lowered-code"&gt;Lowered code&lt;/h2&gt;
&lt;p&gt;Using &lt;a href="https://sharplab.io/"&gt;sharplab.io&lt;/a&gt; to have a look at the lowered code, there a number of additional checks performed with the nullable version, all of which adds to the performance difference.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;non-nullable&lt;/code&gt; version is lowered to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void NotNullableParameters(int a, int b)
{
    int num = 0;
    int num2 = 0;
    while (num2 &amp;lt; 1000)
    {
        num += a * b;
        num2++;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While the &lt;code&gt;nullable&lt;/code&gt; version is lowered to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void NullableParameters(Nullable&amp;lt;int&amp;gt; a, Nullable&amp;lt;int&amp;gt; b)
{
    Nullable&amp;lt;int&amp;gt; num = 0;
    int num2 = 0;
    while (num2 &amp;lt; 1000)
    {
        Nullable&amp;lt;int&amp;gt; num3 = num;
        Nullable&amp;lt;int&amp;gt; num4 = a;
        Nullable&amp;lt;int&amp;gt; num5 = b;
        Nullable&amp;lt;int&amp;gt; num6 = ((num4.HasValue &amp;amp; num5.HasValue) ? 
            new Nullable&amp;lt;int&amp;gt;(num4.GetValueOrDefault() * num5.GetValueOrDefault()) : 
            null);
        num = ((num3.HasValue &amp;amp; num6.HasValue) ? 
            new Nullable&amp;lt;int&amp;gt;(num3.GetValueOrDefault() + num6.GetValueOrDefault()) : 
            null);
        num2++;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;As with most things, there is a trade-off, in this case - the convenience of nullable types vs the performance impact their usage brings.&lt;/p&gt;
&lt;p&gt;The performance penalty when using nullable types is measured in nano-seconds, and for the most part won't have any noticeable impact on performance of the application. However if a large number of operations are being performed on nullable types, and performance is to be improved, then one can look at converting the nullable types to non-nullable.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://leveluppp.ghost.io/content/images/size/w1000/2021/12/nullable_b.png"&gt;What is the cost of Nullable in .NET&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;97: 16-06-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/15-get-uninitialized-object</id>
		<title>Creating objects without calling the constructor</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/15-get-uninitialized-object" />
		<updated>2022-06-15T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;RuntimeHelpers.GetUninitializedObject&lt;/code&gt; method can be used to create an instance of an object, without calling its constructor or property initializers.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;h3 id="example-class"&gt;Example class&lt;/h3&gt;
&lt;p&gt;Consider the following simple &lt;em&gt;Person&lt;/em&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Person
{
    public string Name { get; } = &amp;quot;(not set)&amp;quot;;

    public int Age { get;  }

    public Person(int age)
    {
        Age = age;
    }

    public Person(string name, int age)
    {
        Name = name;
        Age = age;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The important things to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One constructor which explicitly sets both properties&lt;/li&gt;
&lt;li&gt;One constructor which only explicitly sets the age&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Name&lt;/em&gt; property has an initializer, which sets the value if not explicitly set&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id="normal-initialization"&gt;Normal initialization&lt;/h3&gt;
&lt;p&gt;First let's look at &amp;quot;normal&amp;quot; object initializations - two instances of the &lt;em&gt;Person&lt;/em&gt; class will be created, using the two different constructors:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var p1 = new Person(&amp;quot;Dave&amp;quot;, 46);
var p2 = new Person(47);

Console.WriteLine($&amp;quot;p1 has a name of '{p1.Name}' and an age of {p1.Age}&amp;quot;);
Console.WriteLine($&amp;quot;p2 has a name of '{p2.Name}' and an age of {p2.Age}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the first instance, both properties are set, in the second instance only the age is (explicitly) set.&lt;/p&gt;
&lt;p&gt;The output is then as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;p1 has a name of 'Dave' and an age of 46
p2 has a name of '(not set)' and an age of 47
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you might have expected, &lt;em&gt;p1&lt;/em&gt; outputs both values passed into the constructor, which &lt;em&gt;p2&lt;/em&gt; outputs the &lt;em&gt;Age&lt;/em&gt; specified, and the default initialization value for the &lt;em&gt;Name&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="getuninitializedobject"&gt;GetUninitializedObject&lt;/h3&gt;
&lt;p&gt;Next, we'll look at the &lt;code&gt;RuntimeHelpers.GetUninitializedObject&lt;/code&gt; method, which is part of the &lt;code&gt;System.Runtime.CompilerServices&lt;/code&gt; namespace.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using System.Runtime.CompilerServices;

var p1 = new Person(&amp;quot;Dave&amp;quot;, 46);
var p2 = new Person(47);
var p3 = (Person)RuntimeHelpers.GetUninitializedObject(typeof(Person));

Console.WriteLine($&amp;quot;p1 has a name of '{p1.Name}' and an age of {p1.Age}&amp;quot;);
Console.WriteLine($&amp;quot;p2 has a name of '{p2.Name}' and an age of {p2.Age}&amp;quot;);
Console.WriteLine($&amp;quot;p3 has a name of '{p3.Name}' and an age of {p3.Age}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the third instance, we use the &lt;em&gt;GetUninitializedObject&lt;/em&gt; to get an &lt;code&gt;uninitialized instance of Person&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The output is then as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;p1 has a name of 'Dave' and an age of 46
p2 has a name of '(not set)' and an age of 47
p3 has a name of '' and an age of 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the name of the method suggests, no initialization methods are called - neither the constructors nor the &lt;em&gt;Name&lt;/em&gt; initializer.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;A useful library to know about and leverage when the need arises. I wouldn't suggest using it to initialize objects, unless you know how the object will behave without having any constructor or initializers invoked. Doing so may cause instability in the usage of the instance.&lt;/p&gt;
&lt;p&gt;One useful use case could be for auto generating documentation - if the documentation is to give examples of clean uninitialized entities, then this method could be used to get an object, which can then be serialized and output.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/create-dotnet-objects-without-calling-the-constructor"&gt;Create .NET Objects without Calling The Constructor&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;96: 15-06-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/14-indexer-arguments</id>
		<title>Indexers with multiple arguments</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/14-indexer-arguments" />
		<updated>2022-06-14T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;Previously we have look at a method to &lt;a href="https://alwaysdeveloping.net/02/23-indexers"&gt;add an indexer and access class as an array&lt;/a&gt;. Today we explore indexers again, and how custom indexers can be written which accept not only integers, but other types as well as &lt;code&gt;multiple parameters&lt;/code&gt;, to access data in a variety of ways.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="list-example"&gt;List example&lt;/h2&gt;
&lt;p&gt;First as a benchmark, we'll have a look at the &lt;code&gt;List&lt;/code&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var strList = new List&amp;lt;string&amp;gt;();

strList.Add("one");
strList.Add("two");
strList.Add("three");
strList.Add("four");
strList.Add("five");

Console.WriteLine(strList[3]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The items added to the List can be accessed using an int indexer. In the above example &lt;em&gt;strList[3]&lt;/em&gt; will return the 4th item in the list. This is standard built-in functionality.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="enhancedlist-example"&gt;EnhancedList example&lt;/h2&gt;
&lt;p&gt;Next we'll create our own &lt;code&gt;EnhancedList&lt;/code&gt;, which inherits from the &lt;code&gt;List&lt;/code&gt; class, but provides additional functionality through custom indexers.&lt;/p&gt;
&lt;p&gt;The base &lt;code&gt;EnhancedList&lt;/code&gt; looks as follows and operates exactly the same as a normal &lt;code&gt;List&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    public class EnhancedList&amp;lt;T&amp;gt; : List&amp;lt;T&amp;gt; { }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id="access-index"&gt;Access index&lt;/h3&gt;
&lt;p&gt;First, let's create an indexer to &lt;code&gt;get the index, based on the value&lt;/code&gt;. This is basically exactly what the &lt;code&gt;IndexOf&lt;/code&gt; method does, but as an indexer:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class EnhancedList&amp;lt;T&amp;gt; : List&amp;lt;T&amp;gt;
{
    public int this[T value] =&amp;gt; this.Contains(value) ? this.IndexOf(value) : -1;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The method checks if the list contains the value passed in, and if it does will return the value's index, otherwise -1 will be returned.&lt;/p&gt;
&lt;p&gt;The usage is now as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var enhancedList = new EnhancedList&amp;lt;string&amp;gt;();
enhancedList.Add("one");
enhancedList.Add("two");
enhancedList.Add("three");
enhancedList.Add("four");
enhancedList.Add("five");

// access the value based on the index
Console.WriteLine(enhancedList[3]);

// access the index based on the value
Console.WriteLine(enhancedList["two"]);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of the above is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;    four
    1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The built in indexer for &lt;code&gt;List&lt;/code&gt; accepts an int as a parameter, and we've created an indexer which accepts type T (the type contained in the &lt;em&gt;EnhancedList&lt;/em&gt;), in this example, a string.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="multiple-index-lookup"&gt;Multiple index lookup&lt;/h3&gt;
&lt;p&gt;As we've seen, &lt;code&gt;EnhancedList[index]&lt;/code&gt; can be used to get the value at the specified index. Let's update the &lt;code&gt;EnhancedList&lt;/code&gt; to accept &lt;code&gt;multiple indexes and return multiple values&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class EnhancedList&amp;lt;T&amp;gt; : List&amp;lt;T&amp;gt;
{
    public int this[T value] =&amp;gt; this.Contains(value) ? this.IndexOf(value) : -1;

    public IEnumerable&amp;lt;T&amp;gt; this[bool rangeLookup, params int[] indexes] =&amp;gt; 
        indexes.Select(i =&amp;gt; (T)this[i]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A new indexer has been added, this time taking a bool and an array of integers as arguments. The bool parameter is required to differentiate between &lt;em&gt;EnhancedList[index]&lt;/em&gt; and &lt;em&gt;EnhancedList[params]&lt;/em&gt; - without the bool forcing a difference, there is no way of specifying which indexer is being called.&lt;/p&gt;
&lt;p&gt;The usage is now as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var enhancedList = new EnhancedList&amp;lt;string&amp;gt;();
enhancedList.Add("one");
enhancedList.Add("two");
enhancedList.Add("three");
enhancedList.Add("four");
enhancedList.Add("five");

// get the value for index 2 and 4
foreach (var lookupItem in enhancedList[true, 2, 4])
{
    Console.WriteLine(lookupItem);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above, we get the values at index 2 and 4. The output being:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;    three
    five
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id="t-modification"&gt;T modification&lt;/h3&gt;
&lt;p&gt;The generic type T contained in the &lt;code&gt;EnhancedList&lt;/code&gt; can also be modified before being returned by the indexer. In the last example, we are going to create an indexer which returned the items in the list as a string, ready for output to the Console:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class EnhancedList&amp;lt;T&amp;gt; : List&amp;lt;T&amp;gt;
{
    public int this[T value] =&amp;gt; this.Contains(value) ? this.IndexOf(value) : -1;

    public IEnumerable&amp;lt;T&amp;gt; this[bool rangeLookup, params int[] indexes] =&amp;gt; 
        indexes.Select(i =&amp;gt; (T)this[i]);

    public IEnumerable&amp;lt;string&amp;gt; this[string prefixMessage, params int[] indexes] =&amp;gt; 
        indexes.Select(i =&amp;gt; $"{prefixMessage} {(T)this[i]}");
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The new indexer takes a string prefix message, and an array of indexes. Instead of returning just the values at the position of the indexes (as in the previous example), now the &lt;em&gt;prefixMessage&lt;/em&gt; and the &lt;em&gt;value&lt;/em&gt; are combined before being returned.&lt;/p&gt;
&lt;p&gt;The usage is now as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var enhancedList = new EnhancedList&amp;lt;string&amp;gt;();
enhancedList.Add("one");
enhancedList.Add("two");
enhancedList.Add("three");
enhancedList.Add("four");
enhancedList.Add("five");

// return value at index 0, 2 and 4
// with the supplied message
foreach (var lookupItem in enhancedList["Printing item ...", 0, 2, 4])
{
    Console.WriteLine(lookupItem);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above, we get the values at index 2 and 4. The output being:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;    Printing item ... one
    Printing item ... three
    Printing item ... five
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;While the examples shown above are not necessarily production ready or practical, they do show how indexers can be created which accept multiple arguments, allowing for some innovative possibilities depending on your specific use case.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/maartenballiauw/status/1527280915092742144"&gt;Maarten Balliauw Tweet&lt;/a&gt;&lt;/p&gt;
&lt;!--?# DailyDrop ?--&gt;95: 14-06-2022&lt;!--?#/ DailyDrop ?--&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/13-chaining-lambda</id>
		<title>Lambda chaining in C#</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/13-chaining-lambda" />
		<updated>2022-06-13T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Action lambda&lt;/code&gt; expressions (expressions which take parameters but do not return a value) can be &lt;code&gt;chained together&lt;/code&gt; and operated on with a single handle, the same as is done with delegates. This is because the &lt;code&gt;Action&lt;/code&gt; type in C# is a delegate.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="action"&gt;Action&lt;/h2&gt;
&lt;p&gt;When defining a lambda as follows, the type of the variable is &lt;code&gt;delegate void Action&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    var welcomeMsg = () =&amp;gt; Console.Write(&amp;quot;Good morning &amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As it is a delegate, multiple can be chained together:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var welcomeMsg = () =&amp;gt; Console.Write(&amp;quot;Good morning &amp;quot;);
welcomeMsg += () =&amp;gt; Console.Write(&amp;quot;Dave&amp;quot;);
welcomeMsg += () =&amp;gt; Console.WriteLine(&amp;quot;&amp;quot;);
welcomeMsg += () =&amp;gt; Console.WriteLine(&amp;quot;Have a great day.&amp;quot;);

welcomeMsg();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Invoking the Action will result in each lambda being called in order, and the output being:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Good morning Dave
Have a great day.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To expand on this convoluted, non-practical example, logic can be applied to chain or not chain certain lambdas to the main handle.&lt;/p&gt;
&lt;p&gt;The below will only ouput a name if its supplied, and also allows for additional custom welcome messages to be added to the end of the main welcome message:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;void OuputWelcomeMessage(string name =&amp;quot;&amp;quot;, Action[] extraMessages = null)
{
    var welcomeMsg = () =&amp;gt; Console.Write(&amp;quot;Good morning &amp;quot;);

    if (!string.IsNullOrEmpty(name))
    {
        welcomeMsg += () =&amp;gt; Console.Write(name);
        welcomeMsg += () =&amp;gt; Console.Write(&amp;quot;.&amp;quot;);
    }

    welcomeMsg += () =&amp;gt; Console.Write(Environment.NewLine);

    if (extraMessages != null)
    {
        foreach(var action in extraMessages)
        {
            welcomeMsg += action;
        }
    }
    welcomeMsg();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="parameter-action"&gt;Parameter Action&lt;/h2&gt;
&lt;p&gt;The same process can also be used for lambda's which take in parameters(s) - however to chain them, every lambda which is chained needs to have the same signature.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var updateDatabase = (int id) =&amp;gt; 
    Console.WriteLine($&amp;quot;Updating record with `{id}` in database 1&amp;quot;);
updateDatabase += (int id) =&amp;gt; 
    Console.WriteLine($&amp;quot;Updating record with `{id}` in database 2&amp;quot;);

updateDatabase(112);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we simulate updating two different databases, with the one integer parameter. The parameter will be passed into each lambda in order of them being added to the main handle.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Updating record with `112` in database 1
Updating record with `112` in database 2
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="async-action"&gt;Async Action&lt;/h2&gt;
&lt;p&gt;Again, the same process can also be used for async lambda expressions. These now become &lt;code&gt;Func&amp;lt;Task&amp;gt;&lt;/code&gt; and not &lt;code&gt;Action&lt;/code&gt;, as they DO have a return value, of type Task.&lt;/p&gt;
&lt;p&gt;The below method will accept an array of lambda's, chain them and invoke to ouput the result:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;async Task OuputMessagesAsync(Func&amp;lt;Task&amp;gt;[] extraMessages = null)
{
    var messages = () =&amp;gt; 
        { 
            Console.WriteLine(&amp;quot;Executing messages:&amp;quot;); 
            return Task.CompletedTask; 
        };

    if (extraMessages != null)
    {
        foreach(var action in extraMessages)
        {
            messages += action;
        }
    }

    await messages();

    Console.ReadLine(); 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Invoking the method as follows, results in some interesting points:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;await OuputMessagesAsync(
    new[] {
        async () =&amp;gt; { await Task.Delay(4); Console.WriteLine(&amp;quot;1&amp;quot;); },
        async () =&amp;gt; { await Task.Delay(3); Console.WriteLine(&amp;quot;2&amp;quot;); },
        async () =&amp;gt; { await Task.Delay(2); Console.WriteLine(&amp;quot;3&amp;quot;); },
        async () =&amp;gt; { await Task.Delay(1); Console.WriteLine(&amp;quot;4&amp;quot;); },
        async () =&amp;gt; { await Task.Delay(0); Console.WriteLine(&amp;quot;5&amp;quot;); },
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output for the above is (and may differ each execution):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Executing messages:
5
2
4
3
1
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Only the main handle is awaiting, not the chained lambdas. If the &lt;code&gt;Console.ReadLine()&lt;/code&gt; is removed, then only one value is output, and not all 5 - the application closes before all async methods have run to completion.&lt;/li&gt;
&lt;li&gt;This also highlights the fact that the order in which the number are output is not consistent - it can change with each execution. The lambda's are not being awaited individually before the next one in the chain is executed.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;I'm sure there is a valid, practical use case for this somewhere out there, but I can't think of a single situation in the past where I would have used the chaining ability. Perhaps (similar to in the above sample), allowing the caller of a method to supply additional &lt;code&gt;Action&lt;/code&gt;(s) to be performed in addition to core method logic?&lt;/p&gt;
&lt;p&gt;Either way though, I found this to be an interesting technique and nugget of information to know about to potential future use!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/buhakmeh/status/1520811273633599489"&gt;Khalid Abuhakmeh Tweet&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;94: 13-06-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/10-xml-comments</id>
		<title>Using XML documentation comments to enrich code</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/10-xml-comments" />
		<updated>2022-06-10T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;There are a number of features as part of the C# XML documentation comments (comments prefixed with &lt;code&gt;///&lt;/code&gt;), which can use used to improved the useability of code. In additional to providing commentary on a class or method etc, there is also the ability to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;link to external URLs&lt;/li&gt;
&lt;li&gt;add general remarks to the comments&lt;/li&gt;
&lt;li&gt;share comment blocks between methods&lt;/li&gt;
&lt;li&gt;reference a parameter by name&lt;/li&gt;
&lt;li&gt;highlight language keywords&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these can be used to enhance the overall quality and usability of the code, especially if the code is part of a library to be referenced and used by external projects.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="external-urls"&gt;External Urls&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;seealso&lt;/code&gt; keyword can be used to create a clickable link.&lt;/p&gt;
&lt;p&gt;Assume we want to put a URL in a method comment section:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;/// &amp;lt;summary&amp;gt;
/// Does some work. See www.alwaysdeveloping.net for more information
/// &amp;lt;/summary&amp;gt;
public Task DoWorkAsync()
{
    return Task.CompletedTask;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this, the URL is present in the comments, but is not clickable:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/before-seealso.png" alt="Url in comment"&gt;&lt;/p&gt;
&lt;p&gt;Updating the comments to instead used the &lt;code&gt;seealso&lt;/code&gt; keyword, makes the URL clickable:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;/// &amp;lt;summary&amp;gt;
/// Does some work. See &amp;lt;seealso href="www.alwaysdeveloping.net" /&amp;gt; for more information
/// &amp;lt;/summary&amp;gt;
public Task DoWorkAsync()
{
    return Task.CompletedTask;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/after-seealso.png" alt="Clickable URL in comment"&gt;&lt;/p&gt;
&lt;h2 id="general-remarks"&gt;General remarks&lt;/h2&gt;
&lt;p&gt;Instead of adding a general remark to the &lt;em&gt;summary&lt;/em&gt; section, it can instead be added to the &lt;code&gt;remark&lt;/code&gt; section:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;/// &amp;lt;summary&amp;gt;
/// Does some work.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;remarks&amp;gt;See &amp;lt;seealso href="www.alwaysdeveloping.net" /&amp;gt; for more information&amp;lt;/remarks&amp;gt;
public Task DoWorkAsync()
{
    return Task.CompletedTask;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/after-remarks.png" alt="Clickable URL in remarks"&gt;&lt;/p&gt;
&lt;h2 id="sharing-comments"&gt;Sharing comments&lt;/h2&gt;
&lt;p&gt;Comments can be shared, which is especially useful when one has a &lt;code&gt;method&lt;/code&gt; and an &lt;code&gt;async version&lt;/code&gt; of the same method. This is done using the &lt;code&gt;inheritdoc&lt;/code&gt; and &lt;code&gt;cref&lt;/code&gt; keywords:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;/// &amp;lt;summary&amp;gt;
/// Does some work, but with parameters supplied
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name="length"&amp;gt;The length of the work&amp;lt;/param&amp;gt;
/// &amp;lt;param name="value"&amp;gt;The value of the work&amp;lt;/param&amp;gt;
/// &amp;lt;param name="extraWork"&amp;gt;An action delegate to specify 
/// any additional work which might need to be done&amp;lt;/param&amp;gt;
public void DoWorkWithParameters(int length, string value, Action extraWork) { }

/// &amp;lt;inheritdoc cref="DoWorkWithParameters(int, string, Action)"/&amp;gt;
public Task DoWorkWithParametersAsync(int length, string value, Action extraWork)
{
    return Task.CompletedTask;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both methods now show the same comments:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/work-params.png" alt="Method with comments"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/work-params-async.png" alt="Method with inherited comments"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="referencing-parameters"&gt;Referencing parameters&lt;/h2&gt;
&lt;p&gt;Parameters can be referenced in the comments using the &lt;code&gt;paramref&lt;/code&gt; keyword, making it clearer how the method works and how the parameters are used:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;/// &amp;lt;summary&amp;gt;
/// Will check if the job with &amp;lt;paramref name="jobName"/&amp;gt; is in progress or has completed
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name="jobName"&amp;gt;The name of the job to check. 
/// If set to null, a check is performed on any job&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;True if the job specified by &amp;lt;paramref name="jobName"/&amp;gt;
/// is still processing, otherwise false&amp;lt;/returns&amp;gt;
public bool IsWorkInProgress(string jobName)
{
    return false;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The parameter name is now highlighted whereever it is referenced.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/paramref.png" alt="Method using paramref"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="language-keywords"&gt;Language keywords&lt;/h2&gt;
&lt;p&gt;Language keywords can also be highlighted using &lt;code&gt;langword&lt;/code&gt;. If we take the previous example, and update all the C# keywords (true, false) to indicate they are language keywords:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;/// &amp;lt;summary&amp;gt;
/// Will check if the job with &amp;lt;paramref name="jobName"/&amp;gt; is in progress or has completed.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name="jobName"&amp;gt;The name of the job to check.&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;&amp;lt;see langword="true"/&amp;gt; if the job specified by &amp;lt;paramref name="jobName"/&amp;gt; 
/// is still processing, otherwise &amp;lt;see langword="false"/&amp;gt;&amp;lt;/returns&amp;gt;
public bool IsWorkInProgress(string jobName)
{
    return false;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The language keywords are now highlighted:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/lang-keyword.png" alt="Language keywords highlighted"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="libraries"&gt;Libraries&lt;/h2&gt;
&lt;p&gt;Updating comments with these features improves the usability of the code - however if developing a shared library (a NuGet package for example), there are some additional steps which need to be done to enable the comments being available to users of the library.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;GenerateDocumentationFile&lt;/code&gt; option needs to be enabled in the csproj:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;net6.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;ImplicitUsings&amp;gt;enable&amp;lt;/ImplicitUsings&amp;gt;
    &amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;
    &amp;lt;GenerateDocumentationFile&amp;gt;true&amp;lt;/GenerateDocumentationFile&amp;gt;
&amp;lt;/PropertyGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the code is compiled, an XML file will now be generated containing all the comments - which should then be included as part of the NuGet package to make the comments available.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;As a library author, for public, but mostly for internal corporate packages - I have found adding comments to be very useful in explaining and conveying to the user how a method and class works, lessening the number of questions and queries received. The additional features mentioned above will take the commentary to another level.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/Nick_Craver/status/1516050534670741505"&gt;Nick Craver Tweet&lt;/a&gt;&lt;/p&gt;
&lt;!--?# DailyDrop ?--&gt;94: 10-06-2022&lt;!--?#/ DailyDrop ?--&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/09-parameter-binding</id>
		<title>Binding a query parameter to an object</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/09-parameter-binding" />
		<updated>2022-06-09T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;Coming in .NET 7, endpoint query parameter can automatically me mapped to an object by adding a &lt;code&gt;TryParse&lt;/code&gt; method to the object. In this post we'll compare the traditional query parameter functionality, and compare it with the newly added functionality.&lt;/p&gt;
&lt;p&gt;This functionality is available now in the the .NET 7 preview release, and subject to change by the final .NET 7 release.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="use-case"&gt;Use case&lt;/h2&gt;
&lt;p&gt;In our use case, we have a search page on an e-commerce website. Query string parameters can be send as part of the URL to determine which &lt;em&gt;category&lt;/em&gt; to display, which &lt;em&gt;page number&lt;/em&gt; to display and &lt;em&gt;how many items per page&lt;/em&gt; to display.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="separate-parameters"&gt;Separate parameters&lt;/h3&gt;
&lt;p&gt;The above can be achieved using three separate query string parameters. A minimal endpoint can be defined with 3 parameters, matching the query string parameter names - the query string parameters will automatically be mapped to the endpoint parameters by ASPNET Core.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;app.MapGet(&amp;quot;/api/searchpage&amp;quot;, (string category, int pageIndex, int pageSize) =&amp;gt;
{
    return $&amp;quot;Returning page '{pageIndex}' of size &amp;quot; +
        $&amp;quot;'{pageSize}' for category '{category}'&amp;quot;;

});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This endpoint can be access on the URL &lt;code&gt;/api/searchpage?category=pants&amp;amp;pageIndex=3&amp;amp;pageSize=50&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This solution will work, but there is also another cleaner (although, that is subjective) way to define the endpoint and handle the query string.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="binding-to-an-object"&gt;Binding to an object&lt;/h3&gt;
&lt;p&gt;Let's update the endpoint to take an object instead of the three separate parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;app.MapGet(&amp;quot;/api/searchpageoptions&amp;quot;, (SearchPageOptions searchOptions) =&amp;gt;
{
    return $&amp;quot;Returning page '{searchOptions.PageIndex}' of size &amp;quot; +
        $&amp;quot;'{searchOptions.PageSize}' for category '{searchOptions.Category}'&amp;quot;;
    
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;code&gt;SearchPageOptions&lt;/code&gt; defined as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class SearchPageOptions
{
    public string Category { get; set; }

    public int PageIndex { get; set; }

    public int PageSize { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we try run this as it, an exception will occur - this is because by &lt;code&gt;default ASPNET Core will infer and try map the body of the request to an object parameter to the endpoint&lt;/code&gt;, and GET requests do not allow body parameters.&lt;/p&gt;
&lt;p&gt;We need to instruct ASPNET Core how to map from the query string to the object - and thankfully this is very simple.&lt;/p&gt;
&lt;p&gt;We are however required to make a change to the format of the query string - only a single query string parameter can be mapped to an object, so the three query string parameters need to be converted to one parameter in &lt;code&gt;json format&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can add a &lt;code&gt;TryParse&lt;/code&gt; method to the &lt;em&gt;SearchPageOptions&lt;/em&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class SearchPageOptions
{
    public string Category { get; set; }

    public int PageIndex { get; set; }

    public int PageSize { get; set; }

    public static bool TryParse(string value, out SearchPageOptions result)
    {
        if (value is null)
        {
            result = default;
            return false;
        }

        JsonSerializerOptions options = new()
        {
            PropertyNameCaseInsensitive = true
        };
        result = JsonSerializer.Deserialize&amp;lt;SearchPageOptions&amp;gt;(value, options);

        return true;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ASPNET Core will look for, and call this method with the relevent query string parameter, allowing the method to try convert the parameter to the object. With the above changes to the endpoint and &lt;em&gt;SearchPageOptions&lt;/em&gt; class, the endpoint can now be called using:&lt;br /&gt;
&lt;code&gt;/api/searchpageoptions?searchOptions={&amp;quot;category&amp;quot;:&amp;quot;pants&amp;quot;,&amp;quot;pageIndex&amp;quot;:3,&amp;quot;pageSize&amp;quot;:50}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Notice the information conveyed is the same, just in a simple json parameter now, instead of three separate parameters - allowing for the conversion of the query string parameter to a &lt;em&gt;SearchPageOptions&lt;/em&gt; instance.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Both methods above result in the same outcome, just using slightly different techniques - but in the end it comes down to personal preference. Personally, I prefer the binding method, with the cleaner and concise method arguments. This approach however does result in a slightly more complicated query string format - the tradeoffs of each approach should be considered, and the best one for your application chosen.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://jaliyaudagedara.blogspot.com/2022/04/aspnet-core-custom-controller-action.html"&gt;ASP.NET Core: Custom Controller Action Parameter Binding using TryParse in Minimal APIs &lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;92: 09-06-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/08-ienumerable-visualizer</id>
		<title>Viewing collections with IEnumerable Visualizer</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/08-ienumerable-visualizer" />
		<updated>2022-06-08T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;When coding a system which makes use of collections of data (even reasonably small collections), inspecting, debugging and discovering issues with the dataset can be very difficult and cumbersome.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;IEnumerable Visualizer&lt;/code&gt;, available in Visual Studio 17.2, (Visual Studio 2022), aims to make this tedious process easier allowing for easier inspection of collections of data in Visual Studio.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="watch-window"&gt;Watch window&lt;/h2&gt;
&lt;p&gt;When debugging, the starting point for viewing the data being operated on, is the &lt;code&gt;Watch window&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/watch-window.png" alt="Watch Window"&gt;&lt;/p&gt;
&lt;p&gt;The issue with the Watch window, is when working with collections, its difficult to find a specific record. There is no useful identifying information immediately available without expanding each row one by one to find the relevant record. This is just not sustainable as the collection size grows.&lt;/p&gt;
&lt;p&gt;In addition, there is no way to export the collection of information so that it would be inspected in another tool (such as Excel, for example).&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="watch-and-tostring"&gt;Watch and ToString&lt;/h2&gt;
&lt;p&gt;One method for making it easier to find the relevent record(s), is to overwrite the &lt;code&gt;ToString&lt;/code&gt; method of the object - in this example, the &lt;code&gt;Song&lt;/code&gt; object.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Song
{
    public int Id { get; set; } 

    public string Name { get; set; }

    public string Artist { get; set; }

    public int YearReleased { get; set; }

    public int LengthInSeconds { get; set; }

    public override string ToString()
    {
        return $"Song `{Name}` by '{Artist} released " +
            $"in '{YearReleased}' and is '{LengthInSeconds}' seconds long";
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The ouput of the &lt;code&gt;ToString&lt;/code&gt; method, pulls through to the &lt;code&gt;Watch window&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/watch-tostring.png" alt="Watch Window with ToString"&gt;&lt;/p&gt;
&lt;p&gt;At least now one has a visual cue as to the contents of each record without having to expand the row in the window. However, it still requires inspecting each row, which is not sustainable with thousands of rows.
Also, it might not be possible to add a &lt;code&gt;ToString&lt;/code&gt; method if the entity is owned by a third party.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="ienumerable-visualizer"&gt;IEnumerable Visualizer&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;IEnumberable Visualizer&lt;/code&gt; solves many of the issues (but not all) - this window is available by clicking the magnifying glass for the collection, in the Watch window:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/visualizer-location.png" alt="IEnumberable Visualizer location"&gt;&lt;/p&gt;
&lt;p&gt;This icon will bring up the &lt;code&gt;IEnumberable Visualizer&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/visualizer.png" alt="IEnumberable Visualizer"&gt;&lt;/p&gt;
&lt;p&gt;This windows allows for the data to be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sorted by any column&lt;/li&gt;
&lt;li&gt;Exported to Excel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will greatly increase the ability to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find the relevent record&lt;/li&gt;
&lt;li&gt;Perform additional operations on the data if required (sums, filtering) via exporting&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Having worked with large collections before, this new visualizer is definitely going ease the pain and difficulty collection inspection brings! There are two future enhancements I feel would add great value to the already useful feature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A column in the visualizer which indicates the index of the record in the underlying collection. This will make it easier to find the record in the Watch window to perform updates on the data&lt;/li&gt;
&lt;li&gt;The ability to filter data in the visualizer, making it even easier to find and search for data.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/view-net-collections-with-the-new-ienumerable-debugger-visualizer/?WT.mc_id=DOP-MVP-4025064"&gt;View .NET collections with the new IEnumerable Debugger Visualizer&lt;/a&gt;&lt;br&gt;
&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-2-is-now-available/#debugging-collections"&gt;Debugging collections&lt;/a&gt;&lt;/p&gt;
&lt;!--?# DailyDrop ?--&gt;91: 08-06-2022&lt;!--?#/ DailyDrop ?--&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
</feed>