<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>https://alwaysdeveloping.net/</id>
	<title />
	<link rel="self" href="https://alwaysdeveloping.net/" />
	<rights>Copyright © 2022</rights>
	<updated>2022-08-23T05:00:50Z</updated>
	<subtitle>always learning | always growing</subtitle>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/23-override-new</id>
		<title>Override vs New behavior</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/23-override-new" />
		<updated>2022-08-23T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;When using &lt;code&gt;polymorphism&lt;/code&gt;, even though on the surface they appear to be doing the same thing, &lt;em&gt;hiding&lt;/em&gt; the functionality of a parent, the &lt;code&gt;override&lt;/code&gt; and &lt;code&gt;new&lt;/code&gt; keywords behave very differently.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Override&lt;/code&gt; will &lt;em&gt;hide&lt;/em&gt; the parent method invoked, and the &lt;em&gt;overridden&lt;/em&gt; method on the child will be called. However when &lt;code&gt;new&lt;/code&gt; is used on a method, when invoked, the &lt;em&gt;parent&lt;/em&gt; method will be called.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="definition-recap"&gt;Definition recap&lt;/h2&gt;
&lt;p&gt;A lot of keywords used in the introduction above, so a quick recap on some of the definitions of the keywords.&lt;/p&gt;
&lt;h3 id="polymorphism"&gt;Polymorphism&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Polymorphism&lt;/code&gt; allows for objects of a &lt;em&gt;derived class&lt;/em&gt; can be treated as objects of the &lt;em&gt;parent class&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For example, when a &lt;em&gt;Child&lt;/em&gt; class inherits from a &lt;em&gt;Parent&lt;/em&gt; class, then the following is valid:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// defined as type Parent
// but assigned a Child
Parent childEntity = new Child();
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="virtual"&gt;Virtual&lt;/h3&gt;
&lt;p&gt;Often the &lt;em&gt;Parent&lt;/em&gt; class will defined methods as &lt;code&gt;virtual&lt;/code&gt; (which can also be applied to properties, indexers), which allows for it to be explicitly overridden in the &lt;em&gt;Child&lt;/em&gt; class.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Parent
{
    public virtual void Hello()
    {
        Console.WriteLine(&amp;quot;Hello, I am Parent&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="override"&gt;Override&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;override&lt;/code&gt; keyword is used on a &lt;em&gt;Child&lt;/em&gt; class, to &lt;code&gt;override&lt;/code&gt; the behavior defined by the &lt;em&gt;Parent&lt;/em&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Child : Parent
{
    // Override the Parent Hello method
    public override void Hello()
    {
        Console.WriteLine(&amp;quot;Hello, I am Child&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="new"&gt;New&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;new&lt;/code&gt; keyword can be used as a declaration modifier to explicitly &lt;em&gt;hide&lt;/em&gt; the base class functionality:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Child : Parent
{
    // Hide the Parent Hello method
    public new void Hello()
    {
        Console.WriteLine(&amp;quot;Hello, I am Child&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="new-vs-override"&gt;New vs override&lt;/h2&gt;
&lt;p&gt;There is a subtle difference between the definitions of the &lt;code&gt;override&lt;/code&gt; and &lt;code&gt;new&lt;/code&gt; keywords:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;override&lt;/code&gt; will &lt;strong&gt;override&lt;/strong&gt; the parent method&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt; will &lt;strong&gt;hide&lt;/strong&gt; the parent method&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What all this comes down to, is the following - consider a &lt;em&gt;Parent&lt;/em&gt; and two different &lt;em&gt;Child&lt;/em&gt; classes, one using &lt;code&gt;new&lt;/code&gt; and one using &lt;code&gt;override&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Parent
{
    public virtual string Ping()
    {
        return $&amp;quot;Response from {nameof(Parent)}&amp;quot;;
    }
}

public class OverrideChild : Parent
{
    public override string Ping()
    {
        return $&amp;quot;Response from {nameof(OverrideChild)}&amp;quot;;
    }
}

public class NewChild : Parent
{
    public new string Ping()
    {
        return $&amp;quot;Response from {nameof(NewChild)}&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we declare an instance of each of the three types and call the &lt;em&gt;Ping&lt;/em&gt; method, we get a response from the method on the respective type:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Parent parent = new Parent();
NewChild newChild = new NewChild();
OverrideChild overChild = new OverrideChild();

Console.WriteLine(parent.Ping());
Console.WriteLine(newChild.Ping());
Console.WriteLine(overChild.Ping());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resulting output being:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Response from Parent
Response from NewChild
Response from OverrideChild
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far, so good - all is as expected.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="polymorphism-1"&gt;Polymorphism&lt;/h3&gt;
&lt;p&gt;However, when using &lt;code&gt;polymorphism&lt;/code&gt; then behavior starts to change.&lt;/p&gt;
&lt;p&gt;In the below, each type is &lt;code&gt;declare of type Parent by assigned one of the three different types&lt;/code&gt; (this is allowed, because of &lt;em&gt;polymorphism&lt;/em&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// all type Parent
// but assigned different types
Parent parent = new Parent();
Parent overChild = new OverrideChild();
Parent newChild = new NewChild();

Console.WriteLine(parent.Ping()); 
Console.WriteLine(overChild.Ping()); 
Console.WriteLine(newChild.Ping()); 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the output is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Response from Parent
Response from OverrideChild
Response from Parent
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From this we can see that with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;override&lt;/code&gt;: there is a &lt;em&gt;link&lt;/em&gt; between the child and parent entities, so when the method is called the runtime knows to call the child entity method (even though the type is &lt;em&gt;Parent&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt;: the parent method is hidden by the child method, but there is no &lt;em&gt;link&lt;/em&gt; between them, so calling the method on a &lt;em&gt;Parent&lt;/em&gt; entity (even though it was assigned a &lt;em&gt;Child&lt;/em&gt;) will call the parent entity method&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Interesting behavior from the runtime which one should be aware of, otherwise unexpended results might occur. There is no &lt;em&gt;right&lt;/em&gt; or &lt;em&gt;wrong&lt;/em&gt; modifier to use, it will depend on the use case, how the classes are defined and used, and how they should behave.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://dotnetcoretutorials.com/2022/05/13/override-vs-new-polymorphism-in-c-net/"&gt;Override vs New Polymorphism In C# .NET&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;144: 23-08-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/22-unsafe-cast</id>
		<title>Unsafe cast for performance</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/22-unsafe-cast" />
		<updated>2022-08-22T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;UnSafe static class&lt;/code&gt; can be used to perform an &lt;code&gt;Unsafe&lt;/code&gt; cast, which can lead to performance improvements - however it is only recommended in instances when a &lt;code&gt;safe cast ((T)o) would have guaranteed to be successful&lt;/code&gt;.  Performing an unsafe cast when a safe cast would have been unsuccessful could result in application instability.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="safe-casting"&gt;Safe casting&lt;/h2&gt;
&lt;p&gt;When performing a &lt;code&gt;safe cast&lt;/code&gt;, runtime safety checks are performed, and if the cast is invalid then an &lt;code&gt;InvalidCastException&lt;/code&gt; will be thrown.&lt;/p&gt;
&lt;p&gt;The below method is a &lt;code&gt;safe cast&lt;/code&gt;, as the runtime will prevent the cast from taking place (and throw the &lt;em&gt;InvalidCastException&lt;/em&gt;) if &lt;em&gt;object o&lt;/em&gt; is not compatible with type Product:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public Product GetProduct(object o)
{
    return (Product)o;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another approach is to use the &lt;code&gt;is&lt;/code&gt; keyword, which will not thrown the exception, but return &lt;code&gt;false&lt;/code&gt; if the cast is not compatible (and actually perform the cast if it is compatible):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public Product GetProductIs(object o)
{
    if (o is Product p)
        return p;

    return null;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For almost all use cases, one of the above techniques will be suitable.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="unsafe-casting"&gt;UnSafe casting&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;static Unsafe class&lt;/code&gt; can be used to perform a cast, but without any of the safety checks being performed. Performing an invalid cast will not lead to the &lt;code&gt;InvalidCastException&lt;/code&gt; being thrown, just to potential system instability.&lt;/p&gt;
&lt;p&gt;Performing an &lt;code&gt;unsafe cast&lt;/code&gt; is almost as simple as performing a &lt;em&gt;safe cast&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public Product GetProductUnsafe(object o)
{
    // case object o to Product
    return Unsafe.As&amp;lt;Product&amp;gt;(o);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As no safety checks are performed by the runtime, some performance gains can be achieved by using this approach - but let's test just how big of a gain.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="performance"&gt;Performance&lt;/h2&gt;
&lt;p&gt;Benchmarking the three different techniques, each with a &lt;code&gt;null value&lt;/code&gt; and with a &lt;code&gt;Product instance&lt;/code&gt; (a valid cast):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;o&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Error&lt;/th&gt;
&lt;th style="text-align: right;"&gt;StdDev&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Median&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Ratio&lt;/th&gt;
&lt;th style="text-align: right;"&gt;RatioSD&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;NormalCast&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.2752 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0331 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0294 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.2763 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CastUsingIs&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.4600 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0369 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0327 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.4688 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;5.37&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.67&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UnsafeCast&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0447 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0428 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0761 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0000 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.16&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NormalCast&lt;/td&gt;
&lt;td&gt;Product&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.1189 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0353 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0275 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.1164 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.000&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CastUsingIs&lt;/td&gt;
&lt;td&gt;Product&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.7099 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0511 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0453 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.7091 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;6.290&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UnsafeCast&lt;/td&gt;
&lt;td&gt;Product&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0000 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0000 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0000 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0000 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.000&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Results may vary depending on the use case, but here, &lt;code&gt;using Unsafe is effectively is free&lt;/code&gt; and takes no time at all.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Using &lt;code&gt;Unsafe&lt;/code&gt; is only recommended in the narrow use case where one knows using a &lt;code&gt;safe cast will succeed&lt;/code&gt; - leveraging &lt;code&gt;Unsafe&lt;/code&gt; in this case will result in performance gains.
However, the gain is on the &lt;em&gt;nanoseconds&lt;/em&gt; scale, so is not likely to be noticeable - results may vary depending on the use ase though, and if performing a large number of slow &lt;em&gt;casts&lt;/em&gt;, then potentially a safe &lt;code&gt;Unsafe&lt;/code&gt; cast result in a noticeable difference.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.tabsoverspaces.com/233888-what-is-the-cost-of-casting-in-net-csharp?utm_source=feed/"&gt;What is the cost of casting in .NET (C#)?&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;143: 22-08-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/19-linq-oftype</id>
		<title>Filter IEnumerable with OfType</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/19-linq-oftype" />
		<updated>2022-08-19T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;LINQ provides a built in method to filter collection contents &lt;em&gt;by type&lt;/em&gt;, &lt;code&gt;OfType&amp;lt;&amp;gt;&lt;/code&gt;. This is considerably easier and more streamline than the alternative of using a &lt;code&gt;Where&lt;/code&gt; in combination with a &lt;code&gt;Select&lt;/code&gt; (which I had previously been using)&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;p&gt;In the below example, the setup is as follows:&lt;/p&gt;
&lt;p&gt;We have three interfaces:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public interface IBaseType {}

public interface ITypeA
{
    void ExecuteTypeAProcessing();
}

public interface ITypeB
{
    void ExecuteTypeBProcessing();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And two classes which implement these interfaces:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// implement the base interface and TypeA interface
public class TypeA : IBaseType, ITypeA
{
    public void ExecuteTypeAProcessing()
    {
        Console.WriteLine($&amp;quot;{nameof(ExecuteTypeAProcessing)} has been called&amp;quot;);
    }
}

// implement the base interface and TypeB interface
public class TypeB : IBaseType, ITypeB
{
    public void ExecuteTypeBProcessing()
    {
        Console.WriteLine($&amp;quot;{nameof(ExecuteTypeBProcessing)} has been called&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A list of &lt;code&gt;IBaseType&lt;/code&gt; has also been initialized, and contains a combination of &lt;em&gt;TypeA&lt;/em&gt; and &lt;em&gt;TypeB&lt;/em&gt; instances (this is possible, as both types implement &lt;em&gt;IBaseType&lt;/em&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;List&amp;lt;IBaseType&amp;gt; types = new()
{
  new TypeA(),
  new TypeA(),
  new TypeB(),
  new TypeA(),
  new TypeB(),
  new TypeB(),
  new TypeA(),
};
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="where-with-select"&gt;Where with Select&lt;/h2&gt;
&lt;p&gt;This is the method I've been using prior to knowing there was an alternative. It does work, but is very verbose.&lt;/p&gt;
&lt;p&gt;Suppose we want to execute the &lt;em&gt;ExecuteTypeAProcessing&lt;/em&gt; method on instances of &lt;em&gt;ITypeA&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;foreach(var type in types
    .Where(t =&amp;gt; t is ITypeA)
    .Select(t =&amp;gt; t as ITypeA))
{
    type.ExecuteTypeAProcessing();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another method, this time executing &lt;em&gt;ExecuteTypeBProcessing&lt;/em&gt; on instances of &lt;em&gt;ITypeB&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;types.Where(t =&amp;gt; t is ITypeB)
    .Select(t =&amp;gt; t as ITypeB)
    .ToList()
    .ForEach(t =&amp;gt; t.ExecuteTypeBProcessing());
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="oftype"&gt;OfType&lt;/h2&gt;
&lt;p&gt;Only recently did I come across the &lt;code&gt;OfType&lt;/code&gt; method on &lt;em&gt;IEnumerable&lt;/em&gt; - not that it was hidden in any way, I just never looked for it, as the above &lt;code&gt;Where + Select&lt;/code&gt; method worked for my needs. However &lt;code&gt;OfType&lt;/code&gt; greatly simplifies the above code.&lt;/p&gt;
&lt;p&gt;Executing &lt;em&gt;ExecuteTypeAProcessing&lt;/em&gt; on instances of &lt;em&gt;ITypeA&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;foreach(var type in types.OfType&amp;lt;ITypeA&amp;gt;())
{
    type.ExecuteTypeAProcessing();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Executing &lt;em&gt;ExecuteTypeBProcessing&lt;/em&gt; on instances of &lt;em&gt;ITypeB&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;types.OfType&amp;lt;ITypeB&amp;gt;()
    .ToList()
    .ForEach(t =&amp;gt; t.ExecuteTypeBProcessing());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Either option is simpler, more concise and more readable than the &lt;em&gt;Where + Select&lt;/em&gt; method.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Nothing groundbreaking learnt today - but never-the-less something very interesting and useful, which will definitely see frequent usage.&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;142: 19-08-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/18-enum-bit-flags</id>
		<title>Combining enum values</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/18-enum-bit-flags" />
		<updated>2022-08-18T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;bitwise logical operator (|)&lt;/code&gt; can be used to &lt;em&gt;combine enum values&lt;/em&gt; when assigning to a variable, but they can also be used when &lt;code&gt;defining the enum&lt;/code&gt; to create enum values which are a &lt;code&gt;combination of other enum values&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="combine-variable"&gt;Combine variable&lt;/h2&gt;
&lt;p&gt;This is the more common (in my experience) usage of combining enums - assigning enum value(s) to a variable.&lt;/p&gt;
&lt;p&gt;Consider the following enum:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Flags]
enum OrderStatus
{
    New = 1,
    Processing = 2,
    Reserved = 4,
    Paid = 8,
    Delivered = 16,
    Cancelled = 32
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could indicate that an order is &lt;em&gt;Paid&lt;/em&gt; but also been &lt;em&gt;Cancelled&lt;/em&gt; by doing the follow:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;OrderStatus status = OrderStatus.Paid | OrderStatus.Cancelled;

Console.WriteLine($&amp;quot;Is order Paid? {status.HasFlag(OrderStatus.Paid)}&amp;quot;);
Console.WriteLine($&amp;quot;Is order Cancelled? {status.HasFlag(OrderStatus.Cancelled)}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the output being:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Is order Paid? True
Is order Cancelled? True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;bitwise logical operator (|)&lt;/code&gt; can also be used when &lt;code&gt;declaring the enum&lt;/code&gt; to combine statues.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="combine-declaration"&gt;Combine declaration&lt;/h2&gt;
&lt;p&gt;Consider the same enum from above:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Flags]
enum OrderStatus
{
    New = 1,
    Processing = 2,
    Reserved = 4,
    Paid = 8,
    Delivered = 16,
    Cancelled = 32
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose we wanted two methods to determine if a order is currently &lt;code&gt;Open&lt;/code&gt; (still processing to do) or if it is &lt;code&gt;Closed&lt;/code&gt; (no more processing to do).&lt;/p&gt;
&lt;p&gt;With the enums as they are, something similar to this would need to be done:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// check all the statuses considered 'open'
bool IsOrderOpen(OrderStatus status) =&amp;gt; status.HasFlag(OrderStatus.New) ||
        status.HasFlag(OrderStatus.Processing) ||
        status.HasFlag(OrderStatus.Reserved) ||
        status.HasFlag(OrderStatus.Paid);

// check all the statuses considered 'closed'
bool IsOrderClosed(OrderStatus status) =&amp;gt; status.HasFlag(OrderStatus.Delivered) ||
        status.HasFlag(OrderStatus.Cancelled);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each time a new status is added and the enum changes, the developer would need to remember to come in and update each method as well.&lt;/p&gt;
&lt;p&gt;A cleaner approach, is to &lt;code&gt;define a new status, and use it to combine with other statuses&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Consider this &lt;code&gt;updated enum&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Flags]
enum OrderStatus
{
    New = 1 | 64,
    Processing = 2 | 64,
    Reserved = 4 | 64,
    Paid = 8 | 64,
    Delivered = 16 | 128,
    Cancelled = 32 | 128,
    Open = 64,
    Closed = 128
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Two new statuses, &lt;code&gt;Open&lt;/code&gt; and &lt;code&gt;Closed&lt;/code&gt;, have been defined, with each other status being updated to indicate it as being either &lt;em&gt;Open&lt;/em&gt; or &lt;em&gt;Closed&lt;/em&gt;.
For example &lt;code&gt;Processing = 2 | 64,&lt;/code&gt; effectively means: &lt;code&gt;an order with a status of Processing is Processing but also Open&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To check if an order is &lt;code&gt;Open&lt;/code&gt; or &lt;code&gt;Closed&lt;/code&gt; now, all that is required is the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;bool IsOrderOpen(OrderStatus status) =&amp;gt; status.HasFlag(OrderStatus.Open);
bool IsOrderClosed(OrderStatus status) =&amp;gt; status.HasFlag(OrderStatus.Closed);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the methods:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// the status is not set explicitly to 'Open' or 'Closed'
var status = OrderStatus.Reserved;

Console.WriteLine($&amp;quot;Is order open? {IsOrderOpen(status)}&amp;quot;);
Console.WriteLine($&amp;quot;Is order closed? {IsOrderClosed(status)}&amp;quot;);

// just to confirm a check on the original status 
// still works
Console.WriteLine($&amp;quot;Is order reserved? {status.HasFlag(OrderStatus.Reserved)}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Is order open? True
Is order closed? False
Is order reserved? True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This version of the code is definitely &lt;code&gt;much cleaner&lt;/code&gt;, and much &lt;code&gt;easier to maintain&lt;/code&gt;!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Using the &lt;em&gt;bitwise logical operator (|)&lt;/em&gt; on enum definition is a useful technique I was not aware of. It facilities cleaner code, and makes it easier for the developer to contain enum logic all in one place.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.reddit.com/r/csharp/comments/vzph36/enum_bitshifting_syntax_for_multiple_flags_during/"&gt;Enum bit-shifting syntax for multiple flags during enum declaration&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;141: 18-08-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/17-parallelenumerable</id>
		<title>Parallel processing with ParallelEnumerable </title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/17-parallelenumerable" />
		<updated>2022-08-17T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;Linq has built in parallel functionality, available in the &lt;code&gt;ParallelEnumerable&lt;/code&gt; class.  This functionality is available as &lt;em&gt;extension methods&lt;/em&gt; on &lt;code&gt;ParallelQuery&lt;/code&gt;, which is generated by calling &lt;code&gt;AsParallel&lt;/code&gt; on an &lt;em&gt;IEnumerable&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;p&gt;The usage of the functionality offered by &lt;code&gt;ParallelEnumerable&lt;/code&gt; is very similar (and for the most part, the same) to normal Linq method usage.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;access&lt;/em&gt; the root of the parallel functionality,&lt;code&gt;ParallelQuery&lt;/code&gt;, all that is required is the &lt;code&gt;AsParallel()&lt;/code&gt; method to be called on an &lt;em&gt;IEnumerable&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;IEnumerable&amp;lt;int&amp;gt; array = Enumerable.Range(1, 1000);
ParallelQuery&amp;lt;int&amp;gt; parallelQuery = array.AsParallel();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the ParallelQuery instance, traditional Linq methods can still available:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// output: 750,5
int average = parallelQuery
    .Where(i =&amp;gt; i &amp;gt; 500)
    .Average(); 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, there is now also &lt;em&gt;additional methods&lt;/em&gt; available, for example &lt;code&gt;ForAll&lt;/code&gt; which will perform an &lt;em&gt;Action&lt;/em&gt; on each element, but in &lt;strong&gt;parallel&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var outputArray = new int[1000];
parallelQuery.ForAll(i =&amp;gt;
{
    outputArray[i - 1] = i * i;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's benchmark this to see how it performs against other parallel and not parallel operations which achieve the same outcome.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="benchmark"&gt;Benchmark&lt;/h2&gt;
&lt;p&gt;In this set of benchmarks, we are operating on a &lt;em&gt;IEnumerable&amp;lt;int&amp;gt;&lt;/em&gt; with 100 items, and for each item in the source, the &lt;em&gt;PerformCalculation&lt;/em&gt; method will be called:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// the source items
IEnumerable&amp;lt;int&amp;gt; array = Enumerable.Range(1, 100);

// the method invoked
void PerformCalculation(int i)
{
    _ = i * i * i;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following techniques were benchmarked:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;List.ForEach:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForEachList()
{
    array.ToList()
       .ForEach(i =&amp;gt; PerformCalculation(i));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Foreach over an Array:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForeachOverArray()
{
    foreach (var i in array.ToArray())
    {
        PerformCalculation(i);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ParallelForEach:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ParallelForEach()
{
    Parallel.ForEach(array, PerformCalculation);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ParallelQuery.ForAll:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ParallelQueryForAll()
{
    array
    .AsParallel()
    .ForAll(i =&amp;gt; PerformCalculation(i));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The results:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Error&lt;/th&gt;
&lt;th style="text-align: right;"&gt;StdDev&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Ratio&lt;/th&gt;
&lt;th style="text-align: right;"&gt;RatioSD&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen 0&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen 1&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Allocated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ListForEach&lt;/td&gt;
&lt;td style="text-align: right;"&gt;322.85 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;5.651 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;5.286 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0825&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;520 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ForeachOverArray&lt;/td&gt;
&lt;td style="text-align: right;"&gt;91.40 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.770 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.656 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.28&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.01&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0675&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;424 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ParallelQueryForAll&lt;/td&gt;
&lt;td style="text-align: right;"&gt;13,481.85 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;172.827 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;161.663 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;41.77&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.86&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.0599&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0610&lt;/td&gt;
&lt;td style="text-align: right;"&gt;12,585 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ParallelForEach&lt;/td&gt;
&lt;td style="text-align: right;"&gt;7,978.07 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;41.364 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;34.540 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;24.70&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.43&lt;/td&gt;
&lt;td style="text-align: right;"&gt;4.6844&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.1068&lt;/td&gt;
&lt;td style="text-align: right;"&gt;24,175 B&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;parallel versions are slow&lt;/code&gt; - &lt;strong&gt;VERY&lt;/strong&gt; slow compared to just iterating over the collection of items in sequence.&lt;/p&gt;
&lt;p&gt;Surely doing processing in parallel should make things process quicker overall? Generally yes - in this case however, the actual work being performed (the &lt;em&gt;PerformCalculation&lt;/em&gt; method) is done so quickly, that the &lt;code&gt;overhead of creating and managing the parallel tasks is a detriment to performance&lt;/code&gt; vs just operating on the items in sequence.&lt;/p&gt;
&lt;p&gt;However, what if the work being performed took slightly longer....&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="benchmark-v2"&gt;Benchmark v2&lt;/h2&gt;
&lt;p&gt;We'll run the exact same benchmarks, with the same array size, but now the &lt;em&gt;PerformCalculation&lt;/em&gt; method will &lt;code&gt;take 2ms longer&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;void PerformCalculation(int i)
{
    _ = i * i * i;
    // simulate a longer 
    // running process
    Thread.Sleep(2);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results of round 2:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Error&lt;/th&gt;
&lt;th style="text-align: right;"&gt;StdDev&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Ratio&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Allocated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ListForEach&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1,536.90 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.679 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.506 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ForeachOverArray&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1,534.54 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.702 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.528 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ParallelQueryForAll&lt;/td&gt;
&lt;td style="text-align: right;"&gt;152.84 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.730 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.683 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.10&lt;/td&gt;
&lt;td style="text-align: right;"&gt;13 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ParallelForEach&lt;/td&gt;
&lt;td style="text-align: right;"&gt;71.86 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;7.165 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;20.788 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.07&lt;/td&gt;
&lt;td style="text-align: right;"&gt;99 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;parallel versions are now 10-20 times faster!&lt;/code&gt;. The &lt;em&gt;Parallel.ForEach&lt;/em&gt; is &lt;code&gt;twice as fast&lt;/code&gt; as the &lt;em&gt;ParallelEnumerable.ForAll&lt;/em&gt;, but uses &lt;code&gt;7 times the amount of memory&lt;/code&gt; (and both parallel techniques use vastly more memory in comparison to the basic loops)&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;There are a number of different techniques to solve a use case such as this - each with its own pros and cons, which would need to be evaluated for each use case. It's important to know about each technique, so a thorough evaluation can be done. Results may vary based on collection size, and process time, but based on the above use case:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Low memory usage&lt;/code&gt; is most important? - use a &lt;em&gt;foreach&lt;/em&gt; loop&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fast throughput&lt;/code&gt; is most important? - use &lt;em&gt;Parallel.ForEach&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Good throughput with good memory&lt;/code&gt; usage? - use &lt;em&gt;ParallelEnumerable.ForAll&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.parallelenumerable?view=net-6.0"&gt;ParallelEnumerable Class&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;140: 17-08-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/16-redis-pub-sub</id>
		<title>Pub/Sub with Redis</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/16-redis-pub-sub" />
		<updated>2022-08-16T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;A common use case for &lt;code&gt;Redis&lt;/code&gt; is as a &lt;em&gt;key-value&lt;/em&gt; stored, generally for caching - however, in addition to this &lt;em&gt;key-value&lt;/em&gt; store &lt;code&gt;Redis&lt;/code&gt; also has built in &lt;code&gt;messaging functionality via pub/sub&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="redis-installation"&gt;Redis installation&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt; is not officially supported on Windows - so to use it on Windows, either &lt;code&gt;WSL2&lt;/code&gt; (Windows Subsystem for Linux) has to be used, or the Redis container image (available from &lt;a href="https://hub.docker.com/_/redis"&gt;Docker Hub&lt;/a&gt;) running in &lt;em&gt;Docker Desktop&lt;/em&gt;, for example.&lt;/p&gt;
&lt;p&gt;For the examples below, the &lt;code&gt;Redis&lt;/code&gt; image from &lt;em&gt;Docker Hub&lt;/em&gt; was used, running on &lt;em&gt;Docker Desktop&lt;/em&gt; for Windows.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="subscriber"&gt;Subscriber&lt;/h2&gt;
&lt;p&gt;First let's look at the &lt;code&gt;subscriber&lt;/code&gt; side. A reference is required to the &lt;code&gt;StackExchange.Redis&lt;/code&gt; NuGet package for the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using StackExchange.Redis;

// configure the connection to the Redis endpoint
using ConnectionMultiplexer redis = 
    ConnectionMultiplexer.Connect(&amp;quot;localhost:6379&amp;quot;);
ISubscriber subScriber = redis.GetSubscriber();

// subscribe to the &amp;quot;alwaysdeveloping&amp;quot; channel. This needs to match the channel name
// the publisher is using as well
subScriber.Subscribe(new RedisChannel(&amp;quot;alwaysdeveloping&amp;quot;, 
    RedisChannel.PatternMode.Auto), 
    (channel, message) =&amp;gt;
{
    // this handler method will be called for each message received on the channel
    Console.WriteLine($&amp;quot;[{DateTime.Now}] Message received: {message}&amp;quot;);
});

Console.ReadKey();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Configuring the &lt;code&gt;subscriber&lt;/code&gt; is relatively straight forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define a connection to the specific &lt;code&gt;Redis&lt;/code&gt; endpoint&lt;/li&gt;
&lt;li&gt;Get a &lt;em&gt;subscriber&lt;/em&gt; from the connection&lt;/li&gt;
&lt;li&gt;Subscribe to a specific channel (by name , &lt;em&gt;alwaysdeveloping&lt;/em&gt; in the above)&lt;/li&gt;
&lt;li&gt;Specify the handler method to be called when a message is received&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code will execute until a key is read from the console, waiting for any message to be sent to the channel. When a message is sent to the channel, it will in turn be published to &lt;code&gt;all&lt;/code&gt; subscribers - it is possible to have &lt;code&gt;multiple subscribers&lt;/code&gt;, each subscriber &lt;code&gt;will receive their own copy of the message&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="publisher"&gt;Publisher&lt;/h2&gt;
&lt;p&gt;Next let's look at the &lt;code&gt;publisher&lt;/code&gt; - configuring this is also as straightforward as the subscriber:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using StackExchange.Redis;

// configure the connection to the Redis endpoint
using ConnectionMultiplexer redis = 
    ConnectionMultiplexer.Connect(&amp;quot;localhost:6379&amp;quot;);
ISubscriber sub = redis.GetSubscriber();

// loop 100 times
for (int i = 0; i &amp;lt;= 100; i++)
{
    // generate a unique id for each message
    var id = Guid.NewGuid().ToString();

    // publish to the &amp;quot;alwaysdeveloping&amp;quot; channel
    await sub.PublishAsync(new RedisChannel(&amp;quot;alwaysdeveloping&amp;quot;, 
        RedisChannel.PatternMode.Auto),
        $&amp;quot;Sample message with Id {id}&amp;quot;);

    Console.WriteLine($&amp;quot;Message with Id '{id}' published!&amp;quot;);
    Thread.Sleep(100);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define a connection to the &lt;code&gt;Redis&lt;/code&gt; endpoint&lt;/li&gt;
&lt;li&gt;Get a &lt;em&gt;subscriber&lt;/em&gt; from the connection&lt;/li&gt;
&lt;li&gt;Loops 100 times,&lt;/li&gt;
&lt;li&gt;Publishes a string to a specific channel (by name, &lt;em&gt;alwaysdeveloping&lt;/em&gt; in the above)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id="pubsub-execution"&gt;Pub/Sub Execution&lt;/h2&gt;
&lt;p&gt;Executing the &lt;code&gt;subscriber&lt;/code&gt; first, so it is running waiting for messages, then executing the &lt;code&gt;publisher&lt;/code&gt; yields the following output:&lt;/p&gt;
&lt;p&gt;Sample from the the &lt;strong&gt;Publisher&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Message with Id '1895b2c1-61c1-4be9-8ed2-7c6359018534' published!
Message with Id '01a27c11-984c-481a-b4d0-bc879b13674d' published!
Message with Id '49e799eb-cf4c-4847-a234-d79b8e40cd79' published!
Message with Id '25700248-edbc-4c70-aaef-5aca4cb0f24f' published!
Message with Id '6a4caee2-e9ad-446f-8e2c-156cebdf6a42' published!
Message with Id '061ef1ff-e830-408c-84db-bdf649c8c446' published!
Message with Id '358c78ba-e85a-481a-970a-1c67b2ca8b1d' published!
Message with Id '5101fe4a-86fb-4356-b0db-dea0f4f1a402' published!
Message with Id 'fe944b2c-c945-417c-bb61-8b7eb7bfe8f1' published!
Message with Id '1f6d26a0-35ab-4994-8293-1e2a9e672cee' published!
Message with Id '5e276d80-9ccd-403b-9435-80b8fda0e2d3' published!
Message with Id 'a3ea7ddd-6ac6-4b3e-b35d-1276ce20e1bd' published!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sample from the &lt;code&gt;Subscriber(s)&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;[2022/07/19 21:09:24] Message received: Sample message with Id 1895b2c1-61c1-4be9-8ed2-7c6359018534
[2022/07/19 21:09:24] Message received: Sample message with Id 01a27c11-984c-481a-b4d0-bc879b13674d
[2022/07/19 21:09:24] Message received: Sample message with Id 49e799eb-cf4c-4847-a234-d79b8e40cd79
[2022/07/19 21:09:24] Message received: Sample message with Id 25700248-edbc-4c70-aaef-5aca4cb0f24f
[2022/07/19 21:09:24] Message received: Sample message with Id 6a4caee2-e9ad-446f-8e2c-156cebdf6a42
[2022/07/19 21:09:24] Message received: Sample message with Id 061ef1ff-e830-408c-84db-bdf649c8c446
[2022/07/19 21:09:25] Message received: Sample message with Id 358c78ba-e85a-481a-970a-1c67b2ca8b1d
[2022/07/19 21:09:25] Message received: Sample message with Id 5101fe4a-86fb-4356-b0db-dea0f4f1a402
[2022/07/19 21:09:25] Message received: Sample message with Id fe944b2c-c945-417c-bb61-8b7eb7bfe8f1
[2022/07/19 21:09:25] Message received: Sample message with Id 1f6d26a0-35ab-4994-8293-1e2a9e672cee
[2022/07/19 21:09:25] Message received: Sample message with Id 5e276d80-9ccd-403b-9435-80b8fda0e2d3
[2022/07/19 21:09:25] Message received: Sample message with Id a3ea7ddd-6ac6-4b3e-b35d-1276ce20e1bd
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Configuring &lt;code&gt;Redis pub/sub&lt;/code&gt; is incredibly simple and easy to implement, especially if there is a Redis instance setup (for caching for example). While not entirely comparable, having worked with other similar services such as &lt;em&gt;RabbitMq&lt;/em&gt; and &lt;em&gt;Kafka&lt;/em&gt;, this was by far the simplest to implement.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=80Ke9hsG_RU"&gt;DevMentors - FeedR episode #5&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://redis.io/docs/getting-started/installation/install-redis-on-windows/"&gt;Install Redis on Windows&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;139: 16-08-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/15-pattern-keywords</id>
		<title>Complex Pattern Matching</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/15-pattern-keywords" />
		<updated>2022-08-15T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Pattern matching&lt;/code&gt; can use the &lt;code&gt;is&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; keywords individually in a statement, but also use the keywords together to form an enhanced, more complex statement.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="individual"&gt;Individual&lt;/h2&gt;
&lt;h3 id="is-keyword"&gt;is keyword&lt;/h3&gt;
&lt;p&gt;Common usages of the &lt;code&gt;is&lt;/code&gt; keyword is for &lt;code&gt;null checks&lt;/code&gt; and &lt;code&gt;type tests&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;null check&lt;/code&gt; being performed:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;int? age = 12;

// check if the value of age
// is a valid number (i.e. not null)
if (age is int number)
{
    Console.WriteLine($&amp;quot;'age' has the value of:{number}&amp;quot;);
}
else
{
    Console.WriteLine(&amp;quot;'age' has no value&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A &lt;code&gt;type check&lt;/code&gt; being performed (for performance improvements in this example):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public int SumListChecked(IEnumerable&amp;lt;int&amp;gt; enumerable)
{
    var runningSum = 0;

    // Check the type 
    if (enumerable is List&amp;lt;int&amp;gt; list)
    {
        foreach (var item in list)
        {
            runningSum += item;
        }
        return runningSum;
    }
    
    // all others
    foreach (var item in enumerable)
    {
        runningSum += item;
    }

    return runningSum;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="not-keyword"&gt;not keyword&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;not&lt;/code&gt; keyword can be used in conjunction with the &lt;code&gt;is&lt;/code&gt; keyword to perform a &lt;code&gt;null check&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;string? outputMessage = &amp;quot;This message should be output!&amp;quot;;

// explicitly check that the string is not null
if (outputMessage is not null)
{
    Console.WriteLine(outputMessage);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="and-or-keywords"&gt;and, or keywords&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; keywords are commonly used in a &lt;code&gt;switch expression&lt;/code&gt; for &lt;code&gt;pattern matching&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;string GetGrade(int percentage) =&amp;gt;
    percentage switch
    {
        (&amp;lt; 0) or (&amp;gt; 100) =&amp;gt; &amp;quot;Invalid&amp;quot;,
        (&amp;gt;= 0) and (&amp;lt; 40) =&amp;gt; &amp;quot;Fail&amp;quot;,
        (&amp;gt;= 40) and (&amp;lt; 70) =&amp;gt; &amp;quot;Average&amp;quot;,
        (&amp;gt;= 70) =&amp;gt; &amp;quot;Excellent&amp;quot;,
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="enhanced-matching"&gt;Enhanced matching&lt;/h2&gt;
&lt;p&gt;All the keywords can be used together for a more complex pattern matching expression - in this example to &lt;code&gt;validate an email address&lt;/code&gt; (there are definitely better, more comprehensive ways to validate an email address than using pattern matching, and although the below is not a complete and entirely valid way to validate an email address, it is sufficient for this demo)&lt;/p&gt;
&lt;p&gt;The first step is to loop through each character in the email address to determine if its valid for an email address:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;bool IsValidEmailAddress(string email)
{
    foreach (var c in email)
    {
        var result = IsValidChar(c);
        if (!result)
        {
            return false;
        }
    }

    return true;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If any of the characters are invalid according to the &lt;code&gt;IsValidChar&lt;/code&gt; method, then the &lt;em&gt;email string&lt;/em&gt; as a whole is invalid.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;IsValidChar&lt;/code&gt; is where the enhanced, more complex pattern matching takes place. The method is an &lt;code&gt;expression-bodied method&lt;/code&gt; which in turn used &lt;code&gt;pattern matching&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;bool IsValidChar(char c) =&amp;gt;
    c is ((&amp;gt;= 'A' and &amp;lt;= 'Z') // capital letters
      or (&amp;gt;= 'a' and &amp;lt;= 'z') // lower case
      or (&amp;gt;= '0' and &amp;lt;= '9') // numbers
      or '&amp;#64;' // allowed symbols
      or '.'
      or '-'
      or '+'
      and not ' ');
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Executing the above code with the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var emailToValidate = &amp;quot;learn&amp;#64;alwaysdeveloping.com&amp;quot;;
Console.WriteLine($&amp;quot;'{emailToValidate}' a valid email &amp;quot; +
    $&amp;quot;address?: {IsValidEmailAddress(emailToValidate)}&amp;quot;);

var anotherEmailToValidate = &amp;quot;invalid123, invalid&amp;quot;;
Console.WriteLine($&amp;quot;'{anotherEmailToValidate}' a valid email &amp;quot; +
    $&amp;quot;address?: {IsValidEmailAddress(anotherEmailToValidate)}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;'learn&amp;#64;alwaysdeveloping.com' a valid email address?: True
'invalid123, invalid' a valid email address?: False
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;As &lt;code&gt;Pattern matching&lt;/code&gt; is a fairly new addition to C#, I have not seen it extensively used, and have no extensively used it myself. However the more I learn about the usages of it, the more it gets incorporated into my coding daily.&lt;br /&gt;
In this demo &lt;code&gt;pattern matching&lt;/code&gt; is certainly more readable and easier to understand than some other methods (regex for example) - but what one gains in maintainability and readability, one might lose in performance. However, the important thing to know is there are options, and being better informed about each option allows for the best technique to be chosen for each use case.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/buhakmeh/status/1543278994069544962"&gt;Khalid Abuhakmeh Tweet&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;138: 15-08-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/12-options-create</id>
		<title>Modifying configuration on load</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/12-options-create" />
		<updated>2022-08-12T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;Options.Create&lt;/code&gt; method can be used in conjunction with the &lt;code&gt;GetSection.Bind&lt;/code&gt; methods to read settings from the &lt;em&gt;Configuration&lt;/em&gt; provider(s), and modify them before adding them to the dependency injection container.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="configuring-options"&gt;Configuring options&lt;/h2&gt;
&lt;p&gt;First we'll have a look at how to load options &lt;em&gt;without&lt;/em&gt; any modification.&lt;/p&gt;
&lt;p&gt;We have the following section in the &lt;em&gt;appsettings.json&lt;/em&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;"Credentials": {
    "Username": "admin",
    "Password": "logMeIn"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The startup (using top level statements and a minimal endpoint) is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = WebApplication.CreateBuilder(args);

// Get the section called "Credentials" from configuration
var optionSection = builder.Configuration.GetSection("Credentials");
// this line will bind the section to a Credentials class
// and add it to the DI container automatically
builder.Services.Configure&amp;lt;Credentials&amp;gt;(optionSection);

var app = builder.Build();

app.MapGet("/getoptions", (IOptions&amp;lt;Credentials&amp;gt; options) =&amp;gt;
{
    return options.Value;
});

app.Run();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;builder.Services.Configure&amp;lt;Credentials&amp;gt;(optionSection);&lt;/code&gt; block of code, will convert the &lt;em&gt;optionSection&lt;/em&gt; to type &lt;em&gt;Credentials&lt;/em&gt; and automatically add it to the dependency injection container as &lt;code&gt;IOptions&amp;lt;Credentials&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is best practice to use the &lt;a href="https://alwaysdeveloping.net/02/03-ioptions"&gt;&lt;code&gt;options Pattern&lt;/code&gt; (as described in this post)&lt;/a&gt;, over just inserting &lt;em&gt;Credentials&lt;/em&gt; as a singleton. The options pattern this is the default pattern when using &lt;em&gt;Services.Configure&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Calling the endpoint defined above, will return the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{"username":"admin","password":"logMeIn"}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The obvious issue with all of the above, is that we are &lt;code&gt;storing the password in plain text in the source control repository&lt;/code&gt;. Next we will look at how the settings can be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Loaded from the configuration (without a password)&lt;/li&gt;
&lt;li&gt;Modified (to add the password from an &lt;em&gt;environment variable&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Added to the dependency injection container still using &lt;em&gt;Options pattern&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Only the startup code will need to change, and any other code which is using &lt;code&gt;IOptions&amp;lt;Credentials&amp;gt;&lt;/code&gt; will not be affected and be required to change.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="modifying-options"&gt;Modifying options&lt;/h2&gt;
&lt;p&gt;To repeat - we are aiming to remove the password from the &lt;em&gt;appsettings.json&lt;/em&gt;, inject it as an &lt;em&gt;environment variable&lt;/em&gt; at runtime but still have it populated on the &lt;code&gt;IOptions&amp;lt;Credentials&amp;gt;&lt;/code&gt; class added to the dependency injection container.&lt;/p&gt;
&lt;p&gt;Step one is to remove the password from  &lt;em&gt;appsettings.json&lt;/em&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;"Credentials": {
    "Username": "admin"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we update the startup to load the configuration slightly differently:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = WebApplication.CreateBuilder(args);

// load the Credentials section from the configuration
// and bind it to the credentialOptions instance
var credentialOptions = new Credentials();
builder.Configuration.GetSection("Credentials").Bind(credentialOptions);

// modify the instance by setting the Password value from
// the environment variables
credentialOptions.Password = builder.Configuration["Credentials.Password"];

// Create IOptions&amp;lt;Credentials&amp;gt; from an instance of Credentials
var ioptions = Options.Create(credentialOptions);
// manually add to the DI container
builder.Services.AddSingleton(ioptions);

var app = builder.Build();

app.MapGet("/getoptions", (IOptions&amp;lt;Credentials&amp;gt; options) =&amp;gt;
{
    return options.Value;
});

app.Run();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are few more steps are involved, when compared to the first example, but its not much more complex:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of using &lt;code&gt;builder.Services.Configure&lt;/code&gt; to create an &lt;em&gt;IOptions&lt;/em&gt; from the configuration directly, the &lt;code&gt;builder.Configuration.GetSection.Bind&lt;/code&gt; method is used to bind the configuration to an instance of &lt;em&gt;Credentials&lt;/em&gt; (at this point we have no &lt;em&gt;IOptions&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Manually update the instance using values from the &lt;em&gt;environment variable&lt;/em&gt; (in this example)&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;Options.Create&lt;/code&gt; method to create &lt;em&gt;IOptions&amp;lt;Credentials&amp;gt;&lt;/em&gt; from the instance of &lt;em&gt;Credentials&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Add the &lt;em&gt;IOptions&lt;/em&gt; instance to the DI container (as a singleton)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Calling the endpoint defined above, now returns the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{"username":"admin","password":"logMeInEnvVar"}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have a password, which was passed in as an &lt;code&gt;environment variable&lt;/code&gt; (with the key &lt;em&gt;Credentials.Password&lt;/em&gt;), and no client code had to change, only startup code!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;While there are better methods for dealing with passwords (such as storing them in a vault, and using a configuration provider to pull the values directly from the vault) - in some cases this is not feasible. So while this solution might not be the first choice, it definitely is a valid method to protect passwords, by not having them as part of the source code in a source control repository.&lt;/p&gt;
&lt;hr&gt;
&lt;!--?# DailyDrop ?--&gt;137: 12-08-2022&lt;!--?#/ DailyDrop ?--&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/11-interop-services</id>
		<title>OS information via Runtime.InteropServices</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/11-interop-services" />
		<updated>2022-08-11T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;Runtime.InteropServices&lt;/code&gt; namespace contains the &lt;code&gt;RuntimeInformation&lt;/code&gt; static class which can be used to obtain a variety of information related to the operating system. This can be used to only execute certain code depending on the operating system on which the application is running.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="basic-information"&gt;Basic Information&lt;/h2&gt;
&lt;p&gt;The basic operating system information is all available on the &lt;em&gt;static&lt;/em&gt; &lt;code&gt;RuntimeInformation&lt;/code&gt; class and can be accessed via public properties:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Console.WriteLine($&amp;quot;Framework description: {RuntimeInformation.FrameworkDescription}&amp;quot;);
Console.WriteLine($&amp;quot;OS architecture: {RuntimeInformation.OSArchitecture}&amp;quot;);
Console.WriteLine($&amp;quot;OS description: {RuntimeInformation.OSDescription}&amp;quot;);
Console.WriteLine($&amp;quot;Process architecture: {RuntimeInformation.ProcessArchitecture}&amp;quot;);
Console.WriteLine($&amp;quot;Runtime identifier: {RuntimeInformation.RuntimeIdentifier}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Executing the code in &lt;em&gt;Windows&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Framework description: .NET 6.0.5
OS architecture: X64
OS description: Microsoft Windows 10.0.22000
Process architecture: X64
Runtime identifier: win10-x64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Executing the code on &lt;em&gt;WSL (Windows Subsystem for Linux)&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Framework description: .NET 6.0.4
OS architecture: X64
OS description: Linux 5.10.16.3-microsoft-standard-WSL2 #1 SMP Fri Apr 2 22:23:49 UTC 2021
Process architecture: X64
Runtime identifier: ubuntu.20.04-x64
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="operating-system"&gt;Operating System&lt;/h2&gt;
&lt;p&gt;The namespace also contains a &lt;code&gt;OSPlatform&lt;/code&gt; &lt;em&gt;struct&lt;/em&gt;, which contains a list of common operating systems, and in conjunction with the &lt;code&gt;IsOSPlatform&lt;/code&gt; method on &lt;code&gt;RuntimeInformation&lt;/code&gt;, can be used to check the current operating system:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Console.WriteLine($&amp;quot;Is Windows?: {RuntimeInformation.IsOSPlatform(OSPlatform.Windows)}&amp;quot;);
Console.WriteLine($&amp;quot;Is Linux?: {RuntimeInformation.IsOSPlatform(OSPlatform.Linux)}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Executing the code in &lt;em&gt;Windows&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Is Windows?: True
Is Linux?: False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Executing the code on &lt;em&gt;WSL (Windows Subsystem for Linux)&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Is Windows?: False
Is Linux?: True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can also be used to executing specific code only when running on a certain operating system. Suppose we need to write to the Windows Event Log - this can only happen in Windows (there are better ways of handling logging, but for demo purposes, this is the requirement):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;if(RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
{
    Console.WriteLine(&amp;quot;Performing some Windows specific stuff - maybe writing to EventLog for example&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simple and  easy to use.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;A useful namespace and class to be aware of, especially if doing cross platform development, or if just required to gather information about the operating system.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/buhakmeh/status/1541104583728136192"&gt;Khalid Abuhakmeh Tweet&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;136: 11-08-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/10-sql-over</id>
		<title>An intro to SQL SELECT-OVER</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/10-sql-over" />
		<updated>2022-08-10T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The SQL &lt;code&gt;OVER&lt;/code&gt; clause can be used to define a window or user-specified set of rows within a result set. This effectively &lt;code&gt;allows computed values&lt;/code&gt; (AVG, MAX in the below examples) to be &lt;code&gt;executed over different sets of data&lt;/code&gt;, in the &lt;code&gt;same query&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Some examples below should make this clearer.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="audit-table"&gt;Audit table&lt;/h2&gt;
&lt;p&gt;In our examples below, we are using an &lt;code&gt;Audit&lt;/code&gt; table which stored the average execution time for a process on a server for a specific day. The table will store the server name, as well as the average execution time (in milliseconds):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * FROM Audit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A sample output of the data for a few servers:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Id          Created                 Server          ExecutionInMs
----------- ----------------------- --------------- -------------
230001      2022-07-15 06:38:54.710 Server1         2420
230002      2022-07-15 06:38:54.710 Server2         4176
230003      2022-07-15 06:38:54.710 Server3         6291
230004      2022-07-15 06:38:54.710 Server4         2508
230005      2022-07-15 06:38:54.710 Server5         6690
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="use-case"&gt;Use case&lt;/h3&gt;
&lt;p&gt;In our use case, we want to see the &lt;code&gt;average execution&lt;/code&gt; time for each server along with the &lt;code&gt;average across all servers&lt;/code&gt;, to determine if any specific server(s) are executing excessively above the average. Also to include is &lt;code&gt;MIN and MAX execution time across all servers&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In our example we only have 100 server, so one could potentially just manually look at the data to see the &lt;code&gt;MIN and MAX&lt;/code&gt; - but imagine the same scenario at scale with hundreds or thousands of server. Not as easy to do manually.&lt;/p&gt;
&lt;h2 id="without-over"&gt;Without OVER&lt;/h2&gt;
&lt;h3 id="averages"&gt;Averages&lt;/h3&gt;
&lt;p&gt;First step, is to get the &lt;code&gt;average across all servers&lt;/code&gt; and the following is a method to do it - using a sub query to perform the &lt;code&gt;average across all data&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT Server, ExecutionInMs,
	(
		SELECT AVG(ExecutionInMs) FROM Audit
	) as TotalAverageExecutionTime
FROM Audit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another way could be to &lt;em&gt;SELECT&lt;/em&gt; the value into a variable and then include that in the final &lt;em&gt;SELECT&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;DECLARE &amp;#64;TotalAverageExecutionTime int
SELECT &amp;#64;TotalAverageExecutionTime = AVG(ExecutionInMs) FROM Audit

SELECT Server, ExecutionInMs, &amp;#64;TotalAverageExecutionTime as TotalAverageExecutionTime
FROM Audit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both techniques return the same result set:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Server           ExecutionInMs TotalAverageExecutionTime
---------------- ------------- -------------------------
Server1          2420          4551
Server2          4176          4551
Server3          6291          4551
Server4          2508          4551
Server5          6690          4551
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This approach is required as we are trying to combine operations &lt;code&gt;across different datasets&lt;/code&gt; - the dataset of a set of rows and the dataset of all the information combined (the &lt;code&gt;AVG&lt;/code&gt;).&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="min-and-max"&gt;MIN and MAX&lt;/h3&gt;
&lt;p&gt;The same problem occurs with using &lt;code&gt;MIN and MAX&lt;/code&gt;. Here is a sample of what the query would look like using &lt;code&gt;sub-queries&lt;/code&gt; to get all the information required:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT 
	Server, 
        ExecutionInMs,
	(
		SELECT AVG(ExecutionInMs) FROM Audit
	) as TotalAverageExecutionTime,
	(
		SELECT MIN(ExecutionInMs) FROM Audit
	) as TotalMinExecutionTime,
	(
		SELECT Max(ExecutionInMs) FROM Audit
	) as TotalMaxExecutionTime
FROM Audit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With all of this, we have the information we require:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Server          ExecutionInMs TotalAverageExecutionTime TotalMinExecutionTime TotalMaxExecutionTime
--------------- ------------- ------------------------- --------------------- ---------------------
Server1         2420          4551                      2027                  10600
Server2         4176          4551                      2027                  10600
Server3         6291          4551                      2027                  10600
Server4         2508          4551                      2027                  10600
Server5         6690          4551                      2027                  10600
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While this is all valid, but there is a easier and simpler way, using the &lt;code&gt;OVER clause&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="with-over"&gt;With OVER&lt;/h2&gt;
&lt;h3 id="averages-1"&gt;Averages&lt;/h3&gt;
&lt;p&gt;As mentioned in the intro - the &lt;code&gt;OVER&lt;/code&gt; clause can be used to &lt;em&gt;define a window or user-specified set of rows within a result set&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We can select the base table information, and then use the &lt;code&gt;OVER&lt;/code&gt; clause to define a separate result set to perform the &lt;code&gt;AVG&lt;/code&gt; on, &lt;code&gt;in the same query&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT	
    Server, 
    ExecutionInMs, 
    AVG(ExecutionInMs) OVER()
FROM Audit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The additional of &lt;code&gt;OVER()&lt;/code&gt; with no parameters passed in, means: &lt;code&gt;over the entire dataset&lt;/code&gt;. So in the query the &lt;em&gt;Server&lt;/em&gt; and &lt;em&gt;ExecutionInMs&lt;/em&gt; is returned for each row in the base data, while the &lt;code&gt;AVG is executed over the entire dataset of all rows&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Definitely cleaner, easier and more concise than the other methods shown above without &lt;code&gt;OVER&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="min-and-max-1"&gt;MIN and MAX&lt;/h3&gt;
&lt;p&gt;The same solution can be used for &lt;code&gt;MIN and MAX&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT	
    Server, 
    ExecutionInMs, 
    AVG(ExecutionInMs) OVER() as TotalAverageExecutionTime,
    MIN(ExecutionInMs) OVER() as TotalMinExecutionTime,
    MAX(ExecutionInMs) OVER() as TotalMaxExecutionTime
FROM Audit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have our final required results:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Server           ExecutionInMs TotalAverageExecutionTime TotalMinExecutionTime TotalMaxExecutionTime
---------------- ------------- ------------------------- --------------------- ---------------------
Server1          2420          4551                      2027                  10600
Server2          4176          4551                      2027                  10600
Server3          6291          4551                      2027                  10600
Server4          2508          4551                      2027                  10600
Server5          6690          4551                      2027                  10600
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="calculations"&gt;Calculations&lt;/h2&gt;
&lt;p&gt;Calculations can also be performed on the data output by using &lt;code&gt;OVER&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;In this example, the percentage above the total average for each server is calculated, and then each server is ranked by how far they are above the average:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT	
    Server, 
    ExecutionInMs, 
    AVG(ExecutionInMs) OVER() as TotalAverageExecutionTime,
    MIN(ExecutionInMs) OVER() as TotalMinExecutionTime,
    MAX(ExecutionInMs) OVER() as TotalMaxExecutionTime,
    (CONVERT(decimal, ExecutionInMs) / CONVERT(decimal, AVG(ExecutionInMs) OVER())) * 100
FROM Audit
ORDER BY 6 DESC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the results, we can see that &lt;code&gt;Server10&lt;/code&gt; is executing over &lt;code&gt;two times slower than the average&lt;/code&gt;!&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Server          ExecutionInMs TotalAverageExecutionTime TotalMinExecutionTime TotalMaxExecutionTime 
--------------- ------------- ------------------------- --------------------- --------------------- ---------------------
Server10        10600         4551                      2027                  10600                 232.9158426719402329
Server50        7000          4551                      2027                  10600                 153.8123489343001538
Server77        6950          4551                      2027                  10600                 152.7136892990551527
Server90        6941          4551                      2027                  10600                 152.5159305647110525
Server56        6899          4551                      2027                  10600                 151.5930564711052516
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="partition"&gt;Partition&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;PARTITION&lt;/code&gt; keyword can also be used in conjunction with the &lt;code&gt;OVER&lt;/code&gt; to create multiple smaller datasets &lt;em&gt;partitioned&lt;/em&gt; by the specified field.&lt;/p&gt;
&lt;p&gt;For the below example, suppose a requirement has come into also include the average for each &lt;em&gt;second&lt;/em&gt; - that is, the &lt;code&gt;average for all server's where the execution time is between 4000-4999ms&lt;/code&gt;, the average where the execution time is &lt;code&gt;between 5000-5999ms etc&lt;/code&gt;. Maybe there is a threshold above which the execution jumps drastically?&lt;/p&gt;
&lt;p&gt;First, let's include a clause to get the first digit of the &lt;em&gt;ExecutionTimeInMs&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT	
    Server, 
    ExecutionInMs,
    SUBSTRING(CAST(ExecutionInMs as varchar), 1, 1) as FirstDigit,
    AVG(ExecutionInMs) OVER() as TotalAverageExecutionTime,
    MIN(ExecutionInMs) OVER() as TotalMinExecutionTime,
    MAX(ExecutionInMs) OVER() as TotalMaxExecutionTime,
    (CONVERT(decimal, ExecutionInMs) / CONVERT(decimal, AVG(ExecutionInMs) OVER())) * 100
FROM Audit
ORDER BY 6 DESC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From there, we can now use this field to create multiple datasets on which the &lt;code&gt;AVG&lt;/code&gt; is &lt;code&gt;PARTITIONED&lt;/code&gt; by:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT	
    Server, 
    ExecutionInMs,
    SUBSTRING(CAST(ExecutionInMs as varchar), 1, 1) as FirstDigit,
    AVG(ExecutionInMs) OVER(PARTITION BY SUBSTRING(CAST(ExecutionInMs as varchar), 1, 1)) as SecondAverageInMs,
    AVG(ExecutionInMs) OVER() as TotalAverageExecutionTime,
    MIN(ExecutionInMs) OVER() as TotalMinExecutionTime,
    MAX(ExecutionInMs) OVER() as TotalMaxExecutionTime,
    (CONVERT(decimal, ExecutionInMs) / CONVERT(decimal, AVG(ExecutionInMs) OVER())) * 100
FROM Audit
ORDER BY 6 DESC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A sample of the results:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Server          ExecutionInMs FirstDigit SecondAverageInMs TotalAverageExecutionTime TotalMinExecutionTime TotalMaxExecutionTime 
--------------- ------------- ---------- ----------------- ------------------------- --------------------- --------------------- --------------------
Server91        2813          2          2508              4551                      2027                  10600                 61.8105910788837618
Server92        2295          2          2508              4551                      2027                  10600                 50.4284772577455504
Server95        2159          2          2508              4551                      2027                  10600                 47.4401230498791474
Server96        2566          2          2508              4551                      2027                  10600                 56.3832124807734564
Server93        3818          3          3538              4551                      2027                  10600                 83.8936497473082839
Server100       3127          3          3538              4551                      2027                  10600                 68.7101735882223687
Server70        3348          3          3538              4551                      2027                  10600                 73.5662491760052736

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the result, we now have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;average&lt;/code&gt; across a specific &lt;code&gt;partition&lt;/code&gt; - records which start with the same digit for &lt;em&gt;ExecutionInMs&lt;/em&gt; will have the same average&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;average&lt;/code&gt; across the entire dataset - all records will have the same average&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id="row-numbering"&gt;Row Numbering&lt;/h2&gt;
&lt;p&gt;A use case which often comes up (and which I've used, without fully understanding the inner workings) - and that is to &lt;code&gt;number each row&lt;/code&gt; and specifically &lt;code&gt;number each row over a group/partition&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ROW_NUMBER&lt;/code&gt; function is used with the &lt;code&gt;OVER&lt;/code&gt; and &lt;code&gt;ORDER BY&lt;/code&gt; clauses to give each row a number, based on the &lt;code&gt;ORDER BY&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here, each row is given a number, ordered by the &lt;em&gt;ExecutionInMs&lt;/em&gt; from largest to smallest:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT ROW_NUMBER() OVER(ORDER BY ExecutionInMs DESC), Server, ExecutionInMs
FROM Audit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A sample of the output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;                     Server           ExecutionInMs
-------------------  ---------------- -------------
1                    Server10         10600
2                    Server50         7000
3                    Server77         6950
4                    Server90         6941
5                    Server56         6899
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can also be used with the &lt;code&gt;PARTITION&lt;/code&gt; clause to generate row numbers within a specific sub-dataset.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;If working with an ORM (such as Entity Framework), this may not be something for every day use. However, investigations and troubleshooting will still need to be performed on the data, in which case knowledge of the usage of &lt;code&gt;OVER&lt;/code&gt; and &lt;code&gt;PARTITION&lt;/code&gt; can prove to be invaluable. In addition if using an ORM which does generate SQL using &lt;code&gt;OVER&lt;/code&gt; its important to understand the SQL and how the code effects the SQL generation.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/queries/select-over-clause-transact-sql?view=sql-server-ver16"&gt;SELECT - OVER Clause (Transact-SQL)&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;135: 10-08-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
</feed>