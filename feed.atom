<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>https://alwaysdeveloping.net/</id>
	<title />
	<link rel="self" href="https://alwaysdeveloping.net/" />
	<rights>Copyright © 2022</rights>
	<updated>2022-08-10T03:51:59Z</updated>
	<subtitle>always learning | always growing</subtitle>
	<entry>
		<id>https://alwaysdeveloping.net/p/2022-08-hashicorp-vault</id>
		<title>HashiCorp Vault with C#</title>
		<link href="https://alwaysdeveloping.net/p/2022-08-hashicorp-vault" />
		<updated>2022-08-10T01:00:00Z</updated>
		<content>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The requirement was very simple (or so I thought) - create a locally running &lt;a href="https://www.vaultproject.io/"&gt;HashiCorp Vault&lt;/a&gt; instance, setup a simple C# client to connect to the vault, and get an understanding how how the Vault operates. At almost every step of the process I ran into issue - which lead me to putting together this guide.&lt;/p&gt;
&lt;p&gt;This guide will go through step by step:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to configure the Vault for local development&lt;/li&gt;
&lt;li&gt;Connect to the Vault using VaultSharp&lt;/li&gt;
&lt;li&gt;Connect to the Vault using the REST api&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a long guide, but will go through each aspect step by step and by the end you should have an up and running local Vault instance, and be able to connect via the CLI, the C# &lt;em&gt;VaultSharp&lt;/em&gt; library as well as the HTTP API using C#.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="why"&gt;Why?&lt;/h3&gt;
&lt;p&gt;So why did I struggle at almost every step, and why did I feel this guide could help?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Documentation is inaccurate&lt;/code&gt;: Sometimes the guide and sample code snippets are just inaccurate or don't work. Some manual correction is required&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Documentation is incomplete&lt;/code&gt;: In some cases it was difficult to track down comprehensive documentation on what I was trying to perform. If there was documentation, it sometimes didn't adequately&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VaultSharp has missing functionality&lt;/code&gt;: This is not a criticism of the great work done by the contributors to this free library, but there is some functionality available via the Vault CLI, not available via &lt;em&gt;VaultSharp&lt;/em&gt; (if it is is available, I could not find it, or documentation of it anywhere)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Few C# REST api examples available&lt;/code&gt;: This wasn't the biggest issue, but it did take a few attempts to get the C# HttpClient to successfully perform operations on the Vault. This was mostly down to having to translate the working &lt;em&gt;curl&lt;/em&gt; and &lt;em&gt;CLI&lt;/em&gt; examples into C# http requests.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id="hashicorp-vault"&gt;HashiCorp Vault&lt;/h2&gt;
&lt;p&gt;In short, &lt;a href="https://www.vaultproject.io/"&gt;HashiCorp Vault&lt;/a&gt; (also referred to as the &lt;em&gt;Vault&lt;/em&gt; in the rest of this post) allows for &lt;em&gt;secure, store and tightly control access to tokens, passwords, certificates, encryption keys for protecting secrets and other sensitive data using a UI, CLI, or HTTP API&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There are other key vaults available on the market (Azure Key Vault, AWS KMS, GCP KMS) - but Hashicorp Vault is the defacto standard.&lt;/p&gt;
&lt;p&gt;In this post we'll explore accessing the Vault using all three methods - the UI, CLI and HTTP api.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="prerequisites"&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;The guide below was written on a machine running Windows 11, so the requirements mentioned below will differ if working on another OS.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;HashiCorp Vault download&lt;/code&gt;: The exe is &lt;a href="https://www.vaultproject.io/downloads"&gt;available here&lt;/a&gt; and is a requirement for this guide. This executable serves two purposes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allows for a dev instance of the Vault server to be run&lt;/li&gt;
&lt;li&gt;Serves as a CLI tool to connect to the Vault server instance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once downloaded, is is recommended (but not required) making the &lt;code&gt;Vault binary&lt;/code&gt; available on the &lt;code&gt;PATH&lt;/code&gt; (so it can be executed from any directory when working in the command prompt/Powershell). The steps to perform this are &lt;a href="https://stackoverflow.com/questions/1618280/where-can-i-set-path-to-make-exe-on-windows"&gt;available here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Docker Desktop&lt;/code&gt;: This is not a requirement, as the Vault server can be run from the above mentioned download. However the guide also covers running a &lt;em&gt;container instance&lt;/em&gt; of the Vault and if using this method then &lt;a href="https://www.docker.com/products/docker-desktop/"&gt;Docker Desktop&lt;/a&gt; (or similar) is require to be installed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id="vault-startup"&gt;Vault Startup&lt;/h3&gt;
&lt;p&gt;The below guides will demonstrate how to get a Vault instance up and running - it will not go into detail on persisting the Vault information to a permanent store. This guide is primarily aimed at getting a Vault up and running for &lt;em&gt;development&lt;/em&gt; purposes.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id="binary"&gt;Binary&lt;/h4&gt;
&lt;p&gt;This is by far the easiest method to get an instance of the Vault up and running. This is &lt;strong&gt;not&lt;/strong&gt; the route I initially took, as I was interested in getting the &lt;em&gt;container version&lt;/em&gt; up and running - however I &lt;strong&gt;highly&lt;/strong&gt; recommend this as a starting point if te goal is to just get a working, integrated sample up and running.&lt;/p&gt;
&lt;p&gt;To stand a Vault Server instance, from either the &lt;em&gt;Command Prompt&lt;/em&gt; or &lt;em&gt;PowerShell&lt;/em&gt;, execute the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;vault server -dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output should look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;WARNING! dev mode is enabled! In this mode, Vault runs entirely in-memory
and starts unsealed with a single unseal key. The root token is already
authenticated to the CLI, so you can immediately begin using Vault.

You may need to set the following environment variable:

PowerShell:
    $env:VAULT_ADDR=&amp;quot;http://127.0.0.1:8200&amp;quot;
cmd.exe:
    set VAULT_ADDR=http://127.0.0.1:8200

The unseal key and root token are displayed below in case you want to
seal/unseal the Vault or re-authenticate.

Unseal Key: ANYzmKrmlp3eO4skaJFjmhKE2dEVLzbKSxecR+XGb0o=
Root Token: hvs.9kouFib30HrpNSxDWTCzmczk

Development mode should NOT be used in production installations!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Vault instance should now be available by browsing to &lt;code&gt;http://127.0.0.1:8200&lt;/code&gt;, and you should be able to login using the &lt;code&gt;Root Token&lt;/code&gt; provided in the output.&lt;/p&gt;
&lt;p&gt;Keep in mind, this instance does NOT use any persistent storage, and if the server is stopped (by closing the prompt, or pressing &lt;em&gt;Ctrl-C&lt;/em&gt;) then any information saved to the Vault will be lost.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id="docker"&gt;Docker&lt;/h4&gt;
&lt;p&gt;Trying to get a &lt;em&gt;Docker&lt;/em&gt; version of the Vault up and running proved trickier than I thought or expected it to be. All of the below attempts were executed with the Windows version of &lt;a href="https://www.docker.com/products/docker-desktop/"&gt;Docker Desktop&lt;/a&gt; installed, configured to use Linux containers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Attempt 1:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://hub.docker.com/_/vault"&gt;Vault page on DockerHub&lt;/a&gt; gives the below command as an example for running the vault with a completely in-memory server:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;docker run --cap-add=IPC_LOCK -e 'VAULT_DEV_ROOT_TOKEN_ID=myroot' -e 'VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:1234' vault
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While this command did successfully startup a Vault container instance, no ports were exposed, so the vault URL wasn't accessible (or if it was, I couldn't figure it out). At this point I probably should have explored how to expose the ports - but I did not, I was hoping to find something that &lt;em&gt;just worked&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Attempt 2:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;While reading through the various documentation, I had also came across this official &lt;a href="hhttps://learn.hashicorp.com/tutorials/vault/dotnet-httpclient"&gt;using HashiCorp Vault C# client with .NET Core Guide&lt;/a&gt; which contained a link to a &lt;a href="https://github.com/hashicorp/vault-guides"&gt;Vault Guide repository&lt;/a&gt;. As part of the guide and repository is a &lt;a href="https://github.com/hashicorp/vault-guides/blob/master/secrets/dotnet-vault/demo_setup.sh"&gt;demo_setup.sh file&lt;/a&gt;. Exactly what I needed! (or so I thought)&lt;/p&gt;
&lt;p&gt;However, executing the &lt;code&gt;demo_setup.sh&lt;/code&gt; script, resulted in ...nothing. No error messages, but also no positive responses from the prompt. Looking at the contents of the script, a &lt;a href="https://github.com/hashicorp/vault-guides/blob/master/secrets/dotnet-vault/docker-compose.yml"&gt;docker-compose&lt;/a&gt; is invoked.&lt;/p&gt;
&lt;p&gt;I tried running the docker-compose independently which resulted in ...a timeout. The &lt;em&gt;docker-compose&lt;/em&gt; tries to startup and instance of &lt;code&gt;Vault&lt;/code&gt; and &lt;code&gt;MS SQL Server&lt;/code&gt; (for persistent storage) - however the it seems like the &lt;code&gt;MS SQL Server&lt;/code&gt; image in the &lt;em&gt;docker-compose&lt;/em&gt; is no longer valid.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Successful Attempt:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For development purposes, I didn't need a persistent store, so the sample &lt;em&gt;docker-compose.yml&lt;/em&gt; was modified, removing the requirement for the MS SQL database.&lt;/p&gt;
&lt;p&gt;The result was this &lt;em&gt;docker-compose.yml&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;version: &amp;quot;3.3&amp;quot;
services:
vault:
    image: vault:1.6.1
    restart: always
    command: [ 'vault', 'server', '-dev', '-dev-listen-address=0.0.0.0:8200']
    environment:
    VAULT_DEV_ROOT_TOKEN_ID: &amp;quot;some-root-token&amp;quot;
    ports:
    - &amp;quot;8200:8200&amp;quot;
    cap_add:
    - IPC_LOCK
    networks:
    vpcbr:
        ipv4_address: 10.5.0.2

networks:
vpcbr:
    driver: bridge
    ipam:
    config:
        - subnet: 10.5.0.0/16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Executing this with:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We finally have a result!&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;[+] Running 6/6
- vault Pulled                              13.1s
- 21c83c524219 Pull complete                5.2s
- 2552eed26cd4 Pull complete                5.3s
- b6096191328a Pull complete                7.2s
- 63cf312915ed Pull complete                7.3s
- ba2ada45d14d Pull complete                7.3s
[+] Running 2/2
- Network vaultpoc_vpcbr      Created       0.9s
- Container vaultpoc-vault-1  Started       1.3s   
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Browsing to &lt;code&gt;http://localhost:8200&lt;/code&gt; (the port specified in the docker-compose) - the Vault logon screen can be accessed! Using the default root token specified (&lt;code&gt;some-root-token&lt;/code&gt; if using the above yml), allowed access into the Vault.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We now had a repeatable container based process which &lt;em&gt;just works!&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="vault-configuration"&gt;Vault Configuration&lt;/h3&gt;
&lt;p&gt;Now that the Vault is up and running, the next step is to configure the Vault, as well as create and configure credentials for our application. At this point there is only one &lt;em&gt;root&lt;/em&gt; user configured, which has full access to all areas of the Vault. Using the root credentials might be fine for development purposes, but it is important to understand how the security in Vault works, how the future application will interact with Vault, and how permission are assigned.&lt;/p&gt;
&lt;p&gt;Some of the steps below make use of the &lt;a href="https://www.vaultproject.io/downloads"&gt;&lt;code&gt;Vault Command Line Interface (CLI)&lt;/code&gt;&lt;/a&gt; tool, which should be downloaded. It consists of a single exe which is used to invoke commands against the Vault instance.&lt;/p&gt;
&lt;p&gt;As part of using the CLI, it is also recommended to set an environment variables for the &lt;code&gt;vault url&lt;/code&gt; - this is not required, but will save time later as the URL will not need to be specified for each CLI command ( specifying &lt;code&gt;-address=&amp;quot;http://localhost:8200&amp;quot;&lt;/code&gt; on every command):&lt;/p&gt;
&lt;p&gt;To set the environment variable in &lt;strong&gt;Powershell&lt;/strong&gt;, execute the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;$env:VAULT_ADDR='http://0.0.0.0:8200'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OR&lt;/p&gt;
&lt;p&gt;Or in &lt;strong&gt;Command Prompt&lt;/strong&gt;,  execute the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;set VAULT_ADDR=http://0.0.0.0:8200
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The steps below which use the CLI, will show the &lt;strong&gt;PowerShell&lt;/strong&gt; command, but the &lt;em&gt;Command Prompt&lt;/em&gt; commands would be almost identical.&lt;/p&gt;
&lt;p&gt;A note: the above will only set the environment variables for the lifetime of the shell session - if closed and reopened, the environment variable will no longer be set and the above commands will need to be run again.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id="key-value-engine"&gt;Key-Value Engine&lt;/h4&gt;
&lt;p&gt;This guide focuses on using the Vault &lt;code&gt;key-value pair functionality&lt;/code&gt; to store application secrets - there is however other functionality available, which if required, would need to be enabled as with the &lt;code&gt;key-value pair&lt;/code&gt; functionality.&lt;/p&gt;
&lt;p&gt;The first step to being able to store &lt;code&gt;key value pairs&lt;/code&gt; is to enable the functionality. The following steps will essentially create a &lt;em&gt;path&lt;/em&gt; (folder) in the Vault, which will store specific type of information - in this case, a folder called &lt;code&gt;secrets&lt;/code&gt; is being created, which will store &lt;code&gt;key-value pairs&lt;/code&gt;. A &lt;em&gt;path&lt;/em&gt; can be thought of a &lt;em&gt;folder structure&lt;/em&gt; within the Vault in which secrets will be stored, with each folder able to have its own permissions.&lt;/p&gt;
&lt;p&gt;This step only needs to be performed once, unless specifically deciding that additional &lt;em&gt;root paths&lt;/em&gt; are required.&lt;/p&gt;
&lt;p&gt;The easiest way to enable the &lt;em&gt;kv-engine&lt;/em&gt; (kv) is via the UI (although it can also be done via the CLI):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Log into the Vault UI as the root&lt;/li&gt;
&lt;li&gt;By default, there should be a &lt;code&gt;secret&lt;/code&gt; path already visible under the &lt;code&gt;Secrets&lt;/code&gt; menu (the default screen once logged in), linked to a &lt;em&gt;kv engine&lt;/em&gt; (the description under the name &lt;em&gt;secret&lt;/em&gt; will specify &lt;em&gt;&amp;quot;v2 kv_xxx&amp;quot;&lt;/em&gt;)
&lt;ul&gt;
&lt;li&gt;If there is no &lt;code&gt;secret&lt;/code&gt; engine listed, OR if you would like to create another path, click &lt;code&gt;Enable new engine +&lt;/code&gt; on the top right-hand corner of the grid&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Generic -&amp;gt; KV&lt;/code&gt; (first option) and click &lt;code&gt;Next&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Specify the &lt;code&gt;Path&lt;/code&gt; - this will be the name under which all the key-value pairs will be stored. It can be anything, but should be something which makes sense to your usage (secrets, settings etc) and click &lt;code&gt;Enable Engine&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Step 1 done! - &lt;strong&gt;secrets engine enabled!&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id="secret"&gt;Secret&lt;/h4&gt;
&lt;p&gt;The next step is to add a test secret (key/value pair) to &lt;code&gt;secret&lt;/code&gt; area (the &lt;em&gt;secret&lt;/em&gt; path, or if a different path was manually in the above step, which name was specified there)&lt;/p&gt;
&lt;p&gt;For the next few steps, we'll switch to &lt;strong&gt;PowerShell&lt;/strong&gt; - first a login needs to be performed:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;vault login
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Type in the &lt;code&gt;root token&lt;/code&gt; once prompted, and you should have success (if the address environment variable was not configured, you may need to that as a parameter as well):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Key                  Value
---                  -----
token                some-root-token
token_accessor       D8XSBVu53WTDDktgjYGdOdDg
token_duration       ∞
token_renewable      false
token_policies       [&amp;quot;root&amp;quot;]
identity_policies    []
policies             [&amp;quot;root&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now to create the &lt;code&gt;key-value pair&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;vault kv put secret/firstapp secretkey=mypassword
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is instructing the CLI to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create/update a secret at the path &lt;code&gt;secret/firstapp&lt;/code&gt; (This will be the &lt;em&gt;folder&lt;/em&gt; and &lt;em&gt;subfolder&lt;/em&gt; where the secrets specific to this application will be stored)&lt;/li&gt;
&lt;li&gt;With a key of &lt;code&gt;secretkey&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;And a value of &lt;code&gt;mypassword&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Browsing to the Vault UI, there should now see a &lt;em&gt;path&lt;/em&gt; (folder) under &lt;code&gt;secret&lt;/code&gt; called &lt;em&gt;firstapp&lt;/em&gt; which contains one secret, with the key &lt;em&gt;secretkey&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This can also be verified using the CLI, by executing:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;vault kv get secret/firstapp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;====== Data ======
Key          Value
---          -----
secretkey    mypassword
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The standard used by this guide, is that each separate application will have its own path under &lt;code&gt;secret&lt;/code&gt; (e.g. &lt;em&gt;secret/appname&lt;/em&gt;), with each path with its own permissions. If configuring secrets for another application, then the above can be executed again, replacing &amp;quot;firstapp&amp;quot; with the new application's name.&lt;/p&gt;
&lt;p&gt;Step 2 done! - &lt;strong&gt;secret created successfully!&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id="approle"&gt;AppRole&lt;/h4&gt;
&lt;p&gt;Next up is enabling the &lt;code&gt;approle&lt;/code&gt; functionality - this will only need to be performed once on the Vault instance.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;approle&lt;/code&gt; auth method is designed to allow machines or applications to authenticate to the Vault using a &lt;em&gt;roleId and secretId&lt;/em&gt;. This step effectively just turns on this functionality in the Vault.&lt;/p&gt;
&lt;p&gt;To enable &lt;code&gt;approle&lt;/code&gt; execute the following command in PowerShell:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;vault auth enable approle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The successful response:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Success! Enabled approle auth method at: approle/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the &lt;code&gt;approle&lt;/code&gt; auth method has already been enabled, the following will be the response:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Error enabling approle auth: Error making API request.

URL: POST http://0.0.0.0:8200/v1/sys/auth/approle
Code: 400. Errors:

* path is already in use at approle/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step 3 done! - &lt;strong&gt;Approle functionality enabled!&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id="policy"&gt;Policy&lt;/h4&gt;
&lt;p&gt;Permission to a specific &lt;em&gt;path&lt;/em&gt; are controlled with a &lt;code&gt;policy&lt;/code&gt;. The &lt;code&gt;policy&lt;/code&gt; is configured, and then attached to one or more roles (roles are created in the next step), which allows an application authenticating with a specific &lt;em&gt;roleId and secretId&lt;/em&gt; to have specifically controlled access to one or more &lt;em&gt;paths&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;First create a &lt;code&gt;policy file&lt;/code&gt; (this can be used as a template for future applications), named &lt;code&gt;app-policy.hcl&lt;/code&gt; (although the name itself is not import):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;# Login with AppRole 
path &amp;quot;auth/approle/login&amp;quot; {
  capabilities =  [ &amp;quot;create&amp;quot;, &amp;quot;read&amp;quot; ]
} 

# Read data from secret/firstapp
path &amp;quot;secret/data/firstapp&amp;quot; {
  capabilities =  [ &amp;quot;read&amp;quot; ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This policy file allows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;create&lt;/em&gt; and &lt;em&gt;read&lt;/em&gt; permissions on the &lt;em&gt;auth/approle/login&lt;/em&gt; path. Effectively if an &lt;code&gt;approle&lt;/code&gt; is assigned this policy, it can login&lt;/li&gt;
&lt;li&gt;&lt;em&gt;read&lt;/em&gt; permissions on the &lt;em&gt;secret/data/firstapp&lt;/em&gt; path. The user entity assigned this policy can &lt;code&gt;only&lt;/code&gt; read the &lt;em&gt;key-value pairs&lt;/em&gt; &lt;code&gt;only&lt;/code&gt; on that specific path&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that we have a policy defined (in a file), it needs to be created in the Vault. Cchanging the file path to wherever the policy files is stored, execute:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;vault policy write firstapp-policy c:\app-policy.hcl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates a new policy called &lt;code&gt;firstapp-policy&lt;/code&gt;, using the contents of the &lt;code&gt;app-policy.hcl&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Step 4 done! - &lt;strong&gt;Policy create!&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id="role-with-policy"&gt;Role (with policy)&lt;/h4&gt;
&lt;p&gt;Finally, its time to &lt;code&gt;create the role&lt;/code&gt; (the application user), with the above defined policy assigned to it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;vault write auth/approle/role/firstapp-role policies=&amp;quot;firstapp-policy&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command creates a new role called &lt;code&gt;firstapp-role&lt;/code&gt;, and assigns it the policy called &lt;code&gt;firstapp-policy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Even though the role is now created, we have no information about it (yet). What is the &lt;em&gt;role-Id&lt;/em&gt; (name) and &lt;em&gt;secret-Id&lt;/em&gt; (password)?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Let's retrieve the &lt;em&gt;role-Id&lt;/em&gt; for the role:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;vault read auth/approle/role/firstapp-role/role-id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And &lt;em&gt;role-Id&lt;/em&gt; should be returned:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Key        Value
---        -----
role_id    cb476d64-4614-1038-0dd5-b344700f3f3a
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And then the &lt;em&gt;secret-Id&lt;/em&gt; for the role (notice the addition of the -f parameter):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;vault write -f auth/approle/role/firstapp-role/secret-id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And &lt;em&gt;secret-Id&lt;/em&gt; should be returned:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Key                   Value
---                   -----
secret_id             5c1587dc-83b0-fe15-cc8e-196e6b777150
secret_id_accessor    256b2ca7-5bce-3ce7-45b3-ceccc53fc6a3
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lastly, we can test the new credentials by using them to log in via the CLI:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;vault write auth/approle/login role_id=cb476d64-4614-1038-0dd5-b344700f3f3a secret_id=5c1587dc-83b0-fe15-cc8e-196e6b777150
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Receiving back a token along with other role information:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Key                     Value
---                     -----
token                   s.NWPZT9b6KuoakFfO9R9OZgPO
token_accessor          rl4mmRW0dDvvpevDlYjnkjKO
token_duration          768h
token_renewable         true
token_policies          [&amp;quot;default&amp;quot; &amp;quot;firstapp-policy&amp;quot;]
identity_policies       []
policies                [&amp;quot;default&amp;quot; &amp;quot;firstapp-policy&amp;quot;]
token_meta_role_name    firstapp-role
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;em&gt;token&lt;/em&gt; can be used to log into the UI to confirm what the &lt;em&gt;application will be able to see&lt;/em&gt;. If you try to browse to the &lt;em&gt;secret&lt;/em&gt; path, you may get a &lt;code&gt;Not Authorized&lt;/code&gt; message - this is because the policy linked to the application role, does not have permission to see a list of the folders under &lt;em&gt;secret&lt;/em&gt;.
If you browse directly to &lt;code&gt;http://localhost:8200/ui/vault/secrets/secret/show/firstapp&lt;/code&gt; however, you should see the list of secrets on that specific path - which the policy &lt;strong&gt;does allow&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Step 5 done! - &lt;strong&gt;Role successfully created!&lt;/strong&gt; (with roleId and secretId)&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="configuration-wrap-up"&gt;Configuration wrap-up&lt;/h3&gt;
&lt;p&gt;We have now successfully configured the Vault instance with all the functionality we need for &lt;code&gt;basic integration&lt;/code&gt;. We also looked at creating a &lt;code&gt;policy&lt;/code&gt; and creating and linking an &lt;code&gt;app role&lt;/code&gt; to policy.&lt;/p&gt;
&lt;p&gt;Next up, we'll look at some C# code, using &lt;code&gt;VaultSharp&lt;/code&gt; to integrate with the Vault.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="vaultsharp"&gt;VaultSharp&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/rajanadar/VaultSharp"&gt;VaultSharp&lt;/a&gt; describes itself as &lt;em&gt;the most comprehensive cross-platform .NET Library for HashiCorp's Vault&lt;/em&gt;, and simplifies the integration into HashiCorp Vault when using .NET.&lt;/p&gt;
&lt;p&gt;For most operations performed on the Vault via code, &lt;code&gt;VaultSharp&lt;/code&gt; is the easiest way, however there are some operations which I was unable to do using VaultSharp, in which case the integration needs to be handled manually (see the next section onthe REST api).&lt;/p&gt;
&lt;p&gt;For the below samples, a NuGet package reference to &lt;code&gt;VaultSharp 1.7.0.4&lt;/code&gt; was added to a C# project.&lt;/p&gt;
&lt;h3 id="reading-secrets"&gt;Reading secrets&lt;/h3&gt;
&lt;p&gt;Now that we finally have a correctly setup and configured Vault, with credentials for our application, we can finally try to connect via C# code.&lt;/p&gt;
&lt;p&gt;Once the Vault is configured, connecting and interacting with it via C# code is very easy:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Use the roleId and secretId generated
IAuthMethodInfo authMethod = new AppRoleAuthMethodInfo(
    &amp;quot;cb476d64-4614-1038-0dd5-b344700f3f3a&amp;quot;, 
    &amp;quot;5c1587dc-83b0-fe15-cc8e-196e6b777150&amp;quot;);

var vaultClientSettings = 
    new VaultClientSettings(&amp;quot;http://127.0.0.1:8200&amp;quot;, authMethod);

IVaultClient vaultClient = new VaultClient(vaultClientSettings);

try
{
    // the &amp;quot;mountPoint&amp;quot; is the root path
    // the &amp;quot;path&amp;quot; is the rest of the path
    Secret&amp;lt;SecretData&amp;gt; secrets = await vaultClient
        .V1.Secrets.KeyValue.V2.ReadSecretAsync(
            path: &amp;quot;firstapp&amp;quot;, mountPoint: &amp;quot;secret&amp;quot;);

    // access all the key-value pairs
    foreach(var item in secrets.Data.Data)
    {
        Console.WriteLine($&amp;quot;key:'{item.Key}' value:'{item.Value}'&amp;quot;);
    }
}
catch (Exception ex)
{
    // try-catch just here for now to help 
    // debug any connection issues
    _ = ex;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Going through the official &lt;em&gt;VaultSharp&lt;/em&gt; documentation, it wasn't immediately obvious what the values of &lt;em&gt;path&lt;/em&gt; and &lt;em&gt;mountPoint&lt;/em&gt; should be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mountPoint&lt;/code&gt;: is the root path to read from, &lt;em&gt;secret&lt;/em&gt; in our case. If a &lt;code&gt;key-value pair&lt;/code&gt; engine was added with a different name when configuring Vault in the previous steps, then this would be that value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;: this is the path, excluding the root, from which the key-value pairs are retrieved. This allows for fine control over which &lt;em&gt;path&lt;/em&gt; (or folder) to read the secrets from&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The output from executing the above:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;key:'secretkey' value:'mypassword'
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="writing-secrets"&gt;Writing secrets&lt;/h3&gt;
&lt;p&gt;As it stands, &lt;code&gt;permission denied&lt;/code&gt; error will occur if trying to &lt;em&gt;write&lt;/em&gt; a secret - this is because our application role is linked to the &lt;code&gt;firstapp-policy&lt;/code&gt;, which only has &lt;code&gt;read&lt;/code&gt; permissions to the &lt;em&gt;firstapp&lt;/em&gt; path.&lt;/p&gt;
&lt;p&gt;So to be able to create secrets using the approle credentials, the &lt;code&gt;policy linked to it need to be updated&lt;/code&gt;. This can be done either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the Vault user interface, by logging in as the root user, browsing to &lt;code&gt;Policies -&amp;gt; firstapp-policy -&amp;gt; Edit policy&lt;/code&gt; and editing the policy directly&lt;/li&gt;
&lt;li&gt;Or by &lt;code&gt;updating the policy file&lt;/code&gt;, then executing the following command again to write the update policy to the Vault (updating the existing one):
&lt;pre&gt;&lt;code class="language-powershell"&gt;vault policy write firstapp-policy C:\app-policy.hcl
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whether using the Vault UI or editing the file, the &lt;code&gt;update&lt;/code&gt; permissions needs to be added to the policy capabilities, and the policy should look as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;# Login with AppRole 
path &amp;quot;auth/approle/login&amp;quot; {
  capabilities =  [ &amp;quot;create&amp;quot;, &amp;quot;read&amp;quot; ]
} 

# Read data from secret/firstapp
path &amp;quot;secret/data/firstapp&amp;quot; {
  capabilities =  [ &amp;quot;read&amp;quot;, &amp;quot;update&amp;quot; ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the policy updated, the role now has permissions to &lt;code&gt;create/write&lt;/code&gt; secrets:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;IAuthMethodInfo authMethod = new AppRoleAuthMethodInfo(
    &amp;quot;cb476d64-4614-1038-0dd5-b344700f3f3a&amp;quot;, 
    &amp;quot;5c1587dc-83b0-fe15-cc8e-196e6b777150&amp;quot;);

var vaultClientSettings = 
    new VaultClientSettings(&amp;quot;http://127.0.0.1:8200&amp;quot;, authMethod);

IVaultClient vaultClient = new VaultClient(vaultClientSettings);

try
{
    var newSecrets = new Dictionary&amp;lt;string, object&amp;gt;
    {
        [&amp;quot;DbPassword&amp;quot;] = &amp;quot;password123&amp;quot;
    };

    // Patch method called
    await vaultClient.V1.Secrets.KeyValue.V2.PatchSecretAsync(
        path: &amp;quot;firstapp&amp;quot;, newSecrets, mountPoint: &amp;quot;secret&amp;quot;);
}
catch (Exception ex)
{
    _ = ex;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="quirks-and-tips"&gt;Quirks and tips&lt;/h2&gt;
&lt;p&gt;These are a few quirks I've encountered working with Vault and VaultSharp, which was not obvious while initially getting the two to integrate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Policy path vs Code path&lt;/code&gt;:
Its not immediately obvious when going through documentation, but in the policy &lt;code&gt;data&lt;/code&gt; (or &lt;code&gt;metadata&lt;/code&gt;) is added to the path, for example, &lt;code&gt;secret/data/firstapp&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;path &amp;quot;secret/data/firstapp&amp;quot; {
    capabilities =  [ &amp;quot;read&amp;quot;, &amp;quot;update&amp;quot; ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However when using &lt;code&gt;VaultSharp&lt;/code&gt;, or the &lt;code&gt;CLI&lt;/code&gt; to retrieve secrets, the &lt;code&gt;data&lt;/code&gt; portion is dropped:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using CLI:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;    vault kv get secret/firstapp
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using VaultSharp:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    await vaultClient.V1.Secrets.KeyValue.V2.ReadSecretAsync(
        path: &amp;quot;firstapp&amp;quot;, mountPoint: &amp;quot;secret&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Write secret vs Patch secret&lt;/code&gt;:
In Vault, when changing the secrets in a &lt;em&gt;path&lt;/em&gt; (folder), a new version of the &lt;em&gt;path&lt;/em&gt; is created with the updated version of the secrets.&lt;br /&gt;
When &lt;code&gt;writing&lt;/code&gt; or using &lt;em&gt;put&lt;/em&gt; to create a secret, &lt;code&gt;all previous secrets will be lost&lt;/code&gt; and a &lt;code&gt;new version of the path created, with just the new secret&lt;/code&gt;.&lt;br /&gt;
However when &lt;code&gt;patching&lt;/code&gt; then &lt;code&gt;all secrets in the current version are brought into the new version&lt;/code&gt;, along with any changes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Write/Put&lt;/code&gt;: Existing secrets are lost in the new version:&lt;/p&gt;
&lt;p&gt;In PowerShell:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;vault kv put secret/firstapp newkey=mynewpassword
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And in C# code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var newSecrets = new Dictionary&amp;lt;string, object&amp;gt;
{
    [&amp;quot;newkey&amp;quot;] = &amp;quot;mynewpassword&amp;quot;
};
// WriteSecretAsync is used here, vs PatchSecretAsync
await vaultClient.V1.Secrets.KeyValue.V2.WriteSecretAsync(
    path: &amp;quot;firstapp&amp;quot;, newSecrets, mountPoint: &amp;quot;secret&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Patch&lt;/code&gt;: Existing secrets are brought into the new version:&lt;/p&gt;
&lt;p&gt;In PowerShell:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;vault kv patch secret/firstapp newkey=mynewpassword
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And in C# code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var newSecrets = new Dictionary&amp;lt;string, object&amp;gt;
{
    [&amp;quot;newkey&amp;quot;] = &amp;quot;mynewpassword&amp;quot;
};
// PatchSecretAsync is used here, vs WriteSecretAsync
await vaultClient.V1.Secrets.KeyValue.V2.PatchSecretAsync(
    path: &amp;quot;firstapp&amp;quot;, newSecrets, mountPoint: &amp;quot;secret&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id="rest-api"&gt;Rest API&lt;/h2&gt;
&lt;p&gt;In certain cases, &lt;code&gt;VaultSharp&lt;/code&gt; does not provide functionality available via the Vault CLI (or at least, I was not able to find it amongst the VaultSharp code or documentation) - in these cases an alternative option has to be used. Luckily, Vault exposes all it's functionality via a REST api (which is what the CLI actually uses as well). This means any functionality available from the CLI can be reproduced in code by doing an HTTP call.&lt;/p&gt;
&lt;p&gt;An example of a call which &lt;code&gt;VaultSharp&lt;/code&gt; does not (at the time of writing this post) support, is the ability to &lt;code&gt;create an app role though code&lt;/code&gt;. This is possible via the CLI, as it was done in previous steps:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;vault write auth/approle/role/firstapp-role policies=&amp;quot;firstapp-policy&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we want to be able to perform this functionality vai code, it'll have to be via an HTTP call. Let's write some C# code to setup the permission for a new application. It will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a policy for a new application (using VaultSharp)&lt;/li&gt;
&lt;li&gt;Create an approle for a new application (using the REST API)&lt;/li&gt;
&lt;li&gt;Get the &lt;em&gt;roleId&lt;/em&gt; for the newly created role (using the REST API)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id="policy-creation"&gt;Policy creation&lt;/h3&gt;
&lt;p&gt;VaultSharp does have functionality to create policies, so VaultSharp can be leveraged for this step:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// use the root token (or preferably another token which has permissions)
IAuthMethodInfo authMethod = new TokenAuthMethodInfo(config.Token);
var vaultClientSettings = new VaultClientSettings(config.Url, authMethod);

IVaultClient vaultClient = new VaultClient(vaultClientSettings);

// specify the application name
var applicationName = &amp;quot;newapplication&amp;quot;;
// define the policy as a string
string appPolicy = &amp;#64;&amp;quot;
    # Login with AppRole 
    path &amp;quot;&amp;quot;auth/approle/login&amp;quot;&amp;quot; {{
    capabilities =  [&amp;quot;&amp;quot;create&amp;quot;&amp;quot;, &amp;quot;&amp;quot;read&amp;quot;&amp;quot;]
    }}

    # Read test data (v2)
    path &amp;quot;&amp;quot;secret/data/{0}&amp;quot;&amp;quot; {{
    capabilities =  [&amp;quot;&amp;quot;read&amp;quot;&amp;quot;]
    }}&amp;quot;;

    // define the policy. 
    var policy = new ACLPolicy
    {
        Name = String.Format($&amp;quot;{applicationName}-policy&amp;quot;, applicationName),
        Policy = String.Format(appPolicy, applicationName)
    };

    // create the policy
    await vaultClient.V1.System.WriteACLPolicyAsync(policy);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here a different &lt;em&gt;IAuthMethodInfo&lt;/em&gt; implementation is used vs the previous examples - this is because this operation is being performed by the &lt;em&gt;root user&lt;/em&gt; (or preferably another &amp;quot;admin&amp;quot; user/token with similar permissions). Apart from that, the usage of the VaultSharp library remains the same.&lt;/p&gt;
&lt;p&gt;Step 1 done! - &lt;strong&gt;Policy created successfully!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now that we have a policy, let's look at using &lt;code&gt;HttpClient&lt;/code&gt; to call the REST api to create an &lt;code&gt;approle&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="approle-creation"&gt;Approle creation&lt;/h3&gt;
&lt;p&gt;Invoking the REST api methods is similar to using the CLI, so the CLI command can be used as a template for the HTTP call:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;vault write auth/approle/role/firstapp-role policies=&amp;quot;firstapp-policy&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Translating this into C#:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// specify the application name
var applicationName = &amp;quot;newapplication&amp;quot;;

// Ideally getting the client is done via the HttpClientFactory
var httpClient = new HttpClient();
httpClient.BaseAddress = new Uri(&amp;quot;http://localhost:8200&amp;quot;);

// this is the same path as used in the CLI, just with v1 pre-pended
HttpRequestMessage requestMessage = new(
    HttpMethod.Post, $&amp;quot;v1/auth/approle/role/{applicationName}-role&amp;quot;);

// add the token as a header to the request
requestMessage.Headers.Add(&amp;quot;X-Vault-Token&amp;quot;, &amp;quot;some-root-token&amp;quot;);

// set the contents of the request in json representation of the same
// params passed in the CLI
requestMessage.Content = new StringContent(
    $&amp;quot;{{\&amp;quot;policies\&amp;quot;: \&amp;quot;{applicationName}-policy\&amp;quot;}}&amp;quot;, 
    Encoding.UTF8, &amp;quot;application/json&amp;quot;);
// send the request!
var response = await httpClient.SendAsync(requestMessage);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step 2 done! - &lt;strong&gt;Approle created successfully!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assuming no errors have occurred, the &lt;code&gt;approle&lt;/code&gt; is now created - we just need to lookup the &lt;em&gt;roleId&lt;/em&gt; and &lt;em&gt;secretId&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="roleid-lookup"&gt;RoleId lookup&lt;/h3&gt;
&lt;p&gt;Performing the &lt;em&gt;roleId&lt;/em&gt; follows very similar steps to the approle creation.&lt;/p&gt;
&lt;p&gt;For reference, the powershell to perform this action:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;vault read auth/approle/role/firstapp-role/role-id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And converting this into C# code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// specify the application name
var applicationName = &amp;quot;newapplication&amp;quot;;

// Ideally getting the client is done via the HttpClientFactory
var httpClient = new HttpClient();
httpClient.BaseAddress = new Uri(&amp;quot;http://localhost:8200&amp;quot;);

// this is the same path as used in the CLI, just with v1 pre-pended
HttpRequestMessage requestMessage = 
    new(HttpMethod.Get, $&amp;quot;v1/auth/approle/role/{applicationName}-role/role-id&amp;quot;);
// add the token as a header to the request
requestMessage.Headers.Add(&amp;quot;X-Vault-Token&amp;quot;, &amp;quot;some-root-token&amp;quot;);

// send the request!
var response = await httpClient.SendAsync(requestMessage);

if (!response.IsSuccessStatusCode)
{
    throw new HttpRequestException(
        $&amp;quot;Error getting role id: {response.ReasonPhrase}&amp;quot;, 
        null, 
        response.StatusCode);
}

var roleResponse = await response.Content.ReadFromJsonAsync&amp;lt;GetRoleIdResponse&amp;gt;();

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;em&gt;GetRoleIdResponse&lt;/em&gt; entity is a custom class which is defined as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class GetRoleIdResponse
{
    public GetRoleDataResponse data { get; set; }
}

public class GetRoleDataResponse
{
    public Guid role_id { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step 3 done! - &lt;strong&gt;RoleId retrieved successfully!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The same process can be applied to lookup the &lt;em&gt;secretId&lt;/em&gt;, as well as execute any other Vault CLI command.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="in-summary"&gt;In summary&lt;/h2&gt;
&lt;p&gt;In this post we had a look at how to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Successfully running an instance of the HashiCorp vault using
&lt;ul&gt;
&lt;li&gt;The Windows binary&lt;/li&gt;
&lt;li&gt;A Docker image&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Vault configuration steps required to be able to connect with an app level roleId and secretId:
&lt;ul&gt;
&lt;li&gt;Enabling the key-value pair engine&lt;/li&gt;
&lt;li&gt;Creating a &lt;em&gt;path&lt;/em&gt; to hold secrets&lt;/li&gt;
&lt;li&gt;Enabling the approle authentication method&lt;/li&gt;
&lt;li&gt;Creating a policy&lt;/li&gt;
&lt;li&gt;Creating a role and linking a policy to it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using VaultSharp to read secrets from, and write secrets to the Vault&lt;/li&gt;
&lt;li&gt;Using the Vault Rest API to perform functionality comparable to the Vault CLI (especially for use cases not covered by VaultSharp)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The hope is this guide will help others not have to go through some of the struggles I encountered while integrating with, and exploring the HashiCorp Vault functionality for the first time.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.vaultproject.io/"&gt;HashiCorp Vault&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.vaultproject.io/downloads"&gt;HashiCorp Vault Download&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.docker.com/products/docker-desktop/"&gt;Docker Desktop&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://hub.docker.com/_/vault"&gt;Vault on DockerHub&lt;/a&gt;&lt;br /&gt;
&lt;a href="hhttps://learn.hashicorp.com/tutorials/vault/dotnet-httpclient"&gt;HashiCorp Vault C# client with .NET Core Guide&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/hashicorp/vault-guides"&gt;HashiCorp Vault Guide repository&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/rajanadar/VaultSharp"&gt;VaultSharp&lt;/a&gt;&lt;/p&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/10-sql-over</id>
		<title>An intro to SQL SELECT-OVER</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/10-sql-over" />
		<updated>2022-08-10T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The SQL &lt;code&gt;OVER&lt;/code&gt; clause can be used to define a window or user-specified set of rows within a result set. This effectively &lt;code&gt;allows computed values&lt;/code&gt; (AVG, MAX in the below examples) to be &lt;code&gt;executed over different sets of data&lt;/code&gt;, in the &lt;code&gt;same query&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Some examples below should make this clearer.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="audit-table"&gt;Audit table&lt;/h2&gt;
&lt;p&gt;In our examples below, we are using an &lt;code&gt;Audit&lt;/code&gt; table which stored the average execution time for a process on a server for a specific day. The table will store the server name, as well as the average execution time (in milliseconds):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * FROM Audit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A sample output of the data for a few servers:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Id          Created                 Server          ExecutionInMs
----------- ----------------------- --------------- -------------
230001      2022-07-15 06:38:54.710 Server1         2420
230002      2022-07-15 06:38:54.710 Server2         4176
230003      2022-07-15 06:38:54.710 Server3         6291
230004      2022-07-15 06:38:54.710 Server4         2508
230005      2022-07-15 06:38:54.710 Server5         6690
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="use-case"&gt;Use case&lt;/h3&gt;
&lt;p&gt;In our use case, we want to see the &lt;code&gt;average execution&lt;/code&gt; time for each server along with the &lt;code&gt;average across all servers&lt;/code&gt;, to determine if any specific server(s) are executing excessively above the average. Also to include is &lt;code&gt;MIN and MAX execution time across all servers&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In our example we only have 100 server, so one could potentially just manually look at the data to see the &lt;code&gt;MIN and MAX&lt;/code&gt; - but imagine the same scenario at scale with hundreds or thousands of server. Not as easy to do manually.&lt;/p&gt;
&lt;h2 id="without-over"&gt;Without OVER&lt;/h2&gt;
&lt;h3 id="averages"&gt;Averages&lt;/h3&gt;
&lt;p&gt;First step, is to get the &lt;code&gt;average across all servers&lt;/code&gt; and the following is a method to do it - using a sub query to perform the &lt;code&gt;average across all data&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT Server, ExecutionInMs,
	(
		SELECT AVG(ExecutionInMs) FROM Audit
	) as TotalAverageExecutionTime
FROM Audit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another way could be to &lt;em&gt;SELECT&lt;/em&gt; the value into a variable and then include that in the final &lt;em&gt;SELECT&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;DECLARE &amp;#64;TotalAverageExecutionTime int
SELECT &amp;#64;TotalAverageExecutionTime = AVG(ExecutionInMs) FROM Audit

SELECT Server, ExecutionInMs, &amp;#64;TotalAverageExecutionTime as TotalAverageExecutionTime
FROM Audit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both techniques return the same result set:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Server           ExecutionInMs TotalAverageExecutionTime
---------------- ------------- -------------------------
Server1          2420          4551
Server2          4176          4551
Server3          6291          4551
Server4          2508          4551
Server5          6690          4551
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This approach is required as we are trying to combine operations &lt;code&gt;across different datasets&lt;/code&gt; - the dataset of a set of rows and the dataset of all the information combined (the &lt;code&gt;AVG&lt;/code&gt;).&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="min-and-max"&gt;MIN and MAX&lt;/h3&gt;
&lt;p&gt;The same problem occurs with using &lt;code&gt;MIN and MAX&lt;/code&gt;. Here is a sample of what the query would look like using &lt;code&gt;sub-queries&lt;/code&gt; to get all the information required:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT 
	Server, 
        ExecutionInMs,
	(
		SELECT AVG(ExecutionInMs) FROM Audit
	) as TotalAverageExecutionTime,
	(
		SELECT MIN(ExecutionInMs) FROM Audit
	) as TotalMinExecutionTime,
	(
		SELECT Max(ExecutionInMs) FROM Audit
	) as TotalMaxExecutionTime
FROM Audit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With all of this, we have the information we require:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Server          ExecutionInMs TotalAverageExecutionTime TotalMinExecutionTime TotalMaxExecutionTime
--------------- ------------- ------------------------- --------------------- ---------------------
Server1         2420          4551                      2027                  10600
Server2         4176          4551                      2027                  10600
Server3         6291          4551                      2027                  10600
Server4         2508          4551                      2027                  10600
Server5         6690          4551                      2027                  10600
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While this is all valid, but there is a easier and simpler way, using the &lt;code&gt;OVER clause&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="with-over"&gt;With OVER&lt;/h2&gt;
&lt;h3 id="averages-1"&gt;Averages&lt;/h3&gt;
&lt;p&gt;As mentioned in the intro - the &lt;code&gt;OVER&lt;/code&gt; clause can be used to &lt;em&gt;define a window or user-specified set of rows within a result set&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We can select the base table information, and then use the &lt;code&gt;OVER&lt;/code&gt; clause to define a separate result set to perform the &lt;code&gt;AVG&lt;/code&gt; on, &lt;code&gt;in the same query&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT	
    Server, 
    ExecutionInMs, 
    AVG(ExecutionInMs) OVER()
FROM Audit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The additional of &lt;code&gt;OVER()&lt;/code&gt; with no parameters passed in, means: &lt;code&gt;over the entire dataset&lt;/code&gt;. So in the query the &lt;em&gt;Server&lt;/em&gt; and &lt;em&gt;ExecutionInMs&lt;/em&gt; is returned for each row in the base data, while the &lt;code&gt;AVG is executed over the entire dataset of all rows&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Definitely cleaner, easier and more concise than the other methods shown above without &lt;code&gt;OVER&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="min-and-max-1"&gt;MIN and MAX&lt;/h3&gt;
&lt;p&gt;The same solution can be used for &lt;code&gt;MIN and MAX&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT	
    Server, 
    ExecutionInMs, 
    AVG(ExecutionInMs) OVER() as TotalAverageExecutionTime,
    MIN(ExecutionInMs) OVER() as TotalMinExecutionTime,
    MAX(ExecutionInMs) OVER() as TotalMaxExecutionTime
FROM Audit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have our final required results:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Server           ExecutionInMs TotalAverageExecutionTime TotalMinExecutionTime TotalMaxExecutionTime
---------------- ------------- ------------------------- --------------------- ---------------------
Server1          2420          4551                      2027                  10600
Server2          4176          4551                      2027                  10600
Server3          6291          4551                      2027                  10600
Server4          2508          4551                      2027                  10600
Server5          6690          4551                      2027                  10600
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="calculations"&gt;Calculations&lt;/h2&gt;
&lt;p&gt;Calculations can also be performed on the data output by using &lt;code&gt;OVER&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;In this example, the percentage above the total average for each server is calculated, and then each server is ranked by how far they are above the average:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT	
    Server, 
    ExecutionInMs, 
    AVG(ExecutionInMs) OVER() as TotalAverageExecutionTime,
    MIN(ExecutionInMs) OVER() as TotalMinExecutionTime,
    MAX(ExecutionInMs) OVER() as TotalMaxExecutionTime,
    (CONVERT(decimal, ExecutionInMs) / CONVERT(decimal, AVG(ExecutionInMs) OVER())) * 100
FROM Audit
ORDER BY 6 DESC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the results, we can see that &lt;code&gt;Server10&lt;/code&gt; is executing over &lt;code&gt;two times slower than the average&lt;/code&gt;!&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Server          ExecutionInMs TotalAverageExecutionTime TotalMinExecutionTime TotalMaxExecutionTime 
--------------- ------------- ------------------------- --------------------- --------------------- ---------------------
Server10        10600         4551                      2027                  10600                 232.9158426719402329
Server50        7000          4551                      2027                  10600                 153.8123489343001538
Server77        6950          4551                      2027                  10600                 152.7136892990551527
Server90        6941          4551                      2027                  10600                 152.5159305647110525
Server56        6899          4551                      2027                  10600                 151.5930564711052516
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="partition"&gt;Partition&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;PARTITION&lt;/code&gt; keyword can also be used in conjunction with the &lt;code&gt;OVER&lt;/code&gt; to create multiple smaller datasets &lt;em&gt;partitioned&lt;/em&gt; by the specified field.&lt;/p&gt;
&lt;p&gt;For the below example, suppose a requirement has come into also include the average for each &lt;em&gt;second&lt;/em&gt; - that is, the &lt;code&gt;average for all server's where the execution time is between 4000-4999ms&lt;/code&gt;, the average where the execution time is &lt;code&gt;between 5000-5999ms etc&lt;/code&gt;. Maybe there is a threshold above which the execution jumps drastically?&lt;/p&gt;
&lt;p&gt;First, let's include a clause to get the first digit of the &lt;em&gt;ExecutionTimeInMs&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT	
    Server, 
    ExecutionInMs,
    SUBSTRING(CAST(ExecutionInMs as varchar), 1, 1) as FirstDigit,
    AVG(ExecutionInMs) OVER() as TotalAverageExecutionTime,
    MIN(ExecutionInMs) OVER() as TotalMinExecutionTime,
    MAX(ExecutionInMs) OVER() as TotalMaxExecutionTime,
    (CONVERT(decimal, ExecutionInMs) / CONVERT(decimal, AVG(ExecutionInMs) OVER())) * 100
FROM Audit
ORDER BY 6 DESC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From there, we can now use this field to create multiple datasets on which the &lt;code&gt;AVG&lt;/code&gt; is &lt;code&gt;PARTITIONED&lt;/code&gt; by:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT	
    Server, 
    ExecutionInMs,
    SUBSTRING(CAST(ExecutionInMs as varchar), 1, 1) as FirstDigit,
    AVG(ExecutionInMs) OVER(PARTITION BY SUBSTRING(CAST(ExecutionInMs as varchar), 1, 1)) as SecondAverageInMs,
    AVG(ExecutionInMs) OVER() as TotalAverageExecutionTime,
    MIN(ExecutionInMs) OVER() as TotalMinExecutionTime,
    MAX(ExecutionInMs) OVER() as TotalMaxExecutionTime,
    (CONVERT(decimal, ExecutionInMs) / CONVERT(decimal, AVG(ExecutionInMs) OVER())) * 100
FROM Audit
ORDER BY 6 DESC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A sample of the results:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Server          ExecutionInMs FirstDigit SecondAverageInMs TotalAverageExecutionTime TotalMinExecutionTime TotalMaxExecutionTime 
--------------- ------------- ---------- ----------------- ------------------------- --------------------- --------------------- --------------------
Server91        2813          2          2508              4551                      2027                  10600                 61.8105910788837618
Server92        2295          2          2508              4551                      2027                  10600                 50.4284772577455504
Server95        2159          2          2508              4551                      2027                  10600                 47.4401230498791474
Server96        2566          2          2508              4551                      2027                  10600                 56.3832124807734564
Server93        3818          3          3538              4551                      2027                  10600                 83.8936497473082839
Server100       3127          3          3538              4551                      2027                  10600                 68.7101735882223687
Server70        3348          3          3538              4551                      2027                  10600                 73.5662491760052736

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the result, we now have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;average&lt;/code&gt; across a specific &lt;code&gt;partition&lt;/code&gt; - records which start with the same digit for &lt;em&gt;ExecutionInMs&lt;/em&gt; will have the same average&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;average&lt;/code&gt; across the entire dataset - all records will have the same average&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id="row-numbering"&gt;Row Numbering&lt;/h2&gt;
&lt;p&gt;A use case which often comes up (and which I've used, without fully understanding the inner workings) - and that is to &lt;code&gt;number each row&lt;/code&gt; and specifically &lt;code&gt;number each row over a group/partition&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ROW_NUMBER&lt;/code&gt; function is used with the &lt;code&gt;OVER&lt;/code&gt; and &lt;code&gt;ORDER BY&lt;/code&gt; clauses to give each row a number, based on the &lt;code&gt;ORDER BY&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here, each row is given a number, ordered by the &lt;em&gt;ExecutionInMs&lt;/em&gt; from largest to smallest:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT ROW_NUMBER() OVER(ORDER BY ExecutionInMs DESC), Server, ExecutionInMs
FROM Audit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A sample of the output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;                     Server           ExecutionInMs
-------------------  ---------------- -------------
1                    Server10         10600
2                    Server50         7000
3                    Server77         6950
4                    Server90         6941
5                    Server56         6899
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can also be used with the &lt;code&gt;PARTITION&lt;/code&gt; clause to generate row numbers within a specific sub-dataset.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;If working with an ORM (such as Entity Framework), this may not be something for every day use. However, investigations and troubleshooting will still need to be performed on the data, in which case knowledge of the usage of &lt;code&gt;OVER&lt;/code&gt; and &lt;code&gt;PARTITION&lt;/code&gt; can prove to be invaluable. In addition if using an ORM which does generate SQL using &lt;code&gt;OVER&lt;/code&gt; its important to understand the SQL and how the code effects the SQL generation.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/queries/select-over-clause-transact-sql?view=sql-server-ver16"&gt;SELECT - OVER Clause (Transact-SQL)&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;135: 10-08-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/09-periodic-timer</id>
		<title>Accurate, regular scheduling with PeriodicTimer</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/09-periodic-timer" />
		<updated>2022-08-09T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;.NET 6 introduced a new timer, the &lt;code&gt;PeriodicTimer&lt;/code&gt; which provides a more regular, accurate and reliable way to run code on a specific interval when compared with previous methods.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="task.delay"&gt;Task.Delay&lt;/h2&gt;
&lt;p&gt;Consider a simple background process which needs to run every second:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;async Task StartJobAsync(CancellationToken token)
{
    while (!token.IsCancellationRequested)
    {
        Console.WriteLine(DateTime.Now.ToString(&amp;quot;O&amp;quot;));
        
        // Do work
        
        await Task.Delay(1000, token);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The method is started, and while a cancellation is not requested via the &lt;em&gt;CancellationToken&lt;/em&gt;, the date time is output, and &lt;em&gt;work&lt;/em&gt; is done.&lt;/p&gt;
&lt;p&gt;Executing the above as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var cancelSource = new CancellationTokenSource();
var jobTask = StartJobAsync(cancelSource.Token);

Console.ReadKey();
cancelSource.Cancel();
Console.ReadKey();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Provides the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;2022-07-13T19:48:38.9682679+02:00
2022-07-13T19:48:39.9743395+02:00
2022-07-13T19:48:40.9755190+02:00
2022-07-13T19:48:41.9913331+02:00
2022-07-13T19:48:42.9977149+02:00
2022-07-13T19:48:44.0130672+02:00
2022-07-13T19:48:45.0289959+02:00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even without any work being done in the iteration, the loop does not iterate every second - in &lt;code&gt;second 43 no work is done at all&lt;/code&gt;. At time goes on the divergence from the start time will just grow larger.&lt;/p&gt;
&lt;p&gt;This divergence is even more evident if a job is executed and takes longer than the interval:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;async Task StartJobAsync(CancellationToken token)
{
    while (!token.IsCancellationRequested)
    {
        Console.WriteLine(DateTime.Now.ToString(&amp;quot;O&amp;quot;));

        // generate a random number between 0 and 3
        var random = new Random();
        if (random.Next(3) == 1)
        {
            // if the random number was 1, simulate a long 
            // running job
            Console.WriteLine(&amp;quot;Running long&amp;quot;);
            await Task.Delay(1500);
        }

        await Task.Delay(1000, token);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the random &lt;em&gt;work&lt;/em&gt; being performed takes &lt;code&gt;1.5 second&lt;/code&gt;, so instead of the loop taking &lt;code&gt;1 second&lt;/code&gt;, it becomes &lt;code&gt;2.5 seconds&lt;/code&gt;. If the work being done is variable in time, then the interval also becomes varied and irregular:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;2022-07-13T19:54:18.5637838+02:00
2022-07-13T19:54:19.6099211+02:00
2022-07-13T19:54:20.6106040+02:00
Running long
2022-07-13T19:54:23.1278907+02:00
2022-07-13T19:54:24.1338937+02:00
2022-07-13T19:54:25.1360588+02:00
2022-07-13T19:54:26.1519535+02:00
Running long
2022-07-13T19:54:28.6815481+02:00
2022-07-13T19:54:29.6844306+02:00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This might be sufficient, however if a more regular, consistent interval is required, look no further than the &lt;code&gt;PeriodicTimer&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="periodic-timer"&gt;Periodic Timer&lt;/h2&gt;
&lt;p&gt;.NET 6 introduce the &lt;code&gt;PeriodicTimer&lt;/code&gt; which runs on a more regular, predictable schedule, using more modern practices:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;async Task StartJobAsync(CancellationToken token)
{
    // define the timer to tick every second
    var timer = new PeriodicTimer(TimeSpan.FromMilliseconds(1000));

    // loop every tick while the token has not been cancelled
    while (await timer.WaitForNextTickAsync() &amp;amp;&amp;amp; !token.IsCancellationRequested)
    {
        Console.WriteLine(DateTime.Now.ToString(&amp;quot;O&amp;quot;));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the &lt;code&gt;PeriodicTimer&lt;/code&gt; the interval period is defined when the timer is declared, and the &lt;em&gt;WaitForNextTickAsync&lt;/em&gt; method will return true every interval period.&lt;/p&gt;
&lt;p&gt;Executing the above as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var cancelSource = new CancellationTokenSource();
var jobTask = StartJobAsync(cancelSource.Token);

Console.ReadKey();
cancelSource.Cancel();
Console.ReadKey();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Provides the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;2022-07-14T07:23:29.1553510+02:00
2022-07-14T07:23:30.1430203+02:00
2022-07-14T07:23:31.1502777+02:00
2022-07-14T07:23:32.1522676+02:00
2022-07-14T07:23:33.1541686+02:00
2022-07-14T07:23:34.1603689+02:00
2022-07-14T07:23:35.1475597+02:00
2022-07-14T07:23:36.1498775+02:00
2022-07-14T07:23:37.1561782+02:00
2022-07-14T07:23:38.1425797+02:00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are variations on the milliseconds, but the &lt;code&gt;PeriodicTimer&lt;/code&gt; will adjust to keep it as regular as possible.&lt;/p&gt;
&lt;p&gt;When introducing &lt;em&gt;work&lt;/em&gt; which exceeds the interval period, the &lt;code&gt;PeriodTimer&lt;/code&gt; will still try to adjust to keep the ticks as regular as it can:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;async Task StartJobAsync(CancellationToken token)
{
    var timer = new PeriodicTimer(TimeSpan.FromMilliseconds(1000));

    while (await timer.WaitForNextTickAsync() &amp;amp;&amp;amp; !token.IsCancellationRequested)
    {
        Console.WriteLine(DateTime.Now.ToString(&amp;quot;O&amp;quot;));

        // randomly perform some work which takes 1.5 seconds
        var random = new Random();
        if (random.Next(3) == 1)
        {
            Console.WriteLine(&amp;quot;Running long&amp;quot;);
            await Task.Delay(1500);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the results one can see that if a tick gets skipped due to the work running long, the next tick will &lt;code&gt;align with the starting tick&lt;/code&gt; and not when the previous tick completed:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;2022-07-14T07:27:22.2437461+02:00
Running long
2022-07-14T07:27:23.7708051+02:00
2022-07-14T07:27:24.2487034+02:00
2022-07-14T07:27:25.2491709+02:00
Running long
2022-07-14T07:27:26.7629854+02:00
2022-07-14T07:27:27.2392793+02:00
Running long
2022-07-14T07:27:28.7631133+02:00
2022-07-14T07:27:29.2430825+02:00
Running long
2022-07-14T07:27:30.7529474+02:00
2022-07-14T07:27:31.2606374+02:00
Running long
2022-07-14T07:27:32.7737681+02:00
2022-07-14T07:27:33.2500507+02:00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The timer will always execute on a regular, predictable schedule, even if the work runs long.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;Periodic Timer&lt;/code&gt; is a great addition to the ecosystem. Reliable and easy to use, for simple background processing, this should be the go-to mechanism going forward. For more complex scheduling and processing, something like &lt;a href="https://www.hangfire.io/"&gt;Hangfire&lt;/a&gt; will still have its place for a while to come.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=J4JL4zR_l-0"&gt;Scheduling repeating tasks with .NET 6’s NEW Timer&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;134: 09-08-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/08-length-pattern-matching</id>
		<title>String null or empty using pattern matching</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/08-length-pattern-matching" />
		<updated>2022-08-08T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Pattern matching&lt;/code&gt; syntax can be used to check the nullability and length of a string, instead of the traditional &lt;code&gt;string.IsNullOrEmpty&lt;/code&gt; method - with interesting (and promising) performance benchmarks!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="isnullorempty"&gt;IsNullOrEmpty&lt;/h2&gt;
&lt;p&gt;Usually the &lt;code&gt;string.IsNullOrEmpty&lt;/code&gt; method is used to check if a specific string has a value (other than null or empty) - a string is passed in and a bool value is returned.&lt;/p&gt;
&lt;p&gt;Consider the following method which uses &lt;code&gt;string.IsNullOrEmpty&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;void IsStringNullOrEmpty(string value)
{ 
    if (!string.IsNullOrEmpty(value))
    {
        Console.WriteLine($&amp;quot;Using 'IsNullOrEmpty' the '{value}' is NOT empty or null&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the method is called with three different values:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;string checkValue = &amp;quot;www.alwaysdeveloping.net&amp;quot;;
IsStringNullOrEmpty(checkValue);

checkValue = &amp;quot;&amp;quot;;
IsStringNullOrEmpty(checkValue);

checkValue = null;
IsStringNullOrEmpty(checkValue);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As expected, only one value triggers an output to the console:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;    Using 'IsNullOrEmpty' the value 'www.alwaysdeveloping.net' is NOT empty or null
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="pattern-matching"&gt;Pattern Matching&lt;/h2&gt;
&lt;p&gt;However, instead of this, &lt;code&gt;string.IsNullOrEmpty&lt;/code&gt; the following &lt;code&gt;pattern matching&lt;/code&gt; syntax could be used:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    value is { Length: &amp;gt; 0 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This checks if the &lt;em&gt;value&lt;/em&gt; variable has a value (not null) and has a length greater than zero.&lt;/p&gt;
&lt;p&gt;Again, consider the following method which uses &lt;code&gt;pattern matching&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;void IsStringNullOrEmpty(string value)
{
    if (value is { Length: &amp;gt; 0 })
    {
        Console.WriteLine($&amp;quot;Using 'pattern matching' the value '{value}' is NOT empty or null&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the method is called with three different values (the same values as above):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;string checkValue = &amp;quot;www.alwaysdeveloping.net&amp;quot;;
IsStringNullOrEmpty(checkValue);

checkValue = &amp;quot;&amp;quot;;
IsStringNullOrEmpty(checkValue);

checkValue = null;
IsStringNullOrEmpty(checkValue);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, as expected, the same values as when using &lt;code&gt;IsNullOrEmpty&lt;/code&gt; are picked up as valid or not:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;    Using 'pattern matching' the value 'www.alwaysdeveloping.net' is NOT empty or null
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="benchmarks"&gt;Benchmarks&lt;/h2&gt;
&lt;p&gt;So there doesn't appear to be any difference in the output of the two methods. Next let's see how each performs using BenchmarkDotNet.&lt;/p&gt;
&lt;p&gt;The two different methods were compared, using the same three values as above: a string with a &lt;code&gt;value&lt;/code&gt;, and &lt;code&gt;empty&lt;/code&gt; string and a &lt;code&gt;null&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[MemoryDiagnoser]
public class Benchmarks
{
    [Params(&amp;quot;alwaysdeveloping.net&amp;quot;, &amp;quot;&amp;quot;, null)]
    public string? strValue { get; set; }

    [Benchmark]
    public void IsNullOrEmpty()
    {
        _ = !string.IsNullOrEmpty(strValue);
    }

    [Benchmark]
    public void PatternMatching()
    {
        _ = strValue is { Length: &amp;gt; 0 };
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;strValue&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Error&lt;/th&gt;
&lt;th style="text-align: right;"&gt;StdDev&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Median&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Allocated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IsNullOrEmpty&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.2562 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0367 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0307 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.2615 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PatternMatching&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.2592 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0203 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0190 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.2627 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IsNullOrEmpty&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0158 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0148 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0123 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0133 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PatternMatching&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0150 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0144 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0127 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0163 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IsNullOrEmpty&lt;/td&gt;
&lt;td&gt;alwaysdeveloping.net&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0355 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0298 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0279 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0296 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PatternMatching&lt;/td&gt;
&lt;td&gt;alwaysdeveloping.net&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0093 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0113 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0105 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0056 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;From the result, when the string is &lt;code&gt;null or empty performance is pretty much equivalent&lt;/code&gt;, however when the string &lt;code&gt;has a value, pattern matching is about 4x faster&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;pattern matching&lt;/code&gt; syntax is definitely interesting and intriguing, however is definitely not as intuitive or informative to the developer as to what it does. If micro-optimization is required, this is definitely something to look into, however for most applications the performance improvement would be unnoticeable.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/buhakmeh/status/1545094497138360323"&gt;Khalid Abuhakmeh Tweet&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;133: 08-08-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/05-windows-service</id>
		<title>Windows services with .NET Core</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/05-windows-service" />
		<updated>2022-08-05T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;Configuring code to run as a &lt;code&gt;Windows Service&lt;/code&gt; in .NET is simple and fairly straight-forward (at least simpler and more straight forward than I was expecting). The &lt;code&gt;Windows Service&lt;/code&gt; specific configuration only required a NuGet package and a few lines of code.&lt;/p&gt;
&lt;p&gt;This post will describe the &lt;code&gt;code changes&lt;/code&gt; required to make the code ready to be hosted as a Windows Service, but will not go into specifics on how the Windows Service is configured.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="background-service"&gt;Background Service&lt;/h2&gt;
&lt;p&gt;Whether hosted as a &lt;code&gt;Windows Service&lt;/code&gt; or not, the logic needs to be executed in the background, usually on a schedule or at specific intervals. This is done with the .NET &lt;em&gt;BackgroundService&lt;/em&gt; class.&lt;/p&gt;
&lt;p&gt;To start creating this background process, a class is created which inherits from &lt;em&gt;BackgroundService&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class RandomWorker : BackgroundService
{
    private readonly ILogger&amp;lt;RandomWorker&amp;gt; _logger;

    public RandomWorker(ILogger&amp;lt;RandomWorker&amp;gt; logger)
    {
        _logger = logger;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        // continually run until cancelled
        while (!stoppingToken.IsCancellationRequested)
        {
            _logger.LogInformation(&amp;quot;RandomWorker Service running &amp;quot; +
                &amp;quot;as Windows Service at: {currentTime}&amp;quot;, DateTime.Now);

            var random = new Random();
            var randomValue = random.Next(10);

            if(randomValue &amp;gt; 5)
            {
                _logger.LogError(&amp;quot;RandomWorker running as Windows &amp;quot; +
                    &amp;quot;Service threw an exception at: {currentTime}&amp;quot;, DateTime.Now);
            }

            // wait for 10 seconds
            await Task.Delay(10000, stoppingToken);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The class operates with &lt;code&gt;dependency injection&lt;/code&gt;, so any registered services can be injected (&lt;em&gt;ILogger&lt;/em&gt; in this example)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;ExecuteAsync&lt;/code&gt; method is called once the background service is started - the &lt;code&gt;while&lt;/code&gt; loop in conjunction with the &lt;code&gt;Task.Delay&lt;/code&gt; call, ensures that the method is forever looping effectively executing every 10 seconds (roughly), until cancelled via the &lt;em&gt;CancellationToken&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that we have a &lt;em&gt;BackgroundService&lt;/em&gt; which runs our logic, we need to host it so that it can be executed.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="hosting"&gt;Hosting&lt;/h2&gt;
&lt;h3 id="console-hosting"&gt;Console hosting&lt;/h3&gt;
&lt;p&gt;The simplest option is to host it in a &lt;em&gt;Console Application&lt;/em&gt; - this is an exe which needs to be executed, and will run until the console windows is closed.&lt;/p&gt;
&lt;p&gt;A top-level statement &lt;em&gt;Console Application&lt;/em&gt; is shown below, with the &lt;code&gt;RandomWorker&lt;/code&gt; class added as a &lt;em&gt;Hosted Service&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;IHost host = Host.CreateDefaultBuilder(args)
    .ConfigureServices(services =&amp;gt;
    {
        // Add the RandomWorker as a hosted service
        services.AddHostedService&amp;lt;RandomWorker&amp;gt;();
    })
    .Build();

await host.RunAsync();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A sample output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;info: WindowsServiceDemo.RandomWorker[0]
      RandomWorker Service running as Windows Service at: 07/10/2022 16:40:20
info: WindowsServiceDemo.RandomWorker[0]
      RandomWorker Service running as Windows Service at: 07/10/2022 16:40:30
info: WindowsServiceDemo.RandomWorker[0]
      RandomWorker Service running as Windows Service at: 07/10/2022 16:40:40
info: WindowsServiceDemo.RandomWorker[0]
      RandomWorker Service running as Windows Service at: 07/10/2022 16:40:50
info: WindowsServiceDemo.RandomWorker[0]
      RandomWorker Service running as Windows Service at: 07/10/2022 16:41:00
fail: WindowsServiceDemo.RandomWorker[0]
      RandomWorker running as Windows Service threw an exception at: 07/10/2022 16:41:00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the building blocks for a background service, running on an interval in a console we can look at how to turn this into a &lt;code&gt;Windows Service&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="windows-services-hosting"&gt;Windows Services hosting&lt;/h3&gt;
&lt;p&gt;Enhancing a traditional &lt;em&gt;Console Application&lt;/em&gt; to be able to be used as a &lt;code&gt;Windows Service&lt;/code&gt; is fairly straight forward:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Reference the &lt;code&gt;Microsoft.Extensions.Hosting.WindowsService&lt;/code&gt; NuGet package&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update the startup to include additional &lt;code&gt;Windows Service&lt;/code&gt; specific configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using WindowsServiceDemo;

IHost host = Host.CreateDefaultBuilder(args)
    // configure to be able to be used in Windows Service
    .UseWindowsService(options =&amp;gt;
    {
        // with the name
        options.ServiceName = &amp;quot;RandomWorker Service&amp;quot;;
    })
    .ConfigureServices(services =&amp;gt;
    {
        services.AddHostedService&amp;lt;RandomWorker&amp;gt;();
    })
    .Build();

await host.RunAsync();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optionally configure &lt;code&gt;Event Viewer&lt;/code&gt; logging - this step can be skipped if logging to the Event Viewer is not required.
The default logging level for &lt;code&gt;Event Viewer&lt;/code&gt; is &lt;em&gt;Warning&lt;/em&gt;, so for development purposes the default log level can be set to &lt;em&gt;Information&lt;/em&gt;.
In &lt;code&gt;appsettings.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;Logging&amp;quot;: {
        &amp;quot;EventLog&amp;quot;: {
        &amp;quot;LogLevel&amp;quot;: {
            &amp;quot;Default&amp;quot;: &amp;quot;Information&amp;quot;
        }
        },
        &amp;quot;LogLevel&amp;quot;: {
        &amp;quot;Default&amp;quot;: &amp;quot;Information&amp;quot;,
        &amp;quot;Microsoft.Hosting.Lifetime&amp;quot;: &amp;quot;Information&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That's it! (from a code configuration point of view). The application can now be run as a normal console application, but is also &lt;em&gt;ready&lt;/em&gt; to be hosted as a &lt;code&gt;Windows Service&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This post will not go into detail around &lt;em&gt;how&lt;/em&gt; to configure the &lt;code&gt;Windows Service&lt;/code&gt; - but a brief summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The application needs to be &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/windows-service#publish-the-app"&gt;published&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Windows Service&lt;/code&gt; needs to be created using the &lt;code&gt;sc.exe&lt;/code&gt; tool. The tool creates the Windows Service and &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/windows-service#create-the-windows-service"&gt;links it to the exe created in the above step&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Optionally &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/windows-service#configure-the-windows-service"&gt;configure the Windows Service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ideally all of the above steps are done in a CI/CD pipeline, with all the steps automated.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="api-hosting"&gt;Api hosting&lt;/h3&gt;
&lt;p&gt;A note on the &lt;code&gt;BackgroundService&lt;/code&gt; inherited class, &lt;code&gt;RandomWorker&lt;/code&gt; - in the above example it was hosted in a &lt;em&gt;Console Application&lt;/em&gt; using:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    services.AddHostedService&amp;lt;RandomWorker&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The great thing about the &lt;code&gt;BackgroundService&lt;/code&gt;, is that it can be hosted in an API if required - allowing the service logic to become &lt;code&gt;cross platform&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Below is top level statement API, using a minimal api - but also &lt;code&gt;hosting the background service&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = WebApplication.CreateBuilder(args);

builder.Services.AddHostedService&amp;lt;RandomWorker&amp;gt;();

var app = builder.Build();

app.MapGet(&amp;quot;/randomservice&amp;quot;, (ILogger&amp;lt;RandomWorker&amp;gt; logger) =&amp;gt;
{
     logger.LogInformation(&amp;quot;Endpoint called and executed &amp;quot; +
        &amp;quot;while background service is running&amp;quot;);
});

app.Run();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running this API now executes the service in the background, while still allowing endpoints to be called:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;info: WindowsServiceDemo.RandomWorker[0]
      RandomWorker Service running as Windows Service at: 07/10/2022 17:15:13
fail: WindowsServiceDemo.RandomWorker[0]
      RandomWorker running as Windows Service threw an exception at: 07/10/2022 17:15:13
info: WindowsServiceDemo.RandomWorker[0]
      Endpoint called and executed while background service is running
info: WindowsServiceDemo.RandomWorker[0]
      RandomWorker Service running as Windows Service at: 07/10/2022 17:15:23
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;In my personal experience, in the last few years &lt;code&gt;Windows Services&lt;/code&gt; have seen a decline in usage in favour of more cross-platform solutions, such as hosting the background service in an API, or using other scheduling solutions such as &lt;a href="https://www.hangfire.io/"&gt;HangFire&lt;/a&gt;.
However, in the case when hosting the code as a &lt;code&gt;Windows Service&lt;/code&gt; is unavoidable - it's good to know that its fairly simple and straightforward to configure .NET Core (and beyond) code to function as a Windows Service.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/windows-service"&gt;Create a Windows Service using BackgroundService&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://code-maze.com/aspnetcore-running-applications-as-windows-service/"&gt;Running .NET Core Applications as a Windows Service&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;132: 05-08-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/04-minimal-api-return-type</id>
		<title>Dynamically changing minimal api return type</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/04-minimal-api-return-type" />
		<updated>2022-08-04T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;Minimal apis, by default, have a JSON return type - however a custom &lt;code&gt;IResult&lt;/code&gt; implementation can be used to change this return type. This same interface can be used to dynamically decide at runtime the return type, but requires some additional effort.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="default-return-type"&gt;Default return type&lt;/h2&gt;
&lt;p&gt;With minimal api's, the default return type is JSON. Executing the following command, the &lt;em&gt;Song&lt;/em&gt; instance is automatically serialized to JSON and the response &lt;em&gt;content-type&lt;/em&gt; header automatically set to &lt;strong&gt;application/json&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;app.MapGet(&amp;quot;/json&amp;quot;, () =&amp;gt;
{
    return new Song
    {
        ArtistName = &amp;quot;John Mayer&amp;quot;,
        SongName = &amp;quot;Bigger than my body&amp;quot;,
        LengthInSeconds = 245
    };
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Returned JSON:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{&amp;quot;songName&amp;quot;:&amp;quot;Bigger than my body&amp;quot;,&amp;quot;artistName&amp;quot;:&amp;quot;John Mayer&amp;quot;,&amp;quot;lengthInSeconds&amp;quot;:245}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;WHat if a &lt;code&gt;different return type&lt;/code&gt; is required?&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="xml-return-type"&gt;XML return type&lt;/h2&gt;
&lt;p&gt;As mentioned, to change the response type, instead of just returning the &lt;em&gt;Song&lt;/em&gt; instance (which will then serialize to JSON), an implementation of &lt;code&gt;IResult&lt;/code&gt; needs to be returned.&lt;/p&gt;
&lt;p&gt;In this endpoint an instance of the custom class &lt;code&gt;XmlResult&lt;/code&gt; (full code below) is being returned:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;app.MapGet(&amp;quot;/xml&amp;quot;, () =&amp;gt;
{
    // XML implementation of IResult 
    return new XmlResult&amp;lt;Song&amp;gt;(
        new Song
        {
            ArtistName = &amp;quot;John Mayer&amp;quot;,
            SongName = &amp;quot;Bigger than my body&amp;quot;,
            LengthInSeconds = 245
        });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;XmlResult&lt;/code&gt; is an implementation of the &lt;code&gt;IResult&lt;/code&gt; interface, which is very simple, containing only one method to implement:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    Task ExecuteAsync(HttpContext httpContext);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method will accept the &lt;em&gt;HttpContext&lt;/em&gt; of the request as a parameter, and modify the response body and headers as required before being returned to the called.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;XmlResult&lt;/code&gt; implementation (this is by no means the most efficient method for doing XML serialization, but it's a simple demonstration for this post):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// implement IResult
public class XmlResult&amp;lt;T&amp;gt; : IResult
{
    // store the entity to be serialized
    private readonly T _entity;

    public XmlResult(T entity)
    {
        _entity = entity;
    }

    // method which needs implementing
    public Task ExecuteAsync(HttpContext httpContext)
    {
        // prepare for XML serialization
        XmlSerializer xmlSerializer = new(typeof(T));
        using StringWriter textWriter = new();

        // perform the serialization
        xmlSerializer.Serialize(textWriter, _entity);

        // modify the response content type, content length and 
        // write the XML to the body of the response
        httpContext.Response.ContentType = MediaTypeNames.Application.Xml;
        httpContext.Response.ContentLength = 
            Encoding.UTF8.GetByteCount(textWriter.ToString());
        return httpContext.Response.WriteAsync(textWriter.ToString());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Browsing to the &lt;code&gt;/xml&lt;/code&gt; endpoint show above, returns the following response, with the response &lt;em&gt;content-type&lt;/em&gt; set to &lt;strong&gt;application/xml&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Song&amp;gt;
    &amp;lt;SongName&amp;gt;Bigger than my body&amp;lt;/SongName&amp;gt;
    &amp;lt;ArtistName&amp;gt;John Mayer&amp;lt;/ArtistName&amp;gt;
    &amp;lt;LengthInSeconds&amp;gt;245&amp;lt;/LengthInSeconds&amp;gt;
&amp;lt;/Song&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far so good, however, the standard recommended way of returning an &lt;code&gt;IResult&lt;/code&gt; implementation is via an extension method on &lt;code&gt;IResultExtensions&lt;/code&gt;, and not a manual instantiation:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static class XmlResultsExtensions
{
    public static IResult Xml&amp;lt;T&amp;gt;(this IResultExtensions resultExtensions, T entity)
    {
        ArgumentNullException.ThrowIfNull(resultExtensions);

        return new XmlResult&amp;lt;T&amp;gt;(entity);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using this extension method, the &lt;strong&gt;final XML endpoint&lt;/strong&gt; now looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;app.MapGet(&amp;quot;/xml&amp;quot;, () =&amp;gt;
{
    // Use the extension method instead of 
    // explicitly using XmlResult 
    return Results.Extensions.Xml(
        new Song
        {
            ArtistName = &amp;quot;John Mayer&amp;quot;,
            SongName = &amp;quot;Bigger than my body&amp;quot;,
            LengthInSeconds = 245
        });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next up we explore how to allow the &lt;code&gt;caller to decide how they would like the data returned, using a single endpoint&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="dynamic-return-type"&gt;Dynamic return type&lt;/h2&gt;
&lt;p&gt;Let's explore how the return type can be changed dynamically based on an indicator from the caller. For this example we'll use the &lt;code&gt;content-type&lt;/code&gt; of the &lt;em&gt;request&lt;/em&gt; as the indicator (not necessarily the good option for all cases - but good enough for this demo).&lt;/p&gt;
&lt;p&gt;We'll add a parameter to the endpoint, and instruct ASPNET Core to get the value from the &lt;code&gt;content-type&lt;/code&gt; header, using the &lt;em&gt;FromHeader&lt;/em&gt; attribute:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;app.MapGet(&amp;quot;/dynamic&amp;quot;, ([FromHeader(Name = &amp;quot;Content-Type&amp;quot;)] string? contentType) =&amp;gt;
{
    var song = new Song
    {
        ArtistName = &amp;quot;John Mayer&amp;quot;,
        SongName = &amp;quot;Bigger than my body&amp;quot;,
        LengthInSeconds = 245
    };

    return song;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Progress! However this endpoint still only returns JSON. Next let's add the check on the request content type....&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;app.MapGet(&amp;quot;/dynamic&amp;quot;, ([FromHeader(Name = &amp;quot;Content-Type&amp;quot;)] string? contentType) =&amp;gt;
{
    var song = new Song
    {
        ArtistName = &amp;quot;John Mayer&amp;quot;,
        SongName = &amp;quot;Bigger than my body&amp;quot;,
        LengthInSeconds = 245
    };

    // if XML return XML implementation of Song
    if (contentType == MediaTypeNames.Application.Xml)
    {
        return Results.Extensions.Xml(song);
    }

    return song;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...which &lt;code&gt;results in an error!&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Cannot convert lambda expression to type 'RequestDelegate' because 
    the parameter types do not match the delegate parameter types
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our endpoint is trying trying to return two different types - an &lt;code&gt;IResult&lt;/code&gt; implementation when XML, and a &lt;code&gt;Song&lt;/code&gt; instance when not.&lt;/p&gt;
&lt;p&gt;This is easy enough to resolve - change the endpoint to &lt;code&gt;always returns an IResult&lt;/code&gt; implementation. To do this however, we now need a &lt;code&gt;custom IResult implementation for JSON&lt;/code&gt;. It operates exactly the same as the XML implementation, but serializes to JSON instead of XML:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class JsonResult&amp;lt;T&amp;gt; : IResult
{
    private readonly T _entity;

    public JsonResult(T entity)
    {
        _entity = entity;
    }

    public Task ExecuteAsync(HttpContext httpContext)
    {
        using StringWriter textWriter = new StringWriter();
        var jsonResult = System.Text.Json.JsonSerializer.Serialize&amp;lt;T&amp;gt;(_entity);

        httpContext.Response.ContentType = MediaTypeNames.Application.Json;
        httpContext.Response.ContentLength = Encoding.UTF8.GetByteCount(jsonResult);
        return httpContext.Response.WriteAsync(jsonResult);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the corresponding extension method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static class JsonResultsExtensions
{
    public static IResult Json&amp;lt;T&amp;gt;(this IResultExtensions resultExtensions, T entity)
    {
        ArgumentNullException.ThrowIfNull(resultExtensions);

        return new JsonResult&amp;lt;T&amp;gt;(entity);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly, we update the &lt;em&gt;dynamic&lt;/em&gt; endpoint so the &lt;strong&gt;final endpoint&lt;/strong&gt; now looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;app.MapGet(&amp;quot;/dynamic&amp;quot;, ([FromHeader(Name = &amp;quot;Content-Type&amp;quot;)] string? contentType) =&amp;gt;
{
    var song = new Song
    {
        ArtistName = &amp;quot;John Mayer&amp;quot;,
        SongName = &amp;quot;Bigger than my body&amp;quot;,
        LengthInSeconds = 245
    };

    // if XML return XML implementation of Song
    if (contentType == MediaTypeNames.Application.Xml)
    {
        return Results.Extensions.Xml(song);
    }

    // In all other cases return JSON
    return Results.Extensions.Json(song);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The endpoint can now be invoked with a &lt;code&gt;content-type&lt;/code&gt; header value &lt;code&gt;application/xml&lt;/code&gt; to get the results in XML and in all other cases, get the result as JSON.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;This is a fair amount of code just to change the response type - but it is a piece of code which only needs to be written once and can then be reused across all endpoints. All endpoints can then benefit from bug fixes or performance improvements in the &lt;code&gt;IResult&lt;/code&gt; implementation.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0#responses"&gt;Minimal APIs overview - responses&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;131: 04-08-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/03-string-interpolation-alignment</id>
		<title>String interpolation with alignment</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/03-string-interpolation-alignment" />
		<updated>2022-08-03T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;When using &lt;code&gt;string interpolation ($)&lt;/code&gt;, the &lt;em&gt;interpolation expressions results&lt;/em&gt; (the final string resolved into the main string) can be left or right aligned, including padding to be used when aligning.&lt;/p&gt;
&lt;p&gt;This can be very useful when having &lt;em&gt;interpolation expressions&lt;/em&gt; which result in string of varying lengths - having these values alignment can result in a more uniform output.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;p&gt;In all the below examples, a collection of &lt;em&gt;sale values&lt;/em&gt; of varying lengths is used:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var saleValues = new[]
{
    100,
    54500,
    1,
    8514,
    -500
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="default"&gt;Default&lt;/h4&gt;
&lt;p&gt;If we want to output each of them without any alignment:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;The sale amount is: 100 (for the month of August)
The sale amount is: 54500 (for the month of August)
The sale amount is: 1 (for the month of August)
The sale amount is: 8514 (for the month of August)
The sale amount is: -500 (for the month of August)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="right-align"&gt;Right align&lt;/h4&gt;
&lt;p&gt;If we require a more uniform output, a &lt;code&gt;positive number&lt;/code&gt; can be used to &lt;code&gt;right align and pad&lt;/code&gt; the value:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;foreach (var sale in saleValues)
{
    Console.WriteLine($&amp;quot;The sale amount is: {sale, 9} (for the month of August)&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above will &lt;code&gt;right align&lt;/code&gt; the &lt;em&gt;sale&lt;/em&gt; value and make it a uniform &lt;em&gt;9 characters in length&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;The sale amount is:       100 (for the month of August)
The sale amount is:     54500 (for the month of August)
The sale amount is:         1 (for the month of August)
The sale amount is:      8514 (for the month of August)
The sale amount is:      -500 (for the month of August)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="left-align"&gt;Left align&lt;/h4&gt;
&lt;p&gt;To left align, a &lt;code&gt;negative number&lt;/code&gt; is specified:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;foreach (var sale in saleValues)
{
    Console.WriteLine($&amp;quot;The sale amount is: {sale, -9} (for the month of August)&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above will &lt;code&gt;left align&lt;/code&gt; the &lt;em&gt;sale&lt;/em&gt; value and make it a uniform &lt;em&gt;9 characters in length&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;The sale amount is: 100       (for the month of August)
The sale amount is: 54500     (for the month of August)
The sale amount is: 1         (for the month of August)
The sale amount is: 8514      (for the month of August)
The sale amount is: -500      (for the month of August)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h4 id="const-value"&gt;Const value&lt;/h4&gt;
&lt;p&gt;The value specified is required to be a constant value.&lt;/p&gt;
&lt;p&gt;So this is valid:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// must be a constant
const int length = 10;

foreach (var sale in saleValues)
{
    Console.WriteLine($&amp;quot;The sale amount is: {sale, length} (for the month of August)&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, this is &lt;code&gt;NOT VALID&lt;/code&gt;, as &lt;em&gt;length&lt;/em&gt; is not a &lt;code&gt;const&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;int length = saleValues.Length;

foreach (var sale in saleValues)
{
    Console.WriteLine($&amp;quot;The sale amount is: {sale, length} (for the month of August)&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;A small lesser-known feature of string interpolation, however it can be very useful in producing uniform output when required, with very little additional effort.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/buhakmeh/status/1541467908169035776"&gt;Khalid Abuhakmeh Tweet&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;130: 03-08-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/02-activatorutilities</id>
		<title>ActivatorUtilities to create instances</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/02-activatorutilities" />
		<updated>2022-08-02T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;ActivatorUtilities&lt;/code&gt; static class can be used to create instances of classes &lt;code&gt;outside of the dependency injection (DI) container&lt;/code&gt;, while still &lt;code&gt;leveraging the DI container&lt;/code&gt; to create instances of the dependencies.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;p&gt;Consider a business logic class, which has one dependency on &lt;code&gt;IConfiguration&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class MyBusinessLogic
{
    private readonly IConfiguration _configuration;

    public MyBusinessLogic(IConfiguration configuration)
    {
        _configuration = configuration;
    }
    public int PerformBusinessLogic()
    {
        Console.WriteLine(&amp;quot;Performing business logic&amp;quot;);

        return 1;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It consists of a &lt;em&gt;Constructor&lt;/em&gt; and a single method, &lt;em&gt;PerformBusinessLogic&lt;/em&gt;, which performs some business logic, and returns the value &lt;code&gt;1&lt;/code&gt; once completed.&lt;/p&gt;
&lt;p&gt;In all of the below examples, the &lt;em&gt;MyBusinessLogic&lt;/em&gt; class &lt;code&gt;has NOT been registered with the dependency injection container&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The code for all the endpoints shown below is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

// endpoint definition show below goes here!

app.Run();

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thats it - nothing else being registered or configured on startup.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="default-di"&gt;Default DI&lt;/h3&gt;
&lt;p&gt;First, we'll try getting an instance of class directly from the DI container, two different ways:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// inject directly
app.MapGet(&amp;quot;/direct&amp;quot;, ([FromServices]MyBusinessLogic logic) =&amp;gt;
{
    return logic.PerformBusinessLogic();
});

// inject the service provider (the DI container)
// and try get the service from there
app.MapGet(&amp;quot;/provider&amp;quot;, (IServiceProvider provider) =&amp;gt;
{
    var logic = provider.GetRequiredService&amp;lt;MyBusinessLogic&amp;gt;();

    return logic.PerformBusinessLogic();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you've worked with DI before, you would be unsurprised to know that the above does not work:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;InvalidOperationException: No service for type 'MyBusinessLogic' has been registered.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The runtime doesn't know how to instantiate the &lt;em&gt;MyBusinessLogic&lt;/em&gt; class. To resolve we could register &lt;em&gt;MyBusinessLogic&lt;/em&gt; with the DI container, but for this post the assumption is this is not an option.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="manual"&gt;Manual&lt;/h3&gt;
&lt;p&gt;Next we'll look at the ways to manually get an instance of the &lt;em&gt;MyBusinessLogic&lt;/em&gt; class:&lt;/p&gt;
&lt;p&gt;The first way is to just manually instantiate the class directly. The constructor of &lt;em&gt;MyBusinessLogic&lt;/em&gt; requires an instance of &lt;code&gt;IConfiguration&lt;/code&gt;. In the below, &lt;code&gt;IConfiguration&lt;/code&gt; is injected via DI, and then passed to the constructor of &lt;em&gt;MyBusinessLogic&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;app.MapGet(&amp;quot;/manual&amp;quot;, (IConfiguration config) =&amp;gt;
{
    var logic = new MyBusinessLogic(config);

    return logic.PerformBusinessLogic();
});

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;This will work&lt;/code&gt;, but if &lt;em&gt;MyBusinessLogic&lt;/em&gt; had a long list of dependencies and it's constructor required many parameters, this can become messy. The endpoint would need to be modified to accept items from the DI container when it doesn't actual require them directly - they are only used to pass to &lt;em&gt;MyBusinessLogic&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As slight improvement is to only inject the &lt;em&gt;IServiceProvider&lt;/em&gt; implementation into the endpoint and then use that to get the required items for the &lt;em&gt;MyBusinessLogic&lt;/em&gt; constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;app.MapGet(&amp;quot;/manualprovider&amp;quot;, (IServiceProvider provider) =&amp;gt;
{
    var logic = new MyBusinessLogic(provider.GetService&amp;lt;IConfiguration&amp;gt;());

    return logic.PerformBusinessLogic();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, this &lt;code&gt;will work&lt;/code&gt;, but is still not ideal, as each type required needs to manually retrieved from the DI container.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="activatorutilities"&gt;ActivatorUtilities&lt;/h3&gt;
&lt;p&gt;Thankfully, there is a class to assist with this exact requirement - the &lt;code&gt;ActivatorUtilities&lt;/code&gt; static class. Its usage is very simple - the &lt;em&gt;CreateInstance&lt;/em&gt; method is called with the required class passed in as a generic parameter, along with the &lt;em&gt;IServiceProvider&lt;/em&gt; implementation as a parameter (any other parameters which might be required, but are not part of the DI container).&lt;br /&gt;
&lt;code&gt;ActivatorUtilities&lt;/code&gt; will then return an instance of the require class, using the &lt;em&gt;IServiceProvider&lt;/em&gt; implementation to resolve any dependencies automatically - as would happen when using the DI container implicitly.&lt;/p&gt;
&lt;p&gt;As the required &lt;em&gt;IConfiguration&lt;/em&gt; parameter is already in the DI container, no additional parameters need to be passed in:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;app.MapGet(&amp;quot;/activatorutils&amp;quot;, (IServiceProvider provider) =&amp;gt;
{
    var logic = ActivatorUtilities.CreateInstance&amp;lt;MyBusinessLogic&amp;gt;(provider);

    return logic.PerformBusinessLogic();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here an &lt;code&gt;instance of MyBusinessLogic is created&lt;/code&gt;, and all its dependencies are &lt;code&gt;automatically resolved from the IServiceProvider instance&lt;/code&gt;, provider.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;An incredibly useful method when working with dependency injection, but not all classes have been added to the DI container (for example, if in the processes of porting a legacy app, one controller at a time).&lt;/p&gt;
&lt;p&gt;There are other ways of doing this using reflection (&lt;em&gt;Activator.CreateInstance&lt;/em&gt; for example) not mentioned here - this post focuses on instantiating a class when the type wanted is known at compile time.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://onthedrift.com/posts/activator-utilities/"&gt;Activator utilities: activate anything!&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;129: 02-08-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/08/01-in-modifier</id>
		<title>Readonly parameters with the in modifier</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/08/01-in-modifier" />
		<updated>2022-08-01T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;in&lt;/code&gt; parameter modifying keyword is used to cause a parameter be passed by reference, and ensure that cannot be modified in the method.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;in&lt;/code&gt; modifier's usage is similar to the &lt;code&gt;ref&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt; keywords, except &lt;code&gt;ref&lt;/code&gt; parameters can be modified and &lt;code&gt;out&lt;/code&gt; parameters must be modified/set, while the &lt;code&gt;in&lt;/code&gt; modifier effectively makes the parameter read-only.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="types"&gt;Types&lt;/h2&gt;
&lt;h3 id="simple-value-types"&gt;Simple value types&lt;/h3&gt;
&lt;p&gt;First lets have a look at how value types are handled in a few simple examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;int originalValue = 1001;
InKeywordMethod(originalValue);

// parameter used in keyword
void InKeywordMethod(in int theValue)
{
    // this is not allowed and 
    // will not compile if uncommented
    // theValue = 999;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If uncommented, the application will not compile with the error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Cannot assign to variable 'in int' because it is a readonly variable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As expected based on the introduction, with the use of the &lt;code&gt;in&lt;/code&gt; keyword, the &lt;em&gt;theValue&lt;/em&gt; variable is read-only inside the scope of the method, and cannot be modified.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="structure-value-types"&gt;Structure value types&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;in&lt;/code&gt; keyword applied to a &lt;code&gt;struct&lt;/code&gt; (a value type) parameter, yields in the same results as in the previous example with sample value types.&lt;/p&gt;
&lt;p&gt;Consider the following &lt;code&gt;struct&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public struct StructOptions
{
    public int IntValue { get; set; }
    public string StringValue { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it's usage:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var sOptions = new StructOptions
{
    IntValue = 759,
    StringValue = &amp;quot;StringValue&amp;quot;
};
InStructKeywordMethod(sOptions);

void InStructKeywordMethod(in StructOptions options)
{
    // this is not allowed and will not compile if uncommented
    // options.IntValue = 100;

    // this is also not allowed and will result in an error
    /*
    options = new StructOptions
    {
        IntValue = 123,
        StringValue = &amp;quot;NewStringValue!&amp;quot;
    }
    */
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The properties of the &lt;code&gt;struct&lt;/code&gt; as well as the &lt;code&gt;struct&lt;/code&gt; itself are both read-only.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="reference-types"&gt;Reference types&lt;/h3&gt;
&lt;p&gt;Reference types however operate slightly differently when used with the &lt;code&gt;in&lt;/code&gt; keyword.&lt;/p&gt;
&lt;p&gt;We will use the same &lt;em&gt;Options&lt;/em&gt; data structure as in the previous example, however this time define it as a &lt;code&gt;class&lt;/code&gt; instead of a &lt;code&gt;struct&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Options
{
    public int IntValue { get; set; }

    public string StringValue { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it's usage:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var options = new Options
{
    IntValue = 759,
    StringValue = &amp;quot;StringValue&amp;quot;
};

Console.WriteLine(options.IntValue);
InClassKeywordMethod(options);
Console.WriteLine(options.IntValue);

void InClassKeywordMethod(in Options options)
{
    // This is allowed!
    options.IntValue = 123;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the reference type, modifications of its properties are allowed. Running the above code does not result in any compiler errors, with the output as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;759
123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, modification of the &lt;code&gt;class&lt;/code&gt; instance (not it's properties) is &lt;strong&gt;NOT&lt;/strong&gt; allowed, and will result in a &lt;strong&gt;compiler error&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;void InClassKeywordMethod(in Options options)
{
    // Cannot assign to variable 'in Options' because it is a readonly variable
    /*
    options = new Options
    {
        IntValue = 123,
        StringValue = &amp;quot;NewStringValue&amp;quot;
    };
    */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Not a modifier which will see everyday use, but interesting all the same. If using the &lt;code&gt;in&lt;/code&gt; keyword, keep in mind that reference types properties can still be modified, and consider other options to make them readonly (removing the &lt;em&gt;set&lt;/em&gt; accessor, for example)&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/in-parameter-modifier"&gt;in parameter modifier&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;128: 01-08-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/07/29-deconstruct-method</id>
		<title>Deconstructing a class instance into multiple variables</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/07/29-deconstruct-method" />
		<updated>2022-07-29T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;One or many &lt;code&gt;Deconstruct&lt;/code&gt; methods can be added to a class allowing the class properties to be deconstructed into one or more variables (depending on the &lt;code&gt;Deconstruct&lt;/code&gt; methods available). This helps created cleaner, more concise code.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="non-deconstruct"&gt;Non-Deconstruct&lt;/h2&gt;
&lt;p&gt;Consider a &lt;em&gt;Song&lt;/em&gt; class, with three properties:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Song
{
    public string SongName { get; init; }

    public string ArtistName { get; init; }

    public int LengthInSeconds { get; init; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there is a requirement to print out all the properties of a &lt;em&gt;Song&lt;/em&gt; instance, it could be done like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var song1 = new Song
{
    ArtistName = &amp;quot;Foo Fighters&amp;quot;,
    SongName = &amp;quot;Everlong&amp;quot;,
    LengthInSeconds = 250
};

Console.WriteLine($&amp;quot;The song '{song1.SongName}' by '{song1.ArtistName}' &amp;quot; +
    $&amp;quot;is {song1.LengthInSeconds} seconds long&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing especially wrong with this, but if the &lt;em&gt;Song&lt;/em&gt; class had more properties, with long names, the interpolated string could get long and unwieldy.&lt;/p&gt;
&lt;p&gt;This could be simplified by doing the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var song1 = new Song
{
    ArtistName = &amp;quot;Foo Fighters&amp;quot;,
    SongName = &amp;quot;Everlong&amp;quot;,
    LengthInSeconds = 250
};

var name = song1.SongName;
var artist = song1.ArtistName;
var length = song1.LengthInSeconds;

Console.WriteLine($&amp;quot;The song '{name}' by '{artist}' is {length} seconds long&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The interpolated string is definitely more concise now, but thee extra variables have been defined and assigned. This would make sense if the values are being reused numerous times in the code - but if this is only used once-off, a lot of vertical space has been taken up for no real &amp;quot;value&amp;quot;.&lt;/p&gt;
&lt;p&gt;However, the &lt;code&gt;Deconstruct&lt;/code&gt; method makes this process even more concise and simpler.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="deconstruct"&gt;Deconstruct&lt;/h2&gt;
&lt;p&gt;One or many &lt;code&gt;Deconstruct&lt;/code&gt; method can be added to the &lt;em&gt;Song&lt;/em&gt; class to allow for the deconstruction of the instance into variables.&lt;/p&gt;
&lt;p&gt;A method called &lt;code&gt;Deconstruct&lt;/code&gt; is defined on the class, with one or more &lt;code&gt;out&lt;/code&gt; parameters in the method signature:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Song
{
    public string SongName { get; init; }

    public string ArtistName { get; init; }

    public int LengthInSeconds { get; init; }

    // deconstruct all three properties
    public void Deconstruct(out string artist, out string name, out int length)
    {
        name = SongName;
        artist = ArtistName;
        length = LengthInSeconds;
    }

    // deconstruct into a string combination of song and artist
    // as well as the length
    public void Deconstruct(out string output, out int length)
    {
        output = $&amp;quot;'{SongName}' by {ArtistName}&amp;quot;;
        length = LengthInSeconds;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;Deconstruct&lt;/code&gt; methods can now be used as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var song1 = new Song
{
    ArtistName = &amp;quot;Foo Fighters&amp;quot;,
    SongName = &amp;quot;Everlong&amp;quot;,
    LengthInSeconds = 250
};

// deconstruct song1, into three variables
var (artist, name, length) = song1;
Console.WriteLine($&amp;quot;The song '{name}' by '{artist}' is {length} long&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, the three variables &lt;em&gt;artist&lt;/em&gt;, &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; are automatically defined and assigned to the &lt;code&gt;out&lt;/code&gt; parameter values of the matching corresponding &lt;code&gt;Deconstruct&lt;/code&gt; method. Definitely cleaner and more concise that previous techniques.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Deconstruct&lt;/code&gt; methods also work with the &lt;code&gt;discard&lt;/code&gt; character. In the above example there is a second &lt;code&gt;Deconstruct&lt;/code&gt; method which returns the string &lt;em&gt;output&lt;/em&gt; and the song &lt;em&gt;length&lt;/em&gt;. If only interested in the &lt;em&gt;output&lt;/em&gt; value, but not the &lt;em&gt;length&lt;/em&gt;, then the following can be done:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var song1 = new Song
{
    ArtistName = &amp;quot;Foo Fighters&amp;quot;,
    SongName = &amp;quot;Everlong&amp;quot;,
    LengthInSeconds = 250
};

// deconstruct song1, into only one variable
// discarding the length
var (output, _) = song1;
Console.WriteLine(output);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here no memory is allocated for the &lt;em&gt;length&lt;/em&gt; out parameter where the &lt;code&gt;discard&lt;/code&gt; is used.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;There are not too many practical use cases for the &lt;code&gt;Deconstruct&lt;/code&gt; method - but where it can be applied (in cases such as the ones described above), it will definitely assist with creating cleaner, more concise code.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/functional/deconstruct#user-defined-types"&gt;Deconstructing tuples and other types&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;127: 29-07-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
</feed>