<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>https://alwaysdeveloping.net/</id>
	<title />
	<link rel="self" href="https://alwaysdeveloping.net/" />
	<rights>Copyright © 2022</rights>
	<updated>2022-07-05T04:15:44Z</updated>
	<subtitle>always learning | always growing</subtitle>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/07/05-getdebugview</id>
		<title>View config values with GetDebugView</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/07/05-getdebugview" />
		<updated>2022-07-05T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;All configuration values for an aapplication, as well &lt;code&gt;as their source&lt;/code&gt;, can be viewed with the &lt;code&gt;GetDebugView&lt;/code&gt; method on &lt;em&gt;IConfigurationRoot&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;While this core functionality has been available since .NET Core 3, enhancements are also coming with .NET7 (currently in preview) to allow for confidential values to be masked.&lt;/p&gt;
&lt;p&gt;All of this in more detail below.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="getdebugview-current"&gt;GetDebugView: Current&lt;/h2&gt;
&lt;p&gt;To retrieve the configuration information is fairly straightforward - all one needs is the &lt;em&gt;IConfiguration&lt;/em&gt; implementation.&lt;/p&gt;
&lt;p&gt;The below uses top-level statements and minimal API to expose a &lt;em&gt;config&lt;/em&gt; endpoint:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// inject IConfiguration from dependency injection container
app.MapGet(&amp;quot;/config&amp;quot;, (IConfiguration config) =&amp;gt;
{
    // convert to IConfigurationRoot
    var root = config as IConfigurationRoot;

    return root.GetDebugView();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With a &lt;em&gt;appsettings.json&lt;/em&gt; file which contains the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;Logging&amp;quot;: {
    &amp;quot;LogLevel&amp;quot;: {
      &amp;quot;Default&amp;quot;: &amp;quot;Information&amp;quot;,
      &amp;quot;Microsoft.AspNetCore&amp;quot;: &amp;quot;Warning&amp;quot;
    }
  },
  &amp;quot;AllowedHosts&amp;quot;: &amp;quot;*&amp;quot;,
  &amp;quot;ServiceCredentials&amp;quot;: {
    &amp;quot;username&amp;quot;: &amp;quot;admin123&amp;quot;,
    &amp;quot;password&amp;quot; : &amp;quot;admin456&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Browsing to the endpoint will return the following &lt;em&gt;relevent configuration values&lt;/em&gt; (along with numerous other system environment variables):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;AllowedHosts=* (JsonConfigurationProvider for 'appsettings.json' (Optional))
ASPNETCORE_ENVIRONMENT=Development (EnvironmentVariablesConfigurationProvider Prefix: '')
Logging:
  LogLevel:
    Default=Information (JsonConfigurationProvider for 'appsettings.Development.json' (Optional))
    Microsoft.AspNetCore=Warning (JsonConfigurationProvider for 'appsettings.Development.json' (Optional))
ServiceCredentials:
  password=admin456 (JsonConfigurationProvider for 'appsettings.json' (Optional))
  username=admin123 (JsonConfigurationProvider for 'appsettings.json' (Optional))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The configuration from the &lt;em&gt;appsettings.json&lt;/em&gt; config file are displayed, with the corresponding provider source (&lt;em&gt;JsonConfigurationProvider&lt;/em&gt;) as well as a configuration value sourced from the environment variable provider (&lt;em&gt;EnvironmentVariablesConfigurationProvider&lt;/em&gt;).&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="secrets-exposed"&gt;Secrets exposed&lt;/h3&gt;
&lt;p&gt;One limitation of the current (.NET Core 3 to .NET 6) implementation, which is demonstrated above - is that configuration values which are secrets (keys, passwords, etc.) are included in the output.&lt;/p&gt;
&lt;p&gt;In my example the password was stored in the &lt;em&gt;appsettings.json&lt;/em&gt;, which ideally shouldn't happen - however even if injected at runtime as an environment variable, the same would occur, and the value would still be exposed (just coming from a different provider source).&lt;/p&gt;
&lt;p&gt;The enhancements in .NET7 aim to improve this.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="getdebugview-preview"&gt;GetDebugView: Preview&lt;/h2&gt;
&lt;p&gt;Bear in mind, that the following is done using a &lt;em&gt;Preview&lt;/em&gt; version of .NET7, and may change by the time it is officially release.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;GetDebugView&lt;/code&gt; now has an overload which accepts a &lt;em&gt;Func&lt;/em&gt; and allows for custom processing and manipulation of the configuration values for display:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// inject IConfiguration from dependency injection container
app.MapGet(&amp;quot;/config&amp;quot;, (IConfiguration config) =&amp;gt;
{
    // convert to IConfigurationRoot
    var root = config as IConfigurationRoot;

    return root.GetDebugView(context =&amp;gt;
    {
        // this Func keys called for each Key in the configuration

        // if the key is one we know contains a password
        if(context.Key == &amp;quot;ServiceCredentials:password&amp;quot;)
        {
            // return a masked value
            return &amp;quot;***&amp;quot;;
        }
        
        // otherwise return the original configuration value
        return context.Value;
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With a &lt;em&gt;appsettings.json&lt;/em&gt; file the same as before&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;Logging&amp;quot;: {
    &amp;quot;LogLevel&amp;quot;: {
      &amp;quot;Default&amp;quot;: &amp;quot;Information&amp;quot;,
      &amp;quot;Microsoft.AspNetCore&amp;quot;: &amp;quot;Warning&amp;quot;
    }
  },
  &amp;quot;AllowedHosts&amp;quot;: &amp;quot;*&amp;quot;,
  &amp;quot;ServiceCredentials&amp;quot;: {
    &amp;quot;username&amp;quot;: &amp;quot;admin123&amp;quot;,
    &amp;quot;password&amp;quot; : &amp;quot;admin456&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Browsing to the endpoint will return the same as before, but with one small adjustment:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;AllowedHosts=* (JsonConfigurationProvider for 'appsettings.json' (Optional))
ASPNETCORE_ENVIRONMENT=Development (EnvironmentVariablesConfigurationProvider Prefix: '')
Logging:
  LogLevel:
    Default=Information (JsonConfigurationProvider for 'appsettings.Development.json' (Optional))
    Microsoft.AspNetCore=Warning (JsonConfigurationProvider for 'appsettings.Development.json' (Optional))
ServiceCredentials:
  password=*** (JsonConfigurationProvider for 'appsettings.json' (Optional))
  username=admin123 (JsonConfigurationProvider for 'appsettings.json' (Optional))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The password returned is now the &lt;code&gt;masked value&lt;/code&gt; specified in the &lt;em&gt;Func&lt;/em&gt;!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Having the ability to expose all configuration values can definitely save time and effort - it eliminates the need to remote into other machines or containers and get a list of environment variables when doing investigations. However the fact that confidential information could be exposed is far from ideal, and depending on how serious security is taken, could render the functionality unusable.&lt;/p&gt;
&lt;p&gt;However the .NET7 enhancements provides a working solution for this, which I look forward to being able to leverage.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://dunnhq.com/posts/2022/viewing-configuration-values/"&gt;Viewing .NET configuration values&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;110: 05-07-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/07/04-ef-find-vs-single</id>
		<title>EF Find vs First performance </title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/07/04-ef-find-vs-single" />
		<updated>2022-07-04T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;When retrieving a single record from the database using Entity Framework, the &lt;code&gt;Single (or SingleOrDefault)&lt;/code&gt; method can be used - however the &lt;code&gt;Find&lt;/code&gt; method on the DbSet is potentially more efficient, however it comes with some limitations.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="first"&gt;First&lt;/h2&gt;
&lt;p&gt;The first method is using &lt;code&gt;First (or FirstOrDefault)&lt;/code&gt; - this is an extension method on &lt;em&gt;Queryable&lt;/em&gt; (an important factor when comparing it to the &lt;em&gt;Find&lt;/em&gt; method)&lt;/p&gt;
&lt;p&gt;As &lt;em&gt;DbSet&lt;/em&gt; implement &lt;em&gt;IQueryable&lt;/em&gt;, this method can be use directly on the &lt;em&gt;DbSet&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Assuming we have a &lt;em&gt;DbContext&lt;/em&gt; with a &amp;quot;Song&amp;quot; &lt;em&gt;DbSet&lt;/em&gt;, a single record can be retrieved as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using var context = new DemoContext();

// using Single
var song = context.Songs.Single(x =&amp;gt; x.Id == 43);

// using SingleOrDefault
var song2 = context.Songs.SingleOrDefault(x =&amp;gt; x.Id == 43);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="find"&gt;Find&lt;/h2&gt;
&lt;p&gt;The next method is using &lt;code&gt;Find&lt;/code&gt; - this is an extension method on &lt;em&gt;DBset&lt;/em&gt; itself.&lt;/p&gt;
&lt;p&gt;Again, assuming we have a &lt;em&gt;DbContext&lt;/em&gt; with a &amp;quot;Song&amp;quot; &lt;em&gt;DbSet&lt;/em&gt;, a record can be retrieved as follows using &lt;em&gt;Find&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using var context = new DemoContext();

var song = context.Songs.Find(43);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="limitation"&gt;Limitation&lt;/h3&gt;
&lt;p&gt;As mentioned above, having &lt;code&gt;Find&lt;/code&gt; as an extension method on &lt;strong&gt;DbSet&lt;/strong&gt; does limit its usage. It cannot be used in conjunction with other &lt;em&gt;IQueryable&lt;/em&gt; extension methods.&lt;/p&gt;
&lt;p&gt;The following examples are &lt;strong&gt;NOT&lt;/strong&gt; valid and will &lt;strong&gt;NOT&lt;/strong&gt; compile:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Find() returns a 'Song' and as such Include()
// cannot be used in this example
var song = context.Songs.Find(43).Include(&amp;quot;Artist&amp;quot;);

// Include() returns a 'IQueryable' and as such Find()
// cannot be used in this example
var song2 = context.Songs.Include(&amp;quot;Artist&amp;quot;).Find(43);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, the following using &lt;code&gt;Single&lt;/code&gt; &lt;strong&gt;is VALID&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Include() returns a 'IQueryable' and as Single is
// an extension method on 'IQueryable' it CAN be used
var song = context.Songs.Include(&amp;quot;Artist&amp;quot;).Single(x =&amp;gt; x.Id == 43);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="benchmark"&gt;Benchmark&lt;/h2&gt;
&lt;p&gt;The different methods where benchmarked, with a:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shared DbContext&lt;/code&gt; - defined in the constructor once, and reused&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Single-use DbContext&lt;/code&gt; - a new DbContext is declared for each database call&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Error&lt;/th&gt;
&lt;th style="text-align: right;"&gt;StdDev&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Median&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Ratio&lt;/th&gt;
&lt;th style="text-align: right;"&gt;RatioSD&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;FindSharedContext&lt;/td&gt;
&lt;td style="text-align: right;"&gt;14.93 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.845 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;8.071 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;12.00 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.14&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.07&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SingleDefaultSharedContext&lt;/td&gt;
&lt;td style="text-align: right;"&gt;123.26 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.294 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.146 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;123.22 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.98&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.05&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SingleSharedContext&lt;/td&gt;
&lt;td style="text-align: right;"&gt;123.78 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.320 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;4.242 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;122.09 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FindOneUseContext&lt;/td&gt;
&lt;td style="text-align: right;"&gt;488.81 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;9.539 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;10.207 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;487.06 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.91&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SingleDefaultOneUseContext&lt;/td&gt;
&lt;td style="text-align: right;"&gt;261.49 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;5.098 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;5.236 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;260.91 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.09&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SingleOneUseContext&lt;/td&gt;
&lt;td style="text-align: right;"&gt;259.93 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;5.166 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;10.317 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;257.45 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.11&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;p&gt;The &lt;em&gt;Find&lt;/em&gt; method is &lt;code&gt;substantially quicker&lt;/code&gt; when reusing the DbContext (as one should).&lt;/p&gt;
&lt;p&gt;However, interestingly, with a single-use DbContext, the &lt;em&gt;Single/SingleOrDefault&lt;/em&gt; method is almost twice as quick as the &lt;em&gt;Find&lt;/em&gt; method.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;While &lt;em&gt;Find&lt;/em&gt; is approximately &lt;code&gt;7 times&lt;/code&gt; faster than the equivalent &lt;em&gt;Single&lt;/em&gt; method, it does come with considerable limitations. If performance is critical, it might be worth finding a way to work around the limitations - however keep in mind that the differences are being measured in microseconds, so the performance gain might not be worth the potential additional effort.&lt;/p&gt;
&lt;p&gt;Be aware of the performance differences, and the limitations - and for each specific use case, apply the more appropriate technique.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/danylaws/status/1524284247049216000"&gt;Daniel Lawson tweet&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;109: 04-07-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/07/01-keyset-pagination</id>
		<title>Keyset Pagination (vs Offset pagination)</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/07/01-keyset-pagination" />
		<updated>2022-07-01T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;In a previous daily drop post, I learn about using &lt;a href="https://alwaysdeveloping.net/03/17-sql-offset-fetch"&gt;OFFSET and FETCH&lt;/a&gt; to perform paging when retrieving data - however this is &lt;code&gt;not always a good method&lt;/code&gt; for retrieving results, especially with a large dataset.&lt;/p&gt;
&lt;p&gt;Instead, the usage of &lt;code&gt;keyset pagination&lt;/code&gt; should be considered, as it is more performant. &lt;code&gt;Keyset pagination&lt;/code&gt; returns a subset of the dataset by using a &lt;code&gt;WHERE&lt;/code&gt; clause instead of the &lt;code&gt;OFFSET&lt;/code&gt; clause as with &lt;em&gt;offset pagination&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There are however some limitations with the &lt;code&gt;keyset&lt;/code&gt; approach, which will be explored below.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="offset"&gt;Offset&lt;/h2&gt;
&lt;h3 id="recap"&gt;Recap&lt;/h3&gt;
&lt;p&gt;First, a brief recap on &lt;code&gt;offset pagination&lt;/code&gt; - this method uses the &lt;code&gt;OFFSET&lt;/code&gt; and &lt;code&gt;FETCH&lt;/code&gt; clauses to effectively skip &lt;em&gt;X&lt;/em&gt; rows, and FETCH the following &lt;em&gt;Y&lt;/em&gt; rows, ordered by the specified column(s):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;DECLARE @PageNumber INT = 5,
        @PageSize INT = 20; 

-- In this example, skip 100 records
-- and return the next 20
SELECT Id 
FROM OffSetDemo
ORDER BY Id ASC
OFFSET @PageNumber * @PageSize ROWS
FETCH NEXT @PageSize ROWS ONLY
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Based on &lt;em&gt;PageNumber&lt;/em&gt; and &lt;em&gt;PageSize&lt;/em&gt;, the appropriate number of rows and skipped, and then &lt;em&gt;PageSize&lt;/em&gt; rows retrieved.&lt;/p&gt;
&lt;p&gt;This approach works, however might not be suitable for all use cases.&lt;/p&gt;
&lt;h3 id="issues"&gt;Issues&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Large datasets&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One issue with the &lt;code&gt;offset pagination&lt;/code&gt; approach, is that when the &lt;code&gt;OFFSET&lt;/code&gt; clauses is used, the database is still required to go through all rows to find the correct starting record.&lt;/p&gt;
&lt;p&gt;For example, if we have a database with 1 000 000 rows.&lt;/p&gt;
&lt;p&gt;When the following is executed, the database still needs to go through the first 100 rows (the OFFSET value) to find the 101st row.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT Id 
FROM OffSetDemo
ORDER BY Id ASC
OFFSET 100 ROWS
FETCH NEXT 50 ROWS ONLY
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will probably not have a negative impact on performance, however if the following is executed:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT Id 
FROM OffSetDemo
ORDER BY Id ASC
OFFSET 900 000 ROWS
FETCH NEXT 50 ROWS ONLY
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the database needs to go through 900 000 rows (the OFFSET value) to find the 900 001st row, which could definitely have a performance impact.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Missing/duplicate records&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If the dataset being used is changing while being queried, the &lt;code&gt;offset&lt;/code&gt; method could result in records either being missed, or records being duplicated as paging occurs.&lt;/p&gt;
&lt;p&gt;With a page size of 20, when the first page is queried, the first 20 records are returned. When the second page is being queried for, the first 20 rows are skipped (with &lt;code&gt;OFFSET&lt;/code&gt;) and the next 20 rows are returned. Consider however, if between loading the first and second page, a record in the first 20 is deleted. The record which was number 21 when the first page loaded, is record 20 when the second page is loaded - this is missed when loading page 1 and page 2.&lt;/p&gt;
&lt;p&gt;The same applied if a record is added which falls into the first 20 - the record which previously was number 20, would become record number 21, and thus would appear on page 1 and page 2.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Keyset pagination&lt;/code&gt; solves aims to solve these problems (while introducing a different set of limitations).&lt;/p&gt;
&lt;h2 id="keyset"&gt;Keyset&lt;/h2&gt;
&lt;p&gt;With &lt;code&gt;keyset&lt;/code&gt; pagination, instead of using the &lt;code&gt;OFFSET&lt;/code&gt; clause to skip rows to determine where the returned dataset should start, a &lt;code&gt;WHERE&lt;/code&gt; clause is used to determine where the returned dataset should start.&lt;/p&gt;
&lt;p&gt;A few examples will make it clearer - again consider a database with 1 000 000 rows, with an int &lt;em&gt;Id&lt;/em&gt; primary key column on which the data is sorted.&lt;/p&gt;
&lt;p&gt;To retrieve the first page:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;-- OFFSET pagination
SELECT Id 
FROM OffSetDemo
ORDER BY Id ASC
OFFSET 0 ROWS
FETCH NEXT 50 ROWS ONLY

-- KEYSET pagination
SELECT TOP 50 Id 
FROM OffSetDemo
WHERE Id &amp;gt; 0
ORDER BY Id ASC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To retrieve the 10th page (for example):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;-- OFFSET pagination
SELECT Id 
FROM OffSetDemo
ORDER BY Id ASC
OFFSET 500 ROWS -- 50 x 10
FETCH NEXT 50 ROWS ONLY

-- KEYSET pagination
SELECT TOP 50 Id 
FROM OffSetDemo
WHERE Id &amp;gt; 500
ORDER BY Id ASC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In terms of performance, the keyset version is a lot more performant - assuming there are indexes created on the &lt;code&gt;WHERE&lt;/code&gt; clause columns. Using the WHERE clause and the index, SQL does not need to go through &lt;em&gt;X&lt;/em&gt; number rows to find the correct starting point&lt;/p&gt;
&lt;p&gt;This also solves the problem of records being duplicated or being missed as absolute values are being used to do the lookup and not offsets. If a record in the first 20 is deleted, it will not effect the second page of 20 records, and the same applied if a new record is added to the first 20 - the second page of 20 records is unaffected.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Keyset pagination&lt;/code&gt; is not without its own limitations though.&lt;/p&gt;
&lt;h3 id="limitations"&gt;Limitations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;No random access&lt;/code&gt; - with &lt;em&gt;keyset pagination&lt;/em&gt; one is unable to get, for example, the 15th page. To get a page of data, the last &lt;em&gt;Id&lt;/em&gt; (in the above example) of the previous page is required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Complicated multi-column filtering&lt;/code&gt; - with the above examples, the &lt;code&gt;WHERE&lt;/code&gt; clause is straightforward, but this can get complicated. Consider if the data is going to be sorted by a &lt;em&gt;CreatedDate&lt;/em&gt; column, and if two record have the same &lt;em&gt;CreatedDate&lt;/em&gt;, then they should be sorted by &lt;em&gt;Id&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT TOP 50 DateCreated, Id 
FROM OffSetDemo
WHERE ((DateCreated &amp;gt; '2022/06/12') OR (DateCreated = '2022/06/12' AND Id &amp;gt; 500))
ORDER BY DateCreated, Id ASC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depending on how many filter conditions there are, the &lt;code&gt;WHERE&lt;/code&gt; clause could become complex.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;The choice between the two methods (and any other), as always, comes down to the specific use case.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Need random access to any page? Use offset&lt;/li&gt;
&lt;li&gt;Large dataset, and no random access required? Use keyset&lt;/li&gt;
&lt;li&gt;Large dataset, but do require random access? Why not both? - offset for the random access, and keyset for the &lt;em&gt;next/previous&lt;/em&gt; functionality&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=DIKH-q-gJNU"&gt;.NET Data Community Standup - Database Pagination&lt;/a&gt;&lt;/p&gt;
&lt;!--?# DailyDrop ?--&gt;108: 01-07-2022&lt;!--?#/ DailyDrop ?--&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/30-for-multi-operations</id>
		<title>Multiple statements in a for loop</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/30-for-multi-operations" />
		<updated>2022-06-30T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;Not only can the &lt;em&gt;iterator section&lt;/em&gt; (the last section) in a &lt;code&gt;for loop&lt;/code&gt; contain &lt;code&gt;multiple operations&lt;/code&gt;, but it can also contain &lt;code&gt;statements&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="iterator-section"&gt;Iterator section&lt;/h2&gt;
&lt;p&gt;Generally, when defining and using a &lt;code&gt;for loop&lt;/code&gt;, the &lt;em&gt;iterator section&lt;/em&gt; only increases (or decreased) the initializer variable, &lt;code&gt;loopCount&lt;/code&gt; in the below example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;for (var loopCount = 0; loopCount &amp;lt; 100; loopCount++) 
{ 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;em&gt;iterator section&lt;/em&gt; &lt;code&gt;can actually contain statements, separated by a comma!&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="operations"&gt;Operations&lt;/h3&gt;
&lt;p&gt;In this simple example, each loop handles its iterations with the &lt;code&gt;i&lt;/code&gt; variable, but also decreases a shared &lt;code&gt;progress&lt;/code&gt; variable representing overall progress:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var valueArray = new int[] { 100, 25, 70 };
var progress = valueArray.Sum();

for (int i = 0; i &amp;lt; valueArray[0]; i++, progress--)
{
    // Simulate some processing
    Thread.Sleep(10);
    
    Console.Clear();
    Console.WriteLine($&amp;quot;{progress} items remaining to be processed&amp;quot;);
}

for (int i = 0; i &amp;lt; valueArray[1]; i++, progress--)
{
    // Simulate some processing
    Thread.Sleep(10);
    
    Console.Clear();
    Console.WriteLine($&amp;quot;{progress} items remaining to be processed&amp;quot;);
}

for (int i = 0; i &amp;lt;= valueArray[2]; i++, progress--)
{
    // Simulate some processing
    Thread.Sleep(10);
    
    Console.Clear();
    Console.WriteLine($&amp;quot;{progress} items remaining to be processed&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="statements"&gt;Statements&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;iterator section&lt;/em&gt; can doesn't only have to contain operations, but can also contain statements.&lt;/p&gt;
&lt;p&gt;For example purposes, consider logging is to be performed for each record being processed - you might do it as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;for (int i = 1; i &amp;lt;= recordsToProcess.Count(); i++)
{
    // log some information about the record
    Console.WriteLine($&amp;quot;Current value of process record: {recordsToProcess[i]}&amp;quot;);

    // Simulate some processing
    Thread.Sleep(10);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The keep the code contained within the for loop block clear, one could move the log statement into the &lt;code&gt;for loop iterator section&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// logging moved to into the for loop statement
for (int i = 1; i &amp;lt;= recordsToProcess.Count(); 
    Console.WriteLine($&amp;quot;Current value of process record: {recordsToProcess[i]}&amp;quot;), i++)
{
    // actual code block is cleaner

    // Simulate some processing
    Thread.Sleep(10);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="methods"&gt;Methods&lt;/h3&gt;
&lt;p&gt;Expanding on the previous example, methods can also be invoked in the &lt;em&gt;iterator section&lt;/em&gt; - the logging can be moved to its own method to keep the code slightly cleaner:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;for (int i = 0; i &amp;lt;= recordsToProcess.Count(); LogRecord(recordsToProcess[i]), i++)
{
    // Simulate some processing
    Thread.Sleep(10);
}

// ---------------------

void LogRecord(int recordValue)
{
    Console.WriteLine($&amp;quot;Current value of process record: {recordValue}&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;This bit of knowledge does have limited practical application, and one could argue that it makes the code &lt;em&gt;harder&lt;/em&gt; to read - however it does have it's place, and I think could be especially useful in the first example to keep track of multiple &amp;quot;progress-type&amp;quot; counters.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/buhakmeh/status/1526275436140961805"&gt;Khalid Abuhakmeh Tweet&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;107: 30-06-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/29-css-all</id>
		<title>CSS property: all</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/29-css-all" />
		<updated>2022-06-29T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The CSS &lt;code&gt;all&lt;/code&gt; property can be used to reset all properties on an element to their initial values.&lt;/p&gt;
&lt;p&gt;Not directly related to .NET/C#, but still relevent to any .NET developer doing any kind of web development.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="valid-values"&gt;Valid values&lt;/h2&gt;
&lt;p&gt;Before we see the &lt;code&gt;all&lt;/code&gt; property in action, le't have a look at all its possible values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;initial&lt;/em&gt;&lt;/strong&gt;: Specifies that all the element's properties should be changed to their initial values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;inherit&lt;/em&gt;&lt;/strong&gt;: Specifies that all the element's properties should be changed to their inherited values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;unset&lt;/em&gt;&lt;/strong&gt;: Specifies that all the element's properties should be changed to their inherited values if they inherit by default, or to their initial values if not.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;revert&lt;/em&gt;&lt;/strong&gt;: Resulting values depend on the stylesheet origin where this property is located.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;revert-layer&lt;/em&gt;&lt;/strong&gt;: Specifies that all the element's properties should roll back the cascade to a previous cascade layer, if one exists.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="example"&gt;Example&lt;/h2&gt;
&lt;h3 id="base"&gt;Base&lt;/h3&gt;
&lt;p&gt;The below examples will use this HTML and CSS snippet:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;style&amp;gt;
        article {
            color: red;
            text-decoration: underline;
            font-size: 24pt;
        }

        h1 {
            color: green;
            font-size: 14pt;
            line-height: 2em;
            background-color: aqua;
        }

        .title {}
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;article&amp;gt;
    &amp;lt;h1 class="title"&amp;gt;AlwaysDeveloping.net&amp;lt;/p&amp;gt;
    &amp;lt;h1&amp;gt;always learning | always growing&amp;lt;/p&amp;gt;
&amp;lt;/article&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above results in this well designed, elegant HTML page:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/base.png" alt="Base page"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="the-issue"&gt;The issue&lt;/h3&gt;
&lt;p&gt;The "issue" with this setup that, as &lt;code&gt;h1&lt;/code&gt; element with the &lt;code&gt;title&lt;/code&gt; class automatically inherits all the properties from &lt;code&gt;h1&lt;/code&gt;, so to generally stop this inheritence, I've been manually overwriting each inherited property.&lt;/p&gt;
&lt;p&gt;For example, if we &lt;em&gt;just&lt;/em&gt; want the &lt;code&gt;title&lt;/code&gt; class element to have a yellow background, but none of the other properties inherited from &lt;code&gt;h1&lt;/code&gt;, then the following is required:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;style&amp;gt;
    article {
        color: red;
        text-decoration: underline;
        font-size: 24pt;
    }

    h1 {
        color: green;
        font-size: 14pt;
        line-height: 2em;
        background-color: aqua;
    }

    .title {
        color: red;
        font-size: 24pt;
        background-color: yellow;
    }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each property that is inherited from &lt;code&gt;h1&lt;/code&gt; needs to be set back to the &lt;code&gt;article&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;This results in the HTML looking as we want it, as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/issue.png" alt="Overwritten properties"&gt;&lt;/p&gt;
&lt;p&gt;However, the &lt;code&gt;all&lt;/code&gt; property can simplify this for us! Next we'll have a look at how this property effects the HTML output.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="initial"&gt;initial&lt;/h3&gt;
&lt;p&gt;First up, the &lt;code&gt;all&lt;/code&gt; property with a value of &lt;code&gt;initial&lt;/code&gt; - this sets the properties back to their &lt;em&gt;initial values&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;style&amp;gt;
    article {
        color: red;
        text-decoration: underline;
        font-size: 24pt;
    }

    h1 {
        color: green;
        font-size: 14pt;
        line-height: 2em;
        background-color: aqua;
    }

    .title {
        all: initial;
        background-color: yellow;
    }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we set &lt;code&gt;all: initial&lt;/code&gt; and then set the background color to yellow. The result is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/initial.png" alt="all: initial"&gt;&lt;/p&gt;
&lt;p&gt;The properties of &lt;code&gt;article&lt;/code&gt; are not (all) respected - the element reverts back to its &lt;em&gt;initial values&lt;/em&gt; and then subsequent defined properties (background of yellow) are applied.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="inherit"&gt;inherit&lt;/h3&gt;
&lt;p&gt;Next up, the &lt;code&gt;all&lt;/code&gt; property with a value of &lt;code&gt;inherit&lt;/code&gt; - this sets the properties back to their &lt;em&gt;inherited values&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;style&amp;gt;
    article {
        color: red;
        text-decoration: underline;
        font-size: 24pt;
    }

    h1 {
        color: green;
        font-size: 14pt;
        line-height: 2em;
        background-color: aqua;
    }

    .title {
        all: inherit;
        background-color: yellow;
    }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with the previous example, here we set &lt;code&gt;all: inherit&lt;/code&gt; and then set the background color to yellow. The result is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/inherit.png" alt="all: inherit"&gt;&lt;/p&gt;
&lt;p&gt;The properties of &lt;code&gt;title&lt;/code&gt; revert back to the inherited values from &lt;code&gt;article&lt;/code&gt; - this is the same outcome as when each property was manually overwritten, just with less manual work!&lt;/p&gt;
&lt;p&gt;For completeness we'll have a quick look at the other &lt;code&gt;all&lt;/code&gt; property values as well.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="unset"&gt;unset&lt;/h3&gt;
&lt;p&gt;Next up, the &lt;code&gt;all&lt;/code&gt; property with a value of &lt;code&gt;unset&lt;/code&gt; - this sets the properties back to either their respective value, either &lt;em&gt;initial or inherited&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;style&amp;gt;
    article {
        color: red;
        text-decoration: underline;
        font-size: 24pt;
    }

    h1 {
        color: green;
        font-size: 14pt;
        line-height: 2em;
        background-color: aqua;
    }

    .title {
        all: unset;
        background-color: yellow;
    }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At first glance it might seem like the output is the same as &lt;code&gt;all: inherit&lt;/code&gt;, but the padding and width of the elements have been reset (or unset) in this instance.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/unset.png" alt="all: inherit"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="revert-and-revert-layer"&gt;revert and revert-layer&lt;/h3&gt;
&lt;p&gt;Lastly is the &lt;code&gt;all&lt;/code&gt; property with a value of &lt;code&gt;revert&lt;/code&gt; or &lt;code&gt;revert-layer&lt;/code&gt;. These have been grouped together for this example as they produce the exact same result.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;style&amp;gt;
    article {
        color: red;
        text-decoration: underline;
        font-size: 24pt;
    }

    h1 {
        color: green;
        font-size: 14pt;
        line-height: 2em;
        background-color: aqua;
    }

    .title {
        all: revert;
        background-color: yellow;
    }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/revert.png" alt="all: revert"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Having recently moved this blog to &lt;a href="https://alwaysdeveloping.net/www.statiq.dev"&gt;Statiq&lt;/a&gt;, which included customizing the theme - I wish I had learnt about this property sooner.&lt;/p&gt;
&lt;p&gt;I don't often do website styling, but if (when) I do in future, I'll be sure to keep this property in mind.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/2022/05/lesser-known-underused-css-features-2022/#all-property"&gt;all Property&lt;/a&gt;&lt;/p&gt;
&lt;!--?# DailyDrop ?--&gt;106: 29-06-2022&lt;!--?#/ DailyDrop ?--&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/28-dictionary-tuple</id>
		<title>Destructing a Dictionary record into a Tuple</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/28-dictionary-tuple" />
		<updated>2022-06-28T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;Dictionary&lt;/code&gt; record can be destructed into a &lt;code&gt;Tuple&lt;/code&gt; - specifically the &lt;code&gt;KeyValuePair&lt;/code&gt; type representing a dictionary record can be destructed into a &lt;code&gt;Tuple&lt;/code&gt;. In addition, as the &lt;code&gt;Dictionary&lt;/code&gt; type contains a &lt;em&gt;GetEnumerator&lt;/em&gt; method, &lt;a href="https://alwaysdeveloping.net/03/03-getenumerator"&gt;it can be iterated over&lt;/a&gt; into a &lt;code&gt;Tuple&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;p&gt;In all of the below examples, &lt;em&gt;numberDictionary&lt;/em&gt; is of type &lt;code&gt;Dictionary&amp;lt;string, int&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="key-iteration"&gt;Key iteration&lt;/h3&gt;
&lt;p&gt;One way to iterate through all entries in a &lt;code&gt;Dictionary&lt;/code&gt; is to loop through each &lt;code&gt;Key&lt;/code&gt; and then use the &lt;em&gt;Key&lt;/em&gt; to retrieve the entry &lt;code&gt;Value&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void IterateKeyValue()
{
    var sum = 0;

    // iterate of each key in the dictionary
    foreach (var key in numberDictionary.Keys)
    {
        // get the int value based on the key
        sum += numberDictionary[key];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the &lt;code&gt;Dictionary&lt;/code&gt; is accessed twice, once to get the &lt;em&gt;Key&lt;/em&gt; and a second time to get the &lt;em&gt;Value&lt;/em&gt; for the specific Key.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="keyvalue-iteration"&gt;KeyValue iteration&lt;/h3&gt;
&lt;p&gt;The next method for iteration, is to iterate through each &lt;code&gt;Dictionary&lt;/code&gt; record, a &lt;code&gt;KeyValuePair&lt;/code&gt;. This is possible because Dictionary contains a &lt;em&gt;GetEnumerator&lt;/em&gt; method.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void IterateKVPair()
{
    var sum = 0;

    // iterate of each KeyValuePair in the dictionary
    foreach (KeyValuePair&amp;lt;string, int&amp;gt; kv in numberDictionary)
    {
        // get the value part of the KeyValuePair
        sum += kv.Value;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simpler than the previous method, and here the Dictionary itself is only accessed only once to get the &lt;code&gt;KeyValuePair&lt;/code&gt; which in turn contains all the information for the entry.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="tuple"&gt;Tuple&lt;/h3&gt;
&lt;p&gt;The last method for iteration, is to iterate through each &lt;code&gt;Dictionary&lt;/code&gt; item, but &lt;code&gt;destruct the KeyValuePair into a Tuple&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void IterateTuple()
{
    var sum = 0;

    // iterate and destruct into a tuple
    foreach (var (key, value) in numberDictionary)
    {
        // access the value directly
        sum += value;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One could argue whether this version is easier to read than the previous &lt;em&gt;KeyValuePair&lt;/em&gt; version - personally I do find this version more readable. An added benefit is that the name of the &lt;code&gt;Tuple&lt;/code&gt; items can be customized to make it obvious to the reader as to what they contains. So instead of &lt;em&gt;Key&lt;/em&gt; and &lt;em&gt;Value&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void IterateProducts()
{
    var sum = 0;
    foreach (var (productName, price) in productDictionary)
    {
        sum += intValue;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id="benchmarks"&gt;Benchmarks&lt;/h2&gt;
&lt;p&gt;So we've looked at three ways to get the information from a Dictionary, but how to each of them perform?&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Error&lt;/th&gt;
&lt;th style="text-align: right;"&gt;StdDev&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Ratio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IterateKeyValue&lt;/td&gt;
&lt;td style="text-align: right;"&gt;14.827 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.1774 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.1659 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IterateTuple&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.529 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0468 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0438 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IterateKVPair&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.519 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0296 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0262 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.24&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;KeyValuePair&lt;/code&gt; and &lt;code&gt;Tuple&lt;/code&gt; versions are comparable, while iterating through each &lt;em&gt;Key&lt;/em&gt; and then getting the &lt;em&gt;Value&lt;/em&gt; is &lt;code&gt;4 times slower&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Iterating through &lt;em&gt;Keys&lt;/em&gt;, to then retrieve the &lt;em&gt;Value&lt;/em&gt; shouldn't ever be the default method for iteration - especially when there are other more performant and easier to read methods available.&lt;br&gt;
&lt;em&gt;KeyValuePair&lt;/em&gt; and &lt;em&gt;Tuple&lt;/em&gt; iteration are comparable, and usage comes down to personal preference - personally I prefer the &lt;code&gt;Tuple&lt;/code&gt; with its added benefit of being able to accurately name the &lt;em&gt;Key&lt;/em&gt; and &lt;em&gt;Value&lt;/em&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/buhakmeh/status/1525885135727501312"&gt;Khalid Abuhakmeh Tweet&lt;/a&gt;&lt;/p&gt;
&lt;!--?# DailyDrop ?--&gt;105: 28-06-2022&lt;!--?#/ DailyDrop ?--&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/27-lambda-vs-local</id>
		<title>Lambda vs local function performance</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/27-lambda-vs-local" />
		<updated>2022-06-27T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;local function&lt;/code&gt; will out perform a &lt;code&gt;lambda function&lt;/code&gt; by a significant margin, which can make a different especially if the function is called from within a loop.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;p&gt;The use case is straight forward: &lt;code&gt;iterate through a list of 500 integers, and if the number is larger than a supplied value (y), add it to a running total&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Below we look at a number of different ways to perform the &lt;code&gt;if the number is larger than a supplied value (y)&lt;/code&gt; check, and then benchmark the performance of each technique.&lt;/p&gt;
&lt;h3 id="lambda"&gt;Lambda&lt;/h3&gt;
&lt;p&gt;The first method is to use a &lt;code&gt;lambda function&lt;/code&gt; to perform the &lt;em&gt;where&lt;/em&gt; check:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public int Lambda(int y)
{
    int runningTotal = 0;

    // define the lambda to compare two values
    // and return true or false based on the results
    Func&amp;lt;int, bool&amp;gt; whereFilter = x =&amp;gt; x &amp;gt; y;

    for(int i = 0; i &amp;lt; 500; i++)
    {
        // call the lambda
        if(whereFilter(i))
        {
            runningTotal += i;
        }
    }

    return runningTotal;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A lambda function is defined which compares two values, and is then invoked to compare the iteration value with the supplied value.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="local-function"&gt;Local function&lt;/h3&gt;
&lt;p&gt;Next, instead of using a lambda, we will define a &lt;code&gt;local function&lt;/code&gt; to perform the &lt;em&gt;where&lt;/em&gt; check:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public int LocalFunction(int y)
{
    int runningTotal = 0;

    // define the local function expression
    // with the same functionality as the above lambda
    bool whereFilter(int x) =&amp;gt; x &amp;gt; y;

    for (int i = 0; i &amp;lt; 500; i++)
    {
        // invoke the local function
        if (whereFilter(i))
        {
            runningTotal += i;
        }
    }

    return runningTotal;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A local function, as with the lambda, is defined which compares two values, and is then invoked to compare the iteration value with the supplied value.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="function"&gt;Function&lt;/h3&gt;
&lt;p&gt;Next, the local function will be replaced with a normal &lt;code&gt;function&lt;/code&gt; to perform the &lt;em&gt;where&lt;/em&gt; check:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public int Method(int y)
{
    int runningTotal = 0;

    for (int i = 0; i &amp;lt; 500; i++)
    {
        // call the separate expression-bodied method
        if (whereFilterMethod(i, y))
        {
            runningTotal += i;
        }
    }

    return runningTotal;
}

// expression bodied method to compare two values
private bool whereFilterMethod(int x, int y) =&amp;gt; x &amp;gt; y;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The method body is the same as the local function, but defined outside the method in question (&lt;em&gt;Method&lt;/em&gt; in this example).&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="operation"&gt;Operation&lt;/h3&gt;
&lt;p&gt;Lastly, instead of using any variation of method, the operation will be put directly inline:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public int Operation(int y)
{
    int runningTotal = 0;

    for (int i = 0; i &amp;lt; 500; i++)
    {
        // straight compare of the two value
        if (i &amp;gt; y)
        {
            runningTotal += i;
        }
    }

    return runningTotal;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No method defined here, just the straight comparison.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="benchmarks"&gt;Benchmarks&lt;/h2&gt;
&lt;p&gt;Finally let's benchmark all of the above techniques. &lt;strong&gt;BenchmarkDotNet&lt;/strong&gt; was used to benchmark each technique using two parameters, &lt;code&gt;17&lt;/code&gt; and &lt;code&gt;472&lt;/code&gt;, to give representation for the lower and upper bounds of the loop.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;y&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Error&lt;/th&gt;
&lt;th style="text-align: right;"&gt;StdDev&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Ratio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Lambda&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td style="text-align: right;"&gt;974.7 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;13.68 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;12.79 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LocalFunction&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td style="text-align: right;"&gt;135.6 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.51 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.34 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Method&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td style="text-align: right;"&gt;136.2 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.30 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.15 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Operation&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td style="text-align: right;"&gt;135.4 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.86 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.67 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lambda&lt;/td&gt;
&lt;td&gt;472&lt;/td&gt;
&lt;td style="text-align: right;"&gt;854.0 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;9.61 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;8.99 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LocalFunction&lt;/td&gt;
&lt;td&gt;472&lt;/td&gt;
&lt;td style="text-align: right;"&gt;255.0 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.85 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.42 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Method&lt;/td&gt;
&lt;td&gt;472&lt;/td&gt;
&lt;td style="text-align: right;"&gt;263.0 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.95 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.76 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Operation&lt;/td&gt;
&lt;td&gt;472&lt;/td&gt;
&lt;td style="text-align: right;"&gt;252.2 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;4.00 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.74 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.30&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As one can see from the results, a lambda is &lt;code&gt;3-6x times&lt;/code&gt; slower than any of the other methods.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;When calling the &lt;code&gt;lambda/local function/function/operation&lt;/code&gt; once off in the hot path, there probably won't be any noticeable difference depending on which method is used.&lt;br /&gt;
However if used in a loop (such as in the example), consider moving away from a &lt;code&gt;lambda&lt;/code&gt; to any of the other techniques to see an improvement in performance.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://leveluppp.ghost.io/content/images/size/w1000/2021/07/lambda_tips1-1.png"&gt;Lambda Optimizations Tips 1&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;104: 27-06-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/24-curry-basics</id>
		<title>Method currying basics in C#</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/24-curry-basics" />
		<updated>2022-06-24T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Method Currying&lt;/code&gt; is entails breaking a single method (which takes multiple parameters), into a sequence of single-parameter methods.&lt;br /&gt;
For example, instead of a method which takes 3 parameters &lt;code&gt;method(a, b, c)&lt;/code&gt;, currying the method would instead turn it into &lt;code&gt;method(a)(b)(c)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This offers a different syntax, which allows for complex composite methods to be built up from simpler methods. Currying is more commonly used in functional programming, but can be utilized in C#.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="currying"&gt;Currying&lt;/h2&gt;
&lt;p&gt;The below examples contain a &lt;em&gt;very simple&lt;/em&gt; example of currying, but it will demonstrate the basics of how currying a method will break it down into a sequence of single argument methods.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="multiply-method"&gt;Multiply method&lt;/h3&gt;
&lt;p&gt;Let's consider a method which &lt;code&gt;multiples three integers together&lt;/code&gt;, and returns the result. This can be written as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;int Multiply(int a, int b, int c)
{
    return a * b * c;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far so good.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="multiply-lambda"&gt;Multiply Lambda&lt;/h3&gt;
&lt;p&gt;This &lt;em&gt;Multiply&lt;/em&gt; method, can also be written as a &lt;code&gt;lambda Func&lt;/code&gt; instead of a full method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Func&amp;lt;int, int, int, int&amp;gt; multiply = (a, b, c) =&amp;gt; a * b * c;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we start with the currying process.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="multiply-curry-part-1"&gt;Multiply Curry part 1&lt;/h3&gt;
&lt;p&gt;As mentioned, &lt;code&gt;currying&lt;/code&gt; entails breaking down a single method, with three parameters in this example, into a sequence of single-parameters methods. Let's start small and build on it until we have the desired result.&lt;/p&gt;
&lt;p&gt;First, we'll change the above &lt;em&gt;multiply&lt;/em&gt; lambda to only take one argument:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Func&amp;lt;int, Func&amp;lt;int, int, int&amp;gt;&amp;gt; curryMultipleBase = a =&amp;gt; ((b, c) =&amp;gt; a * b * c);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It looks a bit complicated, but basically the initial lambda has been updated to instead of having three arguments, it now &lt;code&gt;takes one argument, and returns a Func&amp;lt;&amp;gt;, which takes 2 arguments, and returns an int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Overall, the entire composition of methods still takes 3 parameters. This can now be invoked as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Func&amp;lt;int, Func&amp;lt;int, int, int&amp;gt;&amp;gt; curryMultipleBase = a =&amp;gt; ((b, c) =&amp;gt; a * b * c);

// invoke the lambda, passing in one value
// getting back a lambda which takes two arguments
Func&amp;lt;int, int, int&amp;gt; result1 = curryMultipleBase(2);

// invoke the lambda which takes two arguments
// and returns an int
int result2 = result1(3, 4);

Console.WriteLine(result2);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or more succinctly expressed as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Func&amp;lt;int, Func&amp;lt;int, int, int&amp;gt;&amp;gt; curryMultipleBase = a =&amp;gt; ((b, c) =&amp;gt; a * b * c);

// instead of having the intermediate Func&amp;lt;int, int, int&amp;gt;
// just invoke the result directly
int result = curryMultipleBase(2)(3, 4);
Console.WriteLine(result);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both of the above yield a result of &lt;code&gt;24&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We've converted a portion to be single parameter, but a portion still has 2 parameters.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="multiply-curry-part-2"&gt;Multiply Curry part 2&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;curryMultipleBase&lt;/em&gt; returns a lambda, which has two parameters - the objective to too only have single parameter methods. Let's convert the two parameter Func into two single parameter Func's:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Old
Func&amp;lt;int, Func&amp;lt;int, int, int&amp;gt;&amp;gt; curryMultipleBase = a =&amp;gt; ((b, c) =&amp;gt; a * b * c);

// New
Func&amp;lt;int, Func&amp;lt;int, Func&amp;lt;int, int&amp;gt;&amp;gt;&amp;gt; curryMultiple = a =&amp;gt; (b =&amp;gt; c =&amp;gt; a * b * c;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of returning a Func which takes 2 arguments and returns an int, the lambda now returns a &lt;code&gt;Func, which takes 1 parameter, and returns a Func which takes one parameter and returns an int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The new version of the lambda can be invoked as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Func&amp;lt;int, Func&amp;lt;int, Func&amp;lt;int, int&amp;gt;&amp;gt;&amp;gt; curryMultiple = a =&amp;gt; (b =&amp;gt; (c =&amp;gt; a * b * c));

Func&amp;lt;int, Func&amp;lt;int, int&amp;gt;&amp;gt; result1 = curryMultiple(2);
Func&amp;lt;int, int&amp;gt; result2 = result1(3);
int result3 = result2(3);

Console.WriteLine(result3);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or more succinctly expressed as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Func&amp;lt;int, Func&amp;lt;int, int, int&amp;gt;&amp;gt; curryMultipleBase = a =&amp;gt; ((b, c) =&amp;gt; a * b * c);

// instead of having the intermediate Func(s)
// just invoke the result directly
int result = curryMultiple(2)(3)(4);
Console.WriteLine(result);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that's it! We've successfully converted the initial three parameter method, into a sequence of one parameter methods - &lt;code&gt;int result = curryMultiple(2)(3)(4);&lt;/code&gt;!&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="logging-example"&gt;Logging example&lt;/h3&gt;
&lt;p&gt;Suppose we have to call a &lt;em&gt;Log&lt;/em&gt; method, with a message and the type of message to log (Error, Warning or Information). There are a number of techniques to achieve this, especially if the method is called often.&lt;/p&gt;
&lt;p&gt;The method could be called directly:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    Log(&amp;quot;error&amp;quot;, &amp;quot;An Exception occurred&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &amp;quot;issue&amp;quot; with this approach is that the constant type parameter &amp;quot;error&amp;quot; (or &amp;quot;warning&amp;quot; or &amp;quot;info&amp;quot;) is repeated with every call.&lt;/p&gt;
&lt;p&gt;We could create an &lt;code&gt;Action&lt;/code&gt; for each log type, which can then be reused:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Action&amp;lt;string&amp;gt; logError = message =&amp;gt; Log(&amp;quot;error&amp;quot;, message);
Action&amp;lt;string&amp;gt; logWarning = message =&amp;gt; Log(&amp;quot;warning&amp;quot;, message);
Action&amp;lt;string&amp;gt; logInfo = message =&amp;gt; Log(&amp;quot;info&amp;quot;, message);

logWarning(&amp;quot;Validation failed, skipping record&amp;quot;);

// logWarning can be reused
logWarning(&amp;quot;An exception occurred, but the record was saved successfully&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The constant type parameter is now only specified once, instead of once per call.&lt;/p&gt;
&lt;p&gt;Yet another option, is too make use of &lt;code&gt;method currying&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Action&amp;lt;string&amp;gt; CurryLog(string type) =&amp;gt; message =&amp;gt; Log(type, message);

var curryLogInfo = CurryLog(&amp;quot;info&amp;quot;);
curryLogInfo(&amp;quot;Record processed successfully&amp;quot;);

// curryLogInfo can be reused
curryLogInfo(&amp;quot;Saving record to database&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;currying&lt;/code&gt; approach is very similar to the &lt;code&gt;Action&lt;/code&gt; technique mentioned above, but it comes down to syntax preference.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;I found the idea of &lt;code&gt;method currying&lt;/code&gt; very interesting and intriguing, but I'm not sure of its benefits in C# over other techniques. Perhaps a preference for the syntax style is enough of a benefit to use it instead of the &amp;quot;traditional&amp;quot; way.&lt;/p&gt;
&lt;p&gt;Either way though, its useful to have knowledge of this technique, just incase it offers a unique solution to a problem in the future.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-1-fundamentals-closure-currying-and-partial-application"&gt;Currying and partial application&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://towardsdatascience.com/what-is-currying-in-programming-56fd57103431"&gt;What Is Currying in Programming?&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;103: 24-06-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/23-visual-studio-layouts</id>
		<title>Visual Studio layouts</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/23-visual-studio-layouts" />
		<updated>2022-06-23T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;Visual Studio provides the functionality to configure different &lt;code&gt;layouts&lt;/code&gt; and switch between, based on the type of project or work being done.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;h3 id="default"&gt;Default&lt;/h3&gt;
&lt;p&gt;Creating and then switching between different layouts is as easy as clicking a button.&lt;/p&gt;
&lt;p&gt;For me, the first step is to create a &lt;code&gt;Default&lt;/code&gt; layout - a general purpose layout, suitable for most type of development work I do.&lt;/p&gt;
&lt;p&gt;This entails configuring the panes and windows in Visual Studio to have the desired layout, then selecting the &lt;code&gt;Window -&amp;gt; Save Window Layout&lt;/code&gt; menu option. A prompt will appear to give the layout a name - &lt;code&gt;Default&lt;/code&gt; for me.&lt;/p&gt;
&lt;p&gt;The actual panes and layout is unimportant, but what is important is what you have something which works for you. My default:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/default.png" alt="Default layout"&gt;&lt;/p&gt;
&lt;p&gt;Now that there is a default saved, you can easily move things around and at the click of a button go back to the default. By clicking &lt;code&gt;Window -&amp;gt; Apply Window Layout -&amp;gt; Default&lt;/code&gt; (or Ctrl-Alt-1), the panes and windows are restored to the &lt;code&gt;Default&lt;/code&gt; layout.&lt;/p&gt;
&lt;p&gt;Let's create another layout and switch between them.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="analyzer"&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;When working with &lt;a href="https://alwaysdeveloping.net/p/analyzer-explained"&gt;Roslyn Analyzers&lt;/a&gt;, the &lt;em&gt;Syntax Visualizer&lt;/em&gt; is an critical window, so one would want this to be prominent.&lt;/p&gt;
&lt;p&gt;I have update the layout to be as follows below, and saved it as my &lt;code&gt;RoslynAnalyzer&lt;/code&gt; layout. As you can see, the &lt;em&gt;Syntax Visualizer&lt;/em&gt; is now displayed on the right, using a good portion of screen real estate:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/Analyzer.png" alt="Analyzer layout"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Window -&amp;gt; Apply Window Layout -&amp;gt; X&lt;/code&gt; menu option (or Ctrl-Alt-1 and Ctrl-Alt-2) can now be used to easily switch between the layouts at the click of a button.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="design"&gt;Design&lt;/h3&gt;
&lt;p&gt;Another example is when doing design work which involves the &lt;em&gt;Toolbox&lt;/em&gt;, one might want as much space to use the designer:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/Design.png" alt="Design layout"&gt;&lt;/p&gt;
&lt;p&gt;Here the right panel has been made to "auto hide" to give as much space as possible to the middle pane for design (this could also apply to code as well, if thats what works for you)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;The ability to customize and personalize the layout in Visual Studio can definitely lead to more productivity and a sense of comfort with one's tools. The ability to customize it even more based on the &lt;em&gt;type of work&lt;/em&gt; just increases that productivity even more!&lt;/p&gt;
&lt;p&gt;Some additional scenarios for when one might want a different, custom layout:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Projects which use the database related windows vs non-database projects&lt;/li&gt;
&lt;li&gt;Projects which contain unit tests (and the usage of the related windows) vs projects with no unit tests&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/ide/customizing-window-layouts-in-visual-studio?view=vs-2022#create-and-save-custom-layouts"&gt;Create and save custom layouts&lt;/a&gt;&lt;/p&gt;
&lt;!--?# DailyDrop ?--&gt;102: 23-06-2022&lt;!--?#/ DailyDrop ?--&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/06/22-expando-conversion</id>
		<title>Converting ExpandObject</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/06/22-expando-conversion" />
		<updated>2022-06-22T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;ExpandoObject&lt;/code&gt; class implements &lt;code&gt;IEnumberable&lt;/code&gt; and &lt;code&gt;IDictionary&lt;/code&gt; - this means its fields can be iterated over, and that it can be converted to, and operated on as a Dictionary.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="expandoobject"&gt;ExpandoObject&lt;/h2&gt;
&lt;p&gt;First some information on the &lt;code&gt;ExpandoObject&lt;/code&gt; class - it enables one to add and deleted members of its instance at runtime.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;dynamic infoObject = new ExpandoObject();
infoObject.Name = &amp;quot;Always Developing&amp;quot;;
infoObject.Url = &amp;quot;www.alwaysdeveloping.net&amp;quot;;

Console.WriteLine(infoObject.Name);
Console.WriteLine(infoObject.Url);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above example, the properties &lt;em&gt;Name&lt;/em&gt; and &lt;em&gt;Age&lt;/em&gt; are dynamically added at runtime. Any number of properties, of any type can dynamically be added.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ExpandoObject&lt;/code&gt; can also have methods (Action and Func) added dynamically, and then invoked:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;dynamic infoObject = new ExpandoObject();
infoObject.Name = &amp;quot;Always Developing&amp;quot;;
infoObject.Url = &amp;quot;www.alwaysdeveloping.net&amp;quot;;
infoObject.Visitors = 0;
infoObject.IncreaseVisitorCount = (Action)(() =&amp;gt; { infoObject.Visitors++; });
infoObject.GetVisitorCount = (Func&amp;lt;int&amp;gt;)(() =&amp;gt; { return infoObject.Visitors; });

infoObject.IncreaseVisitorCount();
infoObject.IncreaseVisitorCount();

Console.WriteLine(infoObject.GetVisitorCount());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;em&gt;IncreaseVisitorCount&lt;/em&gt; Action and &lt;em&gt;GetVisitorCount&lt;/em&gt; Func are dynamically added, and then invoked.&lt;/p&gt;
&lt;p&gt;The output of the above being &lt;code&gt;2&lt;/code&gt;, as expected, as the &lt;em&gt;IncreaseVisitorCount&lt;/em&gt; method is invoked twice.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="ienumerable-conversion"&gt;IEnumerable conversion&lt;/h2&gt;
&lt;p&gt;As &lt;code&gt;ExpandoObject&lt;/code&gt; implement IEnumberable, specifically &lt;code&gt;IEnumerable&amp;lt;KeyValuePair&amp;lt;string, object?&amp;gt;&amp;gt;&lt;/code&gt; and can be iterated over, with a &lt;code&gt;KeyValuePair&amp;lt;string, object?&amp;gt;&lt;/code&gt; item returned for each iteration:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;dynamic infoObject = new ExpandoObject();
infoObject.Name = &amp;quot;Always Developing&amp;quot;;
infoObject.Url = &amp;quot;www.alwaysdeveloping.net&amp;quot;;
infoObject.Visitors = 0;
infoObject.IncreaseVisitorCount = (Action)(() =&amp;gt; { infoObject.Visitors++; });
infoObject.GetVisitorCount = (Func&amp;lt;int&amp;gt;)(() =&amp;gt; { return infoObject.Visitors; });

// prop is of type KeyValuePair&amp;lt;string, object?&amp;gt;
foreach (var prop in infoObject)
{
    Console.WriteLine($&amp;quot;Key: '{prop.Key}' with value '{prop.Value}'&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above, iterating over &lt;em&gt;infoObject&lt;/em&gt; will return each property dynamically added to the &lt;code&gt;ExpandoObject&lt;/code&gt; instance, including methods:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Key: 'Name' with value 'Always Developing'
Key: 'Url' with value 'www.alwaysdeveloping.net'
Key: 'Visitors' with value '2'
Key: 'IncreaseVisitorCount' with value 'System.Action'
Key: 'GetVisitorCount' with value 'System.Func`1[System.Int32]'
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="dictionary-conversion"&gt;Dictionary conversion&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ExpandoObject&lt;/code&gt; also implements &lt;code&gt;IDictionary&amp;lt;string, object?&amp;gt;&lt;/code&gt;, so can directly be assigned to this type:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;dynamic infoObject = new ExpandoObject();
infoObject.Name = &amp;quot;Always Developing&amp;quot;;
infoObject.Url = &amp;quot;www.alwaysdeveloping.net&amp;quot;;
infoObject.Visitors = 0;
infoObject.IncreaseVisitorCount = (Action)(() =&amp;gt; { infoObject.Visitors++; });
infoObject.GetVisitorCount = (Func&amp;lt;int&amp;gt;)(() =&amp;gt; { return infoObject.Visitors; });

// cast ExpandoObject to IDictionary&amp;lt;string, object?&amp;gt;
IDictionary&amp;lt;string, object?&amp;gt; dictionary = infoObject;
foreach (var item in dictionary)
{
    Console.WriteLine($&amp;quot;Key: '{item.Key}' with value '{item.Value}'&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of the above the same as the first example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Key: 'Name' with value 'Always Developing'
Key: 'Url' with value 'www.alwaysdeveloping.net'
Key: 'Visitors' with value '2'
Key: 'IncreaseVisitorCount' with value 'System.Action'
Key: 'GetVisitorCount' with value 'System.Func`1[System.Int32]'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Casting to &lt;code&gt;Dictionary&lt;/code&gt; allows one to check if a property/key has been added to the &lt;code&gt;ExpandoObject&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;IDictionary&amp;lt;string, object?&amp;gt; dictionary = infoObject;
foreach (var item in dictionary)
{
    Console.WriteLine($&amp;quot;Key: '{item.Key}' with value '{item.Value}'&amp;quot;);
}

// This would result in an exception
// var value = infoObject[&amp;quot;Name&amp;quot;];

// On a dictionary, this is allowed
if (dictionary.ContainsKey(&amp;quot;Name&amp;quot;))
{
    Console.WriteLine(dictionary[&amp;quot;Name&amp;quot;]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;This is a small, but useful piece of knowledge to be aware of if working with &lt;code&gt;ExpandoObject&lt;/code&gt; as the ability to easily convert to other types opens up new operations and possibilities on the instance.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.code4it.dev/csharptips/expandoobject-to-dictionary"&gt;C# Tip: Convert ExpandoObjects to IDictionary&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;101: 22-06-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
</feed>