<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>https://alwaysdeveloping.net/</id>
	<title />
	<link rel="self" href="https://alwaysdeveloping.net/" />
	<rights>Copyright © 2022</rights>
	<updated>2022-11-03T04:11:25Z</updated>
	<subtitle>always learning | always growing</subtitle>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/11/03-value-records</id>
		<title>Primitive obsession and Value Records </title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/11/03-value-records" />
		<updated>2022-11-03T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The C# &lt;code&gt;record&lt;/code&gt; type can provide a clean, quick and easy way to overcome &lt;em&gt;primitive obsession&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Primitive obsession&lt;/em&gt;, as the name implies, is the overuse of primitive types (int, string, Guid, etc) to represent more complex business or domain concepts.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="primitive"&gt;Primitive&lt;/h2&gt;
&lt;p&gt;Let's look at an example, of a (very simplified) &lt;em&gt;Order&lt;/em&gt; entity:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Order
{
    public int OrderId { get; set; }

    public decimal OrderTotal { get; set; }

    public int ItemCount { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On the surface, this is all good. This will work and is probably what most developer are familiar with when it comes to entities.&lt;/p&gt;
&lt;p&gt;However, the above class structure allows for the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var order = new Order
{
    OrderId = 100,
    ItemCount = 2,
    OrderTotal = 148.95m
};

// This doesn't make sense!
order.OrderId = order.OrderId * 2;
// No!?
order.ItemCount = -10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As primitive types are used for &lt;em&gt;domain business concepts&lt;/em&gt; such as &lt;code&gt;OrderId&lt;/code&gt; or &lt;code&gt;ItemCount&lt;/code&gt;, these values can be manipulated in a which doesn't make sense in their business or domain context.&lt;/p&gt;
&lt;p&gt;Of course an option is to constantly perform validation on the &lt;em&gt;Order&lt;/em&gt; to ensure it is in a valid state - but another option is to use &lt;code&gt;Value Objects&lt;/code&gt;, which will be explored in the next section.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="value-object"&gt;Value object&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;Value object&lt;/code&gt; is a simple, light-weight wrapper around the primitive type, which can also provide some validation for the internal primitive type.&lt;/p&gt;
&lt;h3 id="value-record"&gt;Value record&lt;/h3&gt;
&lt;p&gt;In the referenced article, Stephen Cleary introduces a concept called &lt;code&gt;Value Record&lt;/code&gt; - leveraging the C# &lt;code&gt;record&lt;/code&gt; and &lt;code&gt;struct&lt;/code&gt; types, a simple &lt;em&gt;Value Object&lt;/em&gt; can easily be defined with one line of code.&lt;/p&gt;
&lt;p&gt;To replace the &lt;em&gt;int OrderId&lt;/em&gt; above:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public readonly record struct OrderId(int Value);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using this technique has a number of benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;immutability&lt;/li&gt;
&lt;li&gt;equality, hash code and &lt;em&gt;ToString&lt;/em&gt; support built in&lt;/li&gt;
&lt;li&gt;value-type wrapper, with no additional memory allocated&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id="usage"&gt;Usage&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;Order&lt;/em&gt; entity can now be updated to use the &lt;em&gt;OrderId&lt;/em&gt; &lt;code&gt;value record&lt;/code&gt; (as well as other properties as well):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Order
{
    public OrderId OrderId { get; set; }

    public OrderTotal OrderTotal { get; set; }

    public ItemCount ItemCount { get; set; }
}


public readonly record struct OrderId(int Value);

public readonly record struct OrderTotal(decimal Value);

public readonly record struct ItemCount(int Value);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the usage:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var order = new Order
{
    OrderId = new OrderId(100),
    ItemCount = new ItemCount(2),
    OrderTotal = new OrderTotal(148.95m)
};

// An added benefit of records (over a class) 
// is that they can be printed as well
// The ToString() method can also be overwritten
// if required
Console.WriteLine(order.OrderId);

// ERROR - compilation error 
// this is now not possible as the 
// OrderId is immutable

// order.OrderId.Value = order.OrderId.Value * 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of the above:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;OrderId { Value = 100 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;value records&lt;/code&gt; can be expanded with additional (light-weight) validation, but the &lt;em&gt;record struct&lt;/em&gt; method shown above allows for a quick, simple implementation.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;A very useful as well as quick easy technique to implement - but also an technique which can be misused (as it is so easy to implement). Not all properties should be or need to be converted to a value object. However where it does make sense, the &lt;code&gt;value record&lt;/code&gt; method is a slick, minimal way to achieve this.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://blog.stephencleary.com/2022/10/modern-csharp-techniques-2-value-records.html"&gt;Modern C# Techniques, Part 2: Value Records&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;194: 03-11-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/11/02-directory-separator</id>
		<title>Platform specific path separator</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/11/02-directory-separator" />
		<updated>2022-11-02T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The static &lt;code&gt;Path&lt;/code&gt; class contains a number of helpful, platform specific properties (and methods) to assist when working with filenames and file paths. These include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The operating system specific directory separator character&lt;/li&gt;
&lt;li&gt;The operating system specific alternate directory separator character&lt;/li&gt;
&lt;li&gt;The operating system specific path separator character&lt;/li&gt;
&lt;li&gt;The operating system specific volume separator character&lt;/li&gt;
&lt;li&gt;The operating system specific invalid filename characters&lt;/li&gt;
&lt;li&gt;The operating system specific invalid path characters&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id="code-snippet"&gt;Code snippet&lt;/h2&gt;
&lt;p&gt;A simple code snippet to demonstrate how to access the various characters:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// All the separator characters are available on the Path static class
Console.WriteLine($&amp;quot;DirectorySeparatorChar: '{Path.DirectorySeparatorChar}'&amp;quot;);
Console.WriteLine($&amp;quot;AltDirectorySeparatorChar: '{Path.AltDirectorySeparatorChar}'&amp;quot;);
Console.WriteLine($&amp;quot;PathSeparator: '{Path.PathSeparator}'&amp;quot;);
Console.WriteLine($&amp;quot;VolumeSeparatorChar: '{Path.VolumeSeparatorChar}'&amp;quot;);

// display all the invalid file name characters
Console.WriteLine($&amp;quot;Invalid filename chars:&amp;quot;);
foreach(var chr in Path.GetInvalidFileNameChars())
{
    Console.WriteLine($&amp;quot;   {chr}&amp;quot;);
}

// display all the invalid path characters
Console.WriteLine($&amp;quot;Invalid path chars:&amp;quot;);
foreach (var chr in Path.GetInvalidPathChars())
{
    Console.WriteLine($&amp;quot;   {chr}&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="windows-output"&gt;Windows output&lt;/h3&gt;
&lt;p&gt;The output when running the above on a Windows environment - the invalid filename and invalid path characters have been trimmed as the list for Windows is fairly long:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;DirectorySeparatorChar: '\'
AltDirectorySeparatorChar: '/'
PathSeparator: ';'
VolumeSeparatorChar: ':'
Invalid filename chars:
   &amp;quot;
   &amp;lt;
   &amp;gt;
   |

   ☺
   ☻
   ♥
   ♦
   ♣
   ♠
// trimmed
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="linux-output"&gt;Linux output&lt;/h3&gt;
&lt;p&gt;Running the same code in a Linux environment yields different output - no trimming of the list here, as apparently Linux supports a larger list of characters than Windows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;DirectorySeparatorChar: '/'
AltDirectorySeparatorChar: '/'
PathSeparator: ':'
VolumeSeparatorChar: '/'
Invalid filename chars:
   ?
   /
Invalid path chars:
   ?
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Leveraging the above functionality makes building up and validating file names and file paths much easier, simpler and quicker, and should definitely be preferred over rolling out ones own path builder or filename validator.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://code-maze.com/csharp-path-class/"&gt;Path Class in C#&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;193: 02-11-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/11/01-list-property-design</id>
		<title>Generic List property wrapping</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/11/01-list-property-design" />
		<updated>2022-11-01T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;When a class has a &lt;code&gt;generic list property&lt;/code&gt;, a good idea is to put it behind a class to encapsulate all the functionality specific to the list in a single place, creating cleaner, more maintainable code.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="non-clean-version"&gt;Non-clean version&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Non-clean&lt;/em&gt; is not entirely accurate, as there is nothing inherently wrong with this approach, its just not &lt;em&gt;as clean&lt;/em&gt; as the class-wrapped version detailed in the next section.&lt;/p&gt;
&lt;p&gt;In this example we have a &lt;code&gt;Album&lt;/code&gt; class, which contains a &lt;code&gt;list of Song titles&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Album
{
    public string Artist { get; set; }

    public List&amp;lt;string&amp;gt; Songs { get; set; }

    public int ReleaseYear { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose throughout the code we are required to get the &lt;code&gt;top 5 songs in the list&lt;/code&gt; (perhaps to display in a summary on various screens within the application).&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="linq-everywhere"&gt;LINQ everywhere&lt;/h3&gt;
&lt;p&gt;One option is to perform the LINQ query to get the top 5 songs whenever it is required:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// This LINQ will be used every time the top 5 is required
IEnumerable&amp;lt;string&amp;gt;? top5Songs = album.Songs.OrderBy(s =&amp;gt; s).Take(5);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will work, but leads to duplication of code, and is difficult to maintain.&lt;/p&gt;
&lt;h3 id="helper-method"&gt;Helper method&lt;/h3&gt;
&lt;p&gt;Another option it to add a method into a &lt;em&gt;helper&lt;/em&gt; class, or even into the &lt;em&gt;Album&lt;/em&gt; class&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Album
{
    public string Artist { get; set; }

    public List&amp;lt;string&amp;gt; Songs { get; set; }

    public int ReleaseYear { get; set; }

    public IEnumerable&amp;lt;string&amp;gt; GetTop5Songs()
    {
        return Songs.OrderBy(s =&amp;gt; s).Take(5);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, this will work and solves the code duplication issue. However the &lt;em&gt;helper&lt;/em&gt; class, or &lt;em&gt;Album&lt;/em&gt; class might end up containing numerous methods for numerous properties and ends up containing a wide range of functionality not directly related to it.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="clean-version"&gt;Clean version&lt;/h2&gt;
&lt;h3 id="class-wrapper"&gt;Class wrapper&lt;/h3&gt;
&lt;p&gt;Another cleaner option, is to wrap the generic list in its own class, which can then hold all the methods related to the list:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// inherit from List
public class Songs : List&amp;lt;string&amp;gt;
{
    public IEnumerable&amp;lt;string&amp;gt; GetTop5Songs()
    {
        return this.OrderBy(s =&amp;gt; s).Take(5);
    }

    // other methods related to Songs
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The wrapper class inherits from &lt;code&gt;List&lt;/code&gt; so automatically gets all the same functionality which was available when using &lt;code&gt;List&amp;lt;string&amp;gt;&lt;/code&gt; explicitly.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Album&lt;/em&gt; class will then use the &lt;code&gt;Songs&lt;/code&gt; class, instead of &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; to represent the songs of an album:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Album
{
    public string Artist { get; set; }

    public Songs Songs { get; set; }

    public int ReleaseYear { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The relevent methods are now available on the property themselves:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var top5Songs = album.Songs.GetTop5Songs();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cleaner, more maintainable and easier to find!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;This is a relatively small change in code structure, but can definitely make a difference in the readability and maintainability of the code, bring related methods together in one place. Easier for a developer to find when using them, as well as when required to make changes to them!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/shorts/FL0qKaumcxo"&gt;Raw Coding-put generics behind classes&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;192: 01-11-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/10/31-jagged-array</id>
		<title>Jagged array in C#</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/10/31-jagged-array" />
		<updated>2022-10-31T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;jagged array&lt;/code&gt; is an &lt;em&gt;array of arrays&lt;/em&gt;, where each internal array can be of varying length.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="array"&gt;Array&lt;/h3&gt;
&lt;p&gt;A quick recap on a traditional one dimensional array:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var array = new int[10];
int[] array1 = new int[10];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The array size is defined when the variable is instantiated - this array is defined to hold up to 10 int's.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="multi-dimensional-array"&gt;Multi-dimensional array&lt;/h3&gt;
&lt;p&gt;A multiple dimensional is declared and instantiated the same way as a one-dimensional array:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// declare a two dimensional array
int[,] multiArray = new int[10,10];

// a three dimensional array
int[,,] multiArray1 = new int[10, 10, 10];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With multiple directional arrays, the size of the dimension is &lt;em&gt;fixed&lt;/em&gt;. In the above two-dimensional array for example, a 10x10 array is defined - it can be thought of a &lt;em&gt;grid with 10 columns and 10 rows&lt;/em&gt;. The important aspect is that each row &lt;code&gt;will always&lt;/code&gt; have 10 columns at most.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="jagged-array"&gt;Jagged array&lt;/h3&gt;
&lt;p&gt;A &lt;code&gt;jagged array&lt;/code&gt; is an &lt;em&gt;array of arrays&lt;/em&gt;, where the internal array is of varying length.&lt;/p&gt;
&lt;p&gt;There is a subtle difference when declaring a &lt;code&gt;jagged array&lt;/code&gt; vs declaring a multiple dimensional array:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Jagged array
int[][] jaggedArray1 = new int[10][];

// For comparison - multi directional array
int[,] multiArray = new int[10,10]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The jagged array &lt;em&gt;jaggedArray1&lt;/em&gt;, has &lt;em&gt;10 rows, but each row has varying column length&lt;/em&gt; - a second size is not specified when declaring the array. As it stands now, each row is null by default - the array in each row needs to be initialized:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;jaggedArray1[0] = new int[5];
jaggedArray1[1] = new int[3];
jaggedArray1[2] = new int[1];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first 3 rows are being initialized to each have a different number of items. We have an &lt;em&gt;array of arrays&lt;/em&gt;, with each internal array being of different sizes.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;This is not functionality I've personally ever had to use - but I am sure it definitely does have its practical uses cases. Just being aware the functionality exists can help make better, more informed design choices going forward.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/"&gt;Arrays (C# Programming Guide)&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;191: 31-10-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/10/28-sql-coalesce</id>
		<title>SQL COALESCE uses</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/10/28-sql-coalesce" />
		<updated>2022-10-28T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The SQL COALESCE method will &lt;code&gt;return the first non-null expressing among its arguments&lt;/code&gt;. On the surface this is a relatively simple, but useful feature, however it can be leveraged to also perform more complex operations.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="first-non-null"&gt;First non-NULL&lt;/h2&gt;
&lt;p&gt;The first use of &lt;code&gt;COALESCE&lt;/code&gt; is straight-forward, and aligns with official definition - it &lt;em&gt;can be used to find the first non-null in a list of values&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;-- declare variables
DECLARE &amp;#64;one int, &amp;#64;two int, &amp;#64;three int, &amp;#64;firstNonNull int
-- set all to NULL except one
SELECT &amp;#64;one = null, &amp;#64;two = null, &amp;#64;three = 3

-- nulls are ignored
SELECT &amp;#64;firstNonNull = COALESCE(&amp;#64;one, &amp;#64;two, &amp;#64;three)
PRINT &amp;#64;firstNonNull
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of the above is &lt;code&gt;3&lt;/code&gt;, the first &lt;em&gt;non-null&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="data-pivot"&gt;Data pivot&lt;/h2&gt;
&lt;p&gt;Another useful, but maybe not obvious (based on the definition) use of &lt;code&gt;COALESCE&lt;/code&gt; is to pivot data - that is &lt;em&gt;convert rows of data into a single row and column&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;In this example we have a table of &lt;em&gt;Songs&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * FROM Song
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Id&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Artist&lt;/th&gt;
&lt;th&gt;YearReleased&lt;/th&gt;
&lt;th&gt;LengthInSeconds&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Everlong&lt;/td&gt;
&lt;td&gt;Foo Fighters&lt;/td&gt;
&lt;td&gt;1997&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;Learn to Fly&lt;/td&gt;
&lt;td&gt;Foo Fighters&lt;/td&gt;
&lt;td&gt;1999&lt;/td&gt;
&lt;td&gt;238&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Monkey Wrench&lt;/td&gt;
&lt;td&gt;Foo Fighters&lt;/td&gt;
&lt;td&gt;1997&lt;/td&gt;
&lt;td&gt;231&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;My Hero&lt;/td&gt;
&lt;td&gt;Foo Fighters&lt;/td&gt;
&lt;td&gt;1998&lt;/td&gt;
&lt;td&gt;260&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Executing the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;DECLARE &amp;#64;AllSongs VARCHAR(1000)
SELECT &amp;#64;AllSongs = COALESCE(&amp;#64;AllSongs, '') + [Name] + ';'
FROM Song

PRINT &amp;#64;AllSongs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Will result in &lt;code&gt;Everlong;Learn to Fly;Monkey Wrench;My Hero;&lt;/code&gt; being printed.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;COALESCE&lt;/code&gt; method will take each &lt;em&gt;Name&lt;/em&gt; field, and provided it is not null, append it to the &lt;em&gt;&amp;#64;AllSongs&lt;/em&gt; variable.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="execute-multiple-statements"&gt;Execute multiple statements&lt;/h2&gt;
&lt;p&gt;Another useful use of &lt;code&gt;COALESCE&lt;/code&gt; is to build up a SQL string to execute multiple statements at once. This extends on the previous example - instead of a table column value being appended to a variable, a built up string is appended.&lt;/p&gt;
&lt;p&gt;If we need to &lt;em&gt;select the data from ALL of the tables in the database&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;DECLARE &amp;#64;AllTablesSQL VARCHAR(1000)

-- query sys.tables to get a list of tables in the database
-- build up a SELECT statement based on the table name
SELECT  &amp;#64;AllTablesSQL = COALESCE(&amp;#64;AllTablesSQL, '') + 'SELECT * FROM [' + name + ']' + '; '
from sys.tables

PRINT &amp;#64;AllTablesSQL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output here is something along these lines (will obviously differ based on the tables in the database):
&lt;code&gt;SELECT * FROM [Auditing]; SELECT * FROM [Song]; SELECT * FROM [AlbumSales]; SELECT * FROM [Order]; &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This can now be manually executed to get all the data from the tables.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;I must admit I have encountered the &lt;code&gt;COALESCE&lt;/code&gt; method before, but never fully understood what it did or how it worked - but just understanding the basics of its usage will allow for very useful queries to be executed.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.mssqltips.com/sqlservertip/1521/the-many-uses-of-coalesce-in-sql-server/"&gt;The Many Uses of Coalesce in SQL Server&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;190: 28-10-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/10/27-linq-tolookup</id>
		<title>LINQ's ToLookup method</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/10/27-linq-tolookup" />
		<updated>2022-10-27T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;LINQ has a &lt;code&gt;ToLookup&lt;/code&gt; method which which is used to create a &lt;em&gt;lookup&lt;/em&gt; - &lt;code&gt;a key which points to a list of (1 or more) objects&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="example"&gt;Example&lt;/h2&gt;
&lt;p&gt;Suppose we have a collections of &lt;em&gt;Songs&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Song record
record Song(string Artist, string Name, int LengthInSeconds);

// an array of songs
Song[]? songs = new[]
{
    new Song(&amp;quot;Foo Fighters&amp;quot;, &amp;quot;EverLong&amp;quot;, 250),
    new Song(&amp;quot;Foo Fighters&amp;quot;, &amp;quot;My Hero&amp;quot;, 283),
    new Song(&amp;quot;Foo Fighters&amp;quot;, &amp;quot;All My Life&amp;quot;, 250),
    new Song(&amp;quot;John Mayer&amp;quot;, &amp;quot;Clarity&amp;quot;, 238),
    new Song(&amp;quot;John Mayer&amp;quot;, &amp;quot;Daughters&amp;quot;, 238),
};

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="simple-lookup"&gt;Simple lookup&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ToLookup&lt;/code&gt; can be used to &lt;code&gt;group songs together by artist&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// perform the lookup, using Artist as the key
ILookup&amp;lt;string, Song&amp;gt;? lookupByArtist = 
    songs.ToLookup(s =&amp;gt; s.Artist, item =&amp;gt; item);

// iterate through each key (artist) grouping
foreach(IGrouping&amp;lt;string, Song&amp;gt; artist in lookupByArtist)
{
    Console.WriteLine($&amp;quot;Artist: {artist.Key}&amp;quot;);
    // iterate through each item in the grouping
    foreach(Song song in artist.ToList())
    {
        Console.WriteLine($&amp;quot;- Song name: {song.Name}&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of the above is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Artist: Foo Fighters
- Song name: EverLong
- Song name: My Hero
- Song name: All My Life
Artist: John Mayer
- Song name: Clarity
- Song name: Daughters
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="complex-lookup"&gt;Complex lookup&lt;/h3&gt;
&lt;p&gt;In the above example, the &lt;em&gt;lookup was done on a single field, Artist&lt;/em&gt;, however this doesn't have to be the case. The &lt;code&gt;grouping can be done on multiple fields&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// group the data by artist AND song length
var lookupByArtistTime = 
    songs.ToLookup(s =&amp;gt; new { s.Artist, s.LengthInSeconds}, item =&amp;gt; item);

foreach (var artistTime in lookupByArtistTime)
{
    Console.WriteLine($&amp;quot;Artist/Time: {artistTime.Key}&amp;quot;);
    foreach (Song song in artistTime.ToList())
    {
        Console.WriteLine($&amp;quot;- Song name: {song.Name}&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above, the key was the &lt;code&gt;Artist + LengthInSeconds anonymous object&lt;/code&gt;. The output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Artist/Time: { Artist = Foo Fighters, LengthInSeconds = 250 }
- Song name: EverLong
- Song name: All My Life
Artist/Time: { Artist = Foo Fighters, LengthInSeconds = 283 }
- Song name: My Hero
Artist/Time: { Artist = John Mayer, LengthInSeconds = 238 }
- Song name: Clarity
- Song name: Daughters
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="tolookup-vs-groupby"&gt;ToLookup vs GroupBy&lt;/h2&gt;
&lt;p&gt;A note on &lt;code&gt;ToLookup&lt;/code&gt;, which on the surface appears to be the same as &lt;code&gt;GroupBy&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ToLookup&lt;/code&gt; performs execution immediately and returns an &lt;em&gt;ILookup&lt;/em&gt; implementation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GroupBy&lt;/code&gt; defers execution until a &lt;em&gt;ToList&lt;/em&gt; (or similar) is called on the returned &lt;em&gt;IEnumerable&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So while the final result of the operations are the same, the timing of the execution is different.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;This is not new functionality and has been part of LINQ from the beginning - having said that, I personally wasn't aware that the method existed, and under the right use cases, can be used in place of &lt;em&gt;GroupBy&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://anthonygiretti.com/2022/09/29/net-learn-linq-as-you-never-have-before/"&gt;.NET: Learn LINQ as you never have before - page 27&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;189: 27-10-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/10/26-xml-swagger</id>
		<title>OpenAPI documentation from XML documentation comments</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/10/26-xml-swagger" />
		<updated>2022-10-26T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;Code comments can be used to &lt;code&gt;populate the swagger document&lt;/code&gt; with helpful comments when working with minimal API's.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;XML Documentation comments&lt;/code&gt; (those comments starting with &lt;code&gt;///&lt;/code&gt;) are output to an XML documentation file on application build - this file is then be user to populate the swagger document at runtime.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="code"&gt;Code&lt;/h2&gt;
&lt;p&gt;For the below sample, the default &lt;em&gt;weatherforecast&lt;/em&gt; endpoint will be used, but modified slightly.&lt;/p&gt;
&lt;h3 id="endpoint-definition"&gt;Endpoint definition&lt;/h3&gt;
&lt;p&gt;The first step is break out the various components to make them easier to comment.&lt;/p&gt;
&lt;p&gt;Move the &lt;em&gt;WeatherForecast&lt;/em&gt; response object into its own file, &lt;em&gt;WeatherForecast.cs&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)
{
    public int TemperatureF =&amp;gt; 32 + (int)(TemperatureC / 0.5556);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The lambda delegate which is called when the &lt;em&gt;GET "weatherforecast"&lt;/em&gt; endpoint is called, is also moved into its own static method in the &lt;em&gt;WeatherCalculator&lt;/em&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class WeatherCalculator
{
    static string[] summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", 
        "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };

    public static WeatherForecast[] GetWeather([FromRoute]string city)
    {
        _ = city;

        var forecast = Enumerable.Range(1, 5).Select(index =&amp;gt;
        new WeatherForecast
        (
            DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
            Random.Shared.Next(-20, 55),
            summaries[Random.Shared.Next(summaries.Length)]
        ))
        .ToArray();

        return forecast;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A &lt;em&gt;city&lt;/em&gt; field was also added to the &lt;em&gt;GetWeather&lt;/em&gt; as a parameter - this is not used and is just added to demonstrate how it is reflected on the swagger document.&lt;/p&gt;
&lt;p&gt;The endpoint is then updated to invoke the static &lt;code&gt;GetWeather&lt;/code&gt; method instead of invoking the delegate:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// the swagger and api dependency injection
// and middleware components will automatically
// be added if the correct template settings 
// were chosen
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// change from delegate to call the static method
// created above
app.MapGet("/weatherforecast/{city}", WeatherCalculator.GetWeather);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If running the application and browsing to the swagger endpoint, it should work as before (before the code modifications), but still not documentation added:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/no-doc.png" alt="Swagger without documentation"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="xml-documentation"&gt;XML Documentation&lt;/h3&gt;
&lt;p&gt;The next step is to add XML documentation comments to the code. In Visual Studio, &lt;em&gt;auto-complete&lt;/em&gt; will create the XML document structure by &lt;code&gt;typing /// above a class or method&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Updated &lt;em&gt;WeatherForecast&lt;/em&gt; response object:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;/// &amp;lt;summary&amp;gt;
/// Represents the weather for a specific date
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name="Date"&amp;gt;The date for the weather forecast&amp;lt;/param&amp;gt;
/// &amp;lt;param name="TemperatureC"&amp;gt;The temperature in degrees celsius&amp;lt;/param&amp;gt;
/// &amp;lt;param name="Summary"&amp;gt;A summary description of the weather&amp;lt;/param&amp;gt;
public record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)
{
    public int TemperatureF =&amp;gt; 32 + (int)(TemperatureC / 0.5556);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The updated &lt;em&gt;WeatherCalculator&lt;/em&gt; class and static &lt;em&gt;GetWeather&lt;/em&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;/// &amp;lt;summary&amp;gt;
/// Contains logic to get the weather forecast details
/// &amp;lt;/summary&amp;gt;
public class WeatherCalculator
{
    static string[] summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", 
        "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };

    /// &amp;lt;summary&amp;gt;
    /// Retrieve the weather forecast for the next 5 days for the city specified
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name="city"&amp;gt;The city for the weather forecasts should be retrieved&amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;The forecast details for the next 5 days&amp;lt;/returns&amp;gt;
    public static WeatherForecast[] GetWeather(string city)
    {
        _ = city;

        var forecast = Enumerable.Range(1, 5).Select(index =&amp;gt;
        new WeatherForecast
        (
            DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
            Random.Shared.Next(-20, 55),
            summaries[Random.Shared.Next(summaries.Length)]
        ))
        .ToArray();

        return forecast;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doing the above is good practice whether using this technique to populate the swagger document or not, as it provides context and information for future developers of the code.&lt;/p&gt;
&lt;p&gt;At this point this information is not available publicly. Next step we'll make the XML documentation details available outside the code.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="file-generation"&gt;File generation&lt;/h3&gt;
&lt;p&gt;This step is very straight forward - the &lt;code&gt;Documentation file&lt;/code&gt; option needs to be set on the project. This can be done in one of two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add the &lt;code&gt;GenerateDocumentationFile&lt;/code&gt; node directly to the csproj file:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFramework&amp;gt;net6.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;
    &amp;lt;ImplicitUsings&amp;gt;enable&amp;lt;/ImplicitUsings&amp;gt;
    &amp;lt;GenerateDocumentationFile&amp;gt;true&amp;lt;/GenerateDocumentationFile&amp;gt;
&amp;lt;/PropertyGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Set the flag in the &lt;code&gt;project properties&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/xml-doc.png" alt="Project properties Documentation file flag"&gt;&lt;/p&gt;
&lt;p&gt;Compiling the code will now also &lt;em&gt;generate a XML document file along with the binary&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now that we have XML file, next we can instruct the application to populate the swagger document with the details in the XML document file.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="swagger-setup"&gt;Swagger Setup&lt;/h3&gt;
&lt;p&gt;During application startup, the &lt;code&gt;builder.Services.AddSwaggerGen()&lt;/code&gt; line should be &lt;em&gt;replaced&lt;/em&gt; with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;builder.Services.AddSwaggerGen(c =&amp;gt;
{
    c.SwaggerDoc("v1", new() { Title = "My API", Version = "v1" });
    // build up the file path to the XML document
    var filePath = Path.Combine(AppContext.BaseDirectory, "XmlDocs.xml");
    // instruct the swagger generation process to include details
    // from the file
    c.IncludeXmlComments(filePath);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, when browsing to the swagger endpoint the XML comments are included:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/swagger-doc.png" alt="Swagger with comments"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;I personally find this method to be clean and very easy to implement and will definitely be using this on all my own API's going forward. This method ensures the code is well documented (for developers), and is also well documented for consumers with minimal additional effort.
Keep in mind though that the code comments will be publicly exposed to the consumer, so would need to make sense in that context.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/using-xml-documentation-with-aspnetcore-minimal-api-apps-and-openapi"&gt;Using XML Documentation With ASP.NET Core Minimal API Apps and OpenAPI&lt;/a&gt;&lt;/p&gt;
&lt;!--?# DailyDrop ?--&gt;189: 26-10-2022&lt;!--?#/ DailyDrop ?--&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/10/25-file-modifier</id>
		<title>File access modifier</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/10/25-file-modifier" />
		<updated>2022-10-25T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;A new access modifier is being introduced with C#11, the &lt;code&gt;file&lt;/code&gt; modifier - this will limit the accessibility of the type to the &lt;em&gt;file in which it is declared&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="modifier-recap"&gt;Modifier recap&lt;/h2&gt;
&lt;p&gt;A quick recap of the existing access modifiers, along with the new &lt;code&gt;file&lt;/code&gt; modifier (as they relate to &lt;em&gt;classes&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Existing modifiers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt; - the class is only accessible inside the class in which it was defined&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt; - the class is accessible from everywhere in the project&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt; - the class is accessible from within the class and all types which derive from the class&lt;/li&gt;
&lt;li&gt;&lt;code&gt;internal&lt;/code&gt; - the class is accessible from within its own assembly, but not other assemblies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The new modifier:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file&lt;/code&gt; - the class is accessible only from within the &lt;em&gt;file&lt;/em&gt; in which it was defined&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id="example"&gt;Example&lt;/h2&gt;
&lt;p&gt;When a class is defined, the &lt;code&gt;file&lt;/code&gt; modifier is applied (as opposed to public, private, etc.)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;file class Class1
{
    public string Name { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This class now cannot be used anywhere outside the file in which is was defined. Trying to use in a different class defined in a different file, will result in a compilation error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Class3
{
    public Class3()
    {
        // NOT allowed
        Class1 ca = new Class1();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;The type or namespace name 'Class1' could not be found
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, as mentioned, it can be used in the same file:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// all in the same physical file
file class Class1
{
    public string Name { get; set; }
}

file class Class2
{
    public Class2()
    {
        // Totally okay
        Class1 c1 = new Class1();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;file&lt;/code&gt; access modifier can be applied to &lt;code&gt;classes, records, structs and enums&lt;/code&gt;, but cannot be used for &lt;em&gt;methods&lt;/em&gt; or &lt;em&gt;properties&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="why"&gt;Why?&lt;/h2&gt;
&lt;p&gt;This functionality was primarily introduced to assist &lt;code&gt;source generator&lt;/code&gt; authors. When a &lt;em&gt;source generator&lt;/em&gt; generates a class, its tricky to ensure it's not going to conflict with a file already in the consumer's code base. The &lt;code&gt;file&lt;/code&gt; modifier helps solves this by ensuring (where specified) the the &lt;em&gt;source generated&lt;/em&gt; file is only visible where defined, and not in conflict with any developer specified class name.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="lowered-code"&gt;Lowered code&lt;/h2&gt;
&lt;p&gt;One can use &lt;a href="https://sharplab.io/"&gt;sharplab.io&lt;/a&gt; to see how the &lt;code&gt;file&lt;/code&gt; keyword is lowered:&lt;/p&gt;
&lt;p&gt;Original code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;file class FileScopedClass { }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lowered code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;internal class &amp;lt;_&amp;gt;FD2E2ADF7177B7A8AFDDBC12D1634CF23EA1A71020F6A1308070A16400FB68FDE__FileScopedClass { }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From this we can see that the &lt;code&gt;file&lt;/code&gt; keyword is translated into an &lt;code&gt;internal class with a uniquely generated name&lt;/code&gt;, as to not conflict with any existing name&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;While the intended target audience for this feature is very narrow (source generator authors), it can be leveraged by anyone if the use case calls for it. Even then, it may not get wide usage in general applications - however it is useful to know it exists and is an option if required.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=xm8eQenL7wA"&gt;What is the NEW &amp;quot;file&amp;quot; keyword of C# 11?&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;189: 25-10-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/10/24-data-protection</id>
		<title>Protecting sensitive data with data protection api</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/10/24-data-protection" />
		<updated>2022-10-24T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;.NET has built in methods to &lt;code&gt;protect and unprotected&lt;/code&gt; sensitive data.&lt;/p&gt;
&lt;p&gt;These methods are typically used to protect sensitive data, but could be used to protect any data. It could also be used to expose information for a &lt;em&gt;given period of time&lt;/em&gt; only, after which trying unprotecting the data will not work.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;/h2&gt;
&lt;p&gt;There are effectively three steps to using the data protection apis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create the &lt;code&gt;protector&lt;/code&gt; from a data protection provider&lt;/li&gt;
&lt;li&gt;Invoke the &lt;code&gt;Protect&lt;/code&gt; method to protect the data specified&lt;/li&gt;
&lt;li&gt;Invoke the &lt;code&gt;Unprotect&lt;/code&gt; method to convert the specified protected value to plain text&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the startup of the application, the protector is configured as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// register base data protection
// with DI container
builder.Services
    .AddDataProtection()
    .SetDefaultKeyLifetime(TimeSpan.FromDays(7));

// register the protector with DI
builder.Services
    .AddTransient&amp;lt;ITimeLimitedDataProtector&amp;gt;(sp =&amp;gt;
    {
        // specify where the provider key information will be stored
        IDataProtectionProvider? provider = DataProtectionProvider
            .Create(new DirectoryInfo(&amp;#64;&amp;quot;secrets&amp;quot;));

        // specify the purpose string for the creator
        IDataProtector? protector = provider
            .CreateProtector(&amp;quot;customerdata&amp;quot;);

        return protector.ToTimeLimitedDataProtector();
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some notes on the above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The key information is stored in a &lt;code&gt;secrets&lt;/code&gt; folder on the host machine. As such, the key information is only available to that one machine. If multiple machines need to access the key information, there are other storage providers available (Azure KeyVault, DbContext)&lt;/li&gt;
&lt;li&gt;The protector is created with a specific &lt;em&gt;purpose&lt;/em&gt;, &lt;code&gt;customerdata&lt;/code&gt; above. A value protected using a specific purpose, cannot be unprotected using a different purpose value.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id="protect"&gt;Protect&lt;/h2&gt;
&lt;p&gt;To &lt;em&gt;protect&lt;/em&gt; a string, the &lt;code&gt;Protect&lt;/code&gt; method is called. Below, an endpoint has been defined which has the &lt;em&gt;ITimeLimitedDataProtector&lt;/em&gt; protector implementation (configured in the previous step) injected:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// get the value to protect from the route
app.MapGet(&amp;quot;/protect/{protectValue}&amp;quot;, (
    [FromRoute]string protectValue, 
    ITimeLimitedDataProtector protector) =&amp;gt;
{
    // return the protected value
    return protector.Protect(protectValue);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Invoking the endpoint &lt;code&gt;/protect/abc123&lt;/code&gt; results in the following protected value being returned:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;CfDJ8BdtcMmju6ZKiKJtRHvTt2BidaZbPEirTP_KEi4-_2xVBYbs58hqVxWGQmTQBjQaO_tXTiFRAxGUPGSqXkvlfIzhd80r3AavXi0m3PiCXYfuaRhmnrzCXk6apOIqXOCvHA
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="unprotect"&gt;Unprotect&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Unprotecting&lt;/em&gt; is as simple as protecting a value - the &lt;code&gt;Unprotect&lt;/code&gt; method is called, with the previously protected value supplied:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;app.MapGet(&amp;quot;/unprotect/{unprotectValue}&amp;quot;, (
    [FromRoute] string unprotectValue, 
    ITimeLimitedDataProtector protector) =&amp;gt;
{
    return protector.Unprotect(unprotectValue);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Invoking the endpoint &lt;code&gt;/unprotect/CfDJ8BdtcMmju6ZKiKJtRHvTt2BidaZbPEirTP_KEi4-_2xVBYbs58hqVxWGQmTQBjQaO_tXTiFRAxGUPGSqXkvlfIzhd80r3AavXi0m3PiCXYfuaRhmnrzCXk6apOIqXOCvHA&lt;/code&gt; results in the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;abc123
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;When needing to protect sensitive data (for example, &lt;em&gt;authentication cookie&lt;/em&gt; or &lt;em&gt;bearer token&lt;/em&gt;) this set of classes and functionality provides an easy, simple and effective way to protect the data.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/ppenza/status/1573676247812653058"&gt;Piotr Penza&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://learn.microsoft.com/en-us/aspnet/core/security/data-protection/introduction?view=aspnetcore-6.0"&gt;ASP.NET Core Data Protection Overview&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://learn.microsoft.com/en-us/aspnet/core/security/data-protection/configuration/overview?view=aspnetcore-6.0"&gt;Configure ASP.NET Core Data Protection&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;188: 24-10-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
	<entry>
		<id>https://alwaysdeveloping.net/dailydrop/2022/10/21-math-update</id>
		<title>Using math functions on numeric types</title>
		<link href="https://alwaysdeveloping.net/dailydrop/2022/10/21-math-update" />
		<updated>2022-10-21T01:00:00Z</updated>
		<content>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;.NET 7 introduces the ability to &lt;code&gt;call math methods on numeric types&lt;/code&gt; and not have to use the static &lt;em&gt;Math&lt;/em&gt; class.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="pre.net-7"&gt;Pre .NET 7&lt;/h2&gt;
&lt;p&gt;Prior to .NET 7, the static &lt;code&gt;Math&lt;/code&gt; class was used:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;double value = 100.33;

// get the absolute value
double mathAbs = Math.Abs(value);

// get the cube root
double mathCbrt = Math.Cbrt(125);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="net-7"&gt;.NET 7&lt;/h2&gt;
&lt;p&gt;In .NET 7, these methods are now available on the numeric type:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;double value = 100.33;

double doubleAbs = double.Abs(value);
double doubleCbrt = double.Cbrt(125);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Under the hood, these methods are still using the &lt;code&gt;Math&lt;/code&gt; static class:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// source code for the double Abs method
public static double Abs(double value) =&amp;gt; Math.Abs(value);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;The two techniques effectively use the same code, and perform the same operation - so which one to use comes down to preference and readability. Personally, I find using the numeric types is more informative, because at a glance one can see the return type of the calculation (the &lt;em&gt;Abs&lt;/em&gt; method on &lt;em&gt;double&lt;/em&gt;, will return a &lt;em&gt;double&lt;/em&gt;) - but this will not be the preference for everyone.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/fonssonnemans/status/1573274358910525442"&gt;Fons Sonnemans Tweet&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;187: 21-10-2022&lt;?#/ DailyDrop ?&gt;
</content>
		<summary>always learning | always growing</summary>
	</entry>
</feed>