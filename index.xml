<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Always Developing</title><link>https://always-developing.github.io/</link><description>Recent content on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Tue, 04 Jan 2022 03:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Azure Devops Symbol Server - a how to guide</title><link>https://always-developing.github.io/p/12-2021-devops-symbol-server/</link><pubDate>Tue, 04 Jan 2022 03:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/12-2021-devops-symbol-server/</guid><description>&lt;h2 id="symbol-server-explained">Symbol server explained&lt;/h2>
&lt;h3 id="what-are-symbols">What are symbols?&lt;/h3>
&lt;p>When building a .NET project, symbol files (generally files with the extension of .pdb) are automatically created by the compiler. These symbol files contain metadata information about the source code (indexes, function names, line numbers, etc) and are used when debugging and stepping through code, by linking the debugger (e.g. Visual Studio) to the source code.&lt;/p>
&lt;p>Generally, these symbol files are only available when developing locally, and building a project in debug configuration - that is, unless they are uploaded to a &lt;code>symbol server&lt;/code>.&lt;/p>
&lt;h3 id="what-is-a-symbol-server">What is a symbol server?&lt;/h3>
&lt;p>&lt;strong>A symbol server is a central location to store symbols&lt;/strong> - having the symbols available allow for the &lt;code>stepping into a referenced NuGet package code&lt;/code> without having the source code available locally.&lt;br>
The source code doesn&amp;rsquo;t need to be part of the solution being built, or even on the local machine - the symbol file, made available by the symbol server will allow for full &lt;em>&amp;lsquo;step into&amp;rsquo;&lt;/em> debugging experience.&lt;/p>
&lt;hr>
&lt;h2 id="why-use-a-symbol-server">Why use a symbol server&lt;/h2>
&lt;p>As mentioned above, having the symbols available via the server, allows for stepping into a referenced package&amp;rsquo;s source code without having the source directly available locally. Why would one need or want this to be possible?&lt;/p>
&lt;ul>
&lt;li>&lt;code>Help the package author debug and assist when issues are experienced using the package&lt;/code>. This is especially useful in the corporate environment where the author of a package is potentially closer to the developers and applications using the package, and is required to assist with the usage and functioning of the package.&lt;/li>
&lt;li>&lt;code>Help users of the package understand in more depth what the package does and how&lt;/code>. Especially useful in an Open Source environment where the author of the package is most likely further removed from the user of the package. With the user of the package having the option of stepping into the package source code, it facilitates more easily understanding the package and allows for the user more easily &lt;em>help themselves&lt;/em> if any issues arise.&lt;/li>
&lt;/ul>
&lt;p>Even though each point above highlights the use case in a specific environment (corporate vs Open Source), both points can apply to either environment.&lt;/p>
&lt;blockquote>
&lt;div>
&lt;div style="width: 5%; float: left; vertical-align: middle; padding-right: 60px;">
&lt;i class="inline-svg" >&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-info-circle" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#00abfb" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;circle cx="12" cy="12" r="9" />
&lt;line x1="12" y1="8" x2="12.01" y2="8" />
&lt;polyline points="11 12 12 12 12 16 13 16" />
&lt;/svg>&lt;/i>
&lt;/div>
&lt;div>
&lt;p>This post will focus on using &lt;strong>Azure Devops&lt;/strong> as a build and symbol server, but other build and symbol servers can also be used and will &lt;em>mostly&lt;/em> follow a similar processes to the one described in this post.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="producing-symbols">Producing symbols&lt;/h2>
&lt;h3 id="configuring-code">Configuring code&lt;/h3>
&lt;p>The first step in the process, is to configure the project to produce symbols with the required metadata to allow for the debugging experience.&lt;br>
To do this, the required &lt;code>Source Link&lt;/code> NuGet package must be added to the project. There are &lt;a class="link" href="https://www.nuget.org/packages?q=Microsoft.SourceLink." target="_blank" rel="noopener"
>a number of different options available&lt;/a>, based on where the &lt;code>repository is hosted&lt;/code>.&lt;/p>
&lt;p>For a repository hosted in a Git repository in Azure Devops, a reference to &lt;code>Microsoft.SourceLink.AzureRepos.Git&lt;/code> is added.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;PackageReference&lt;/span> &lt;span class="na">Include=&lt;/span>&lt;span class="s">&amp;#34;Microsoft.SourceLink.AzureRepos.Git&amp;#34;&lt;/span> &lt;span class="na">Version=&lt;/span>&lt;span class="s">&amp;#34;1.1.1&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;PrivateAssets&amp;gt;&lt;/span>all&lt;span class="nt">&amp;lt;/PrivateAssets&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;IncludeAssets&amp;gt;&lt;/span>runtime; build; native; contentfiles; analyzers; buildtransitive&lt;span class="nt">&amp;lt;/IncludeAssets&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/PackageReference&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;blockquote>
&lt;div>
&lt;div style="width: 5%; float: left; vertical-align: middle; padding-right: 60px;">
&lt;i class="inline-svg" >&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-info-circle" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#00abfb" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;circle cx="12" cy="12" r="9" />
&lt;line x1="12" y1="8" x2="12.01" y2="8" />
&lt;polyline points="11 12 12 12 12 16 13 16" />
&lt;/svg>&lt;/i>
&lt;/div>
&lt;div>
&lt;p>The Source Link reference added is &lt;strong>required only as a development dependency&lt;/strong> and is only used during the build process. This is the reason the &lt;code>PrivateAssets&lt;/code> property is set to &lt;code>All&lt;/code> - this prevents the package consuming applications from also needing to install Source Link as a dependency.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/blockquote>
&lt;hr>
&lt;h3 id="configuring-cicd-pipeline">Configuring CI/CD pipeline&lt;/h3>
&lt;p>The next step is to have the CI/CD process produce the symbols, and then upload them to the symbol server.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>Producing the symbols&lt;/code>&lt;br>
Usually when developing locally, .pdb files are only generated when running in &lt;em>debug configuration&lt;/em>, when the code is un-optimized. However, When releasing a package, it should be built in &lt;em>release configuration&lt;/em> with optimized code.&lt;br>
With the relevant Source Link package reference added (Microsoft.SourceLink.AzureRepos.Git), the code can be built in &lt;em>release configuration&lt;/em> and have the symbols produced. The build can either be done using:&lt;/p>
&lt;ul>
&lt;li>&lt;code>dotnet build&lt;/code>:&lt;br>
Execute the &lt;strong>dotnet build&lt;/strong> command with a build configuration of Release
&lt;figure
class="gallery-image"
style="
flex-grow: 622;
flex-basis: 1493px"
>
&lt;a href="https://always-developing.github.io/p/12-2021-devops-symbol-server/1.dotnettask.png" data-size="554x89">
&lt;img src="https://always-developing.github.io/p/12-2021-devops-symbol-server/1.dotnettask.png"
width="554"
height="89"
srcset="https://always-developing.github.io/p/12-2021-devops-symbol-server/1.dotnettask_hucc6dd8f38d52629259dc1ab8d5698186_4406_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/12-2021-devops-symbol-server/1.dotnettask_hucc6dd8f38d52629259dc1ab8d5698186_4406_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Azure Devops dotnet task">
&lt;/a>
&lt;figcaption>Azure Devops dotnet task&lt;/figcaption>
&lt;/figure>&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 121;
flex-basis: 292px"
>
&lt;a href="https://always-developing.github.io/p/12-2021-devops-symbol-server/2.dotnetdetail.png" data-size="675x554">
&lt;img src="https://always-developing.github.io/p/12-2021-devops-symbol-server/2.dotnetdetail.png"
width="675"
height="554"
srcset="https://always-developing.github.io/p/12-2021-devops-symbol-server/2.dotnetdetail_hu585440b7c55adc9cfac1a15aaf208514_8325_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/12-2021-devops-symbol-server/2.dotnetdetail_hu585440b7c55adc9cfac1a15aaf208514_8325_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Azure Devops dotnet task detail">
&lt;/a>
&lt;figcaption>Azure Devops dotnet task detail&lt;/figcaption>
&lt;/figure>&lt;/li>
&lt;li>&lt;code>Visual Studio build&lt;/code>:&lt;br>
Execute the &lt;strong>Visual Studio build&lt;/strong> task with build configuration of Release, and with the &lt;em>MSBuild Argument&lt;/em> of &lt;code>/p:SourceLinkCreate=true&lt;/code>
&lt;figure
class="gallery-image"
style="
flex-grow: 538;
flex-basis: 1292px"
>
&lt;a href="https://always-developing.github.io/p/12-2021-devops-symbol-server/3.vsbuildtask.png" data-size="501x93">
&lt;img src="https://always-developing.github.io/p/12-2021-devops-symbol-server/3.vsbuildtask.png"
width="501"
height="93"
srcset="https://always-developing.github.io/p/12-2021-devops-symbol-server/3.vsbuildtask_hu058477031c9dc5d2fea60cfeb7d29354_5813_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/12-2021-devops-symbol-server/3.vsbuildtask_hu058477031c9dc5d2fea60cfeb7d29354_5813_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Azure Devops VS build task">
&lt;/a>
&lt;figcaption>Azure Devops VS build task&lt;/figcaption>
&lt;/figure>&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 122;
flex-basis: 294px"
>
&lt;a href="https://always-developing.github.io/p/12-2021-devops-symbol-server/4.vsbuilddetail.png" data-size="691x564">
&lt;img src="https://always-developing.github.io/p/12-2021-devops-symbol-server/4.vsbuilddetail.png"
width="691"
height="564"
srcset="https://always-developing.github.io/p/12-2021-devops-symbol-server/4.vsbuilddetail_hua2b078adb96f23a80cfe4c9c744499d3_16144_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/12-2021-devops-symbol-server/4.vsbuilddetail_hua2b078adb96f23a80cfe4c9c744499d3_16144_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Azure Devops VS build task detail">
&lt;/a>
&lt;figcaption>Azure Devops VS build task detail&lt;/figcaption>
&lt;/figure>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Publishing the symbols&lt;/code>:&lt;br>
The &lt;strong>Index sources and publish symbols&lt;/strong> task is then used to publish the symbols to either a &lt;em>file share&lt;/em>, or the &lt;em>Azure Devops symbol server&lt;/em>
&lt;figure
class="gallery-image"
style="
flex-grow: 563;
flex-basis: 1353px"
>
&lt;a href="https://always-developing.github.io/p/12-2021-devops-symbol-server/5.symboltask.png" data-size="592x105">
&lt;img src="https://always-developing.github.io/p/12-2021-devops-symbol-server/5.symboltask.png"
width="592"
height="105"
srcset="https://always-developing.github.io/p/12-2021-devops-symbol-server/5.symboltask_hu02ef02bf90de5907483a55a8344bd225_7048_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/12-2021-devops-symbol-server/5.symboltask_hu02ef02bf90de5907483a55a8344bd225_7048_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Azure Devops publish symbol task">
&lt;/a>
&lt;figcaption>Azure Devops publish symbol task&lt;/figcaption>
&lt;/figure>&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 138;
flex-basis: 333px"
>
&lt;a href="https://always-developing.github.io/p/12-2021-devops-symbol-server/6.symboldetail.png" data-size="877x631">
&lt;img src="https://always-developing.github.io/p/12-2021-devops-symbol-server/6.symboldetail.png"
width="877"
height="631"
srcset="https://always-developing.github.io/p/12-2021-devops-symbol-server/6.symboldetail_hu2b8d246311a0dfdbd9fd49e0e67e5d6b_23606_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/12-2021-devops-symbol-server/6.symboldetail_hu2b8d246311a0dfdbd9fd49e0e67e5d6b_23606_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Azure Devops publish symbol detail">
&lt;/a>
&lt;figcaption>Azure Devops publish symbol detail&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Generally the publishing of artifacts would be part of the release pipeline, and not the build. However the &lt;strong>Index sources and publish symbols&lt;/strong> task is &lt;code>only available in the build pipeline&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="consuming-symbols">Consuming symbols&lt;/h2>
&lt;h3 id="configuring-visual-studio">Configuring Visual Studio&lt;/h3>
&lt;p>The final step is to configure Visual Studio with the details on how and when to download and use the symbols. Perform the following steps in Visual Studio.&lt;/p>
&lt;ol>
&lt;li>Configure the symbol server location:
&lt;ol>
&lt;li>Navigate to &lt;code>Tools -&amp;gt; Options -&amp;gt; Debugging -&amp;gt; Symbols&lt;/code>&lt;/li>
&lt;li>Click &lt;code>New Azure Devops Symbol Server Location&lt;/code>&lt;/li>
&lt;li>Select the account, and a list of symbol servers available to the account will be displayed. Chose the server. (in the screen shot below, none are shown as the &lt;em>always-developing&lt;/em> Github account is not linked to Azure Devops)&lt;/li>
&lt;li>Click &lt;code>Connect&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 193;
flex-basis: 464px"
>
&lt;a href="https://always-developing.github.io/p/12-2021-devops-symbol-server/7.SymbolServerAdd.png" data-size="1139x589">
&lt;img src="https://always-developing.github.io/p/12-2021-devops-symbol-server/7.SymbolServerAdd.png"
width="1139"
height="589"
srcset="https://always-developing.github.io/p/12-2021-devops-symbol-server/7.SymbolServerAdd_huf68925288899a63b0d5cac6ad8085773_75988_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/12-2021-devops-symbol-server/7.SymbolServerAdd_huf68925288899a63b0d5cac6ad8085773_75988_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Azure Devops symbol server">
&lt;/a>
&lt;figcaption>Azure Devops symbol server&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>Configure the debugger settings:&lt;/p>
&lt;ol>
&lt;li>Navigate to &lt;code>Tools -&amp;gt; Options -&amp;gt; Debugging&lt;/code>&lt;/li>
&lt;li>Ensure that &lt;code>Enable Just My Code&lt;/code> is &lt;strong>unchecked&lt;/strong>&lt;/li>
&lt;li>Ensure that &lt;code>Enable source server support&lt;/code> is &lt;strong>checked&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 182;
flex-basis: 439px"
>
&lt;a href="https://always-developing.github.io/p/12-2021-devops-symbol-server/8.DebuggerOptions.png" data-size="807x441">
&lt;img src="https://always-developing.github.io/p/12-2021-devops-symbol-server/8.DebuggerOptions.png"
width="807"
height="441"
srcset="https://always-developing.github.io/p/12-2021-devops-symbol-server/8.DebuggerOptions_hu5e175379850f254acc0a05e471eb5313_57403_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/12-2021-devops-symbol-server/8.DebuggerOptions_hu5e175379850f254acc0a05e471eb5313_57403_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Azure Devops symbol server">
&lt;/a>
&lt;figcaption>Azure Devops symbol server&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Configure which symbols to load automatically &lt;strong>(optional but recommended)&lt;/strong>:&lt;/p>
&lt;p>By default symbols will automatically be loaded (after being downloaded) if they are available in any of the symbol servers. If an application references a number of packages where symbols are available, start-up time when running and debugging can be dramatically negatively impacted.&lt;br>
Visual Studio can be configured to only load the packages specified - or only load packages based on a wildcard (this is incredibly useful if all NuGet packages share a common namespace structure, as might be the case especially in a corporate environment)&lt;/p>
&lt;ol>
&lt;li>Navigate to &lt;code>Tools -&amp;gt; Options -&amp;gt; Debugging -&amp;gt; Symbols&lt;/code>&lt;/li>
&lt;li>Select &lt;code>Load only specific modules&lt;/code>&lt;/li>
&lt;li>Click &lt;code>Specify included modules&lt;/code>&lt;/li>
&lt;li>Click &lt;code>New Module&lt;/code>&lt;/li>
&lt;li>Add the module name, or wildcard format&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 120;
flex-basis: 288px"
>
&lt;a href="https://always-developing.github.io/p/12-2021-devops-symbol-server/9.SpecificModules.png" data-size="627x521">
&lt;img src="https://always-developing.github.io/p/12-2021-devops-symbol-server/9.SpecificModules.png"
width="627"
height="521"
srcset="https://always-developing.github.io/p/12-2021-devops-symbol-server/9.SpecificModules_hu103063780aaa7a859e78dfefb4ba7db2_44556_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/12-2021-devops-symbol-server/9.SpecificModules_hu103063780aaa7a859e78dfefb4ba7db2_44556_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Specify which modules to load">
&lt;/a>
&lt;figcaption>Specify which modules to load&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="nuget-symbol-package">NuGet symbol package&lt;/h2>
&lt;p>This post focuses on building and hosting the symbols using Azure Devops - but just a small note publishing to NuGet.org if the package is publicly available.&lt;br>
The &lt;a class="link" href="http://nuget.org" target="_blank" rel="noopener"
>nuget.org&lt;/a> symbol server uses the &lt;code>.snupkg&lt;/code> file format for symbols, which are optionally generated when the nupkg file is generated. See this this &lt;a class="link" href="https://docs.microsoft.com/en-us/nuget/create-packages/symbol-packages-snupkg" target="_blank" rel="noopener"
>document on the various ways of generating a .snupkg file&lt;/a>.&lt;/p>
&lt;hr>
&lt;h2 id="final-thoughts">Final thoughts&lt;/h2>
&lt;p>That&amp;rsquo;s all there is to it!
Whether a package author or package consumer, having the option to step into the code will prove invaluable - with practically no additional development effort.&lt;/p>
&lt;p>If possible (if the source code can be made public), I highly recommend making the symbols available, to everyone&amp;rsquo;s benefit!&lt;/p>
&lt;hr>
&lt;h2 id="references">References&lt;/h2>
&lt;p>&lt;a class="link" href="https://docs.microsoft.com/en-us/azure/devops/pipelines/artifacts/symbols?view=azure-devops" target="_blank" rel="noopener"
>Symbol files&lt;/a>&lt;br>
&lt;a class="link" href="https://docs.microsoft.com/en-us/azure/devops/artifacts/concepts/symbols?view=azure-devops" target="_blank" rel="noopener"
>Publishing symbols&lt;/a>&lt;br>
&lt;a class="link" href="https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/" target="_blank" rel="noopener"
>NuGet symbols (slightly outdated, but still useful)&lt;/a>&lt;/p></description></item><item><title>Dynamic Context (for Entity Framework Core)</title><link>https://always-developing.github.io/p/11-2020-dynamic-context/</link><pubDate>Sat, 11 Dec 2021 03:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/11-2020-dynamic-context/</guid><description>&lt;h2 id="the-problem">The problem&lt;/h2>
&lt;p>Entity Framework Core is a great go-to ORM for .NET, for any type of application provides almost all the functionality required to do successful database access out the box.&lt;br>
However, there are two use cases, specifically with regards to retrieval of data, it doesn&amp;rsquo;t cater for - this post and the accompanying code sample/NuGet package attempts to provides solutions for these use cases.&lt;/p>
&lt;p>First, the setup - an EF DbContext which has one DbSet, for storing &lt;code>Blogs&lt;/code> (the below is a standard DbContext configuration):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-21">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-22">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-22">22&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-23">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-23">23&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-24">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-24">24&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-25">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-25">25&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-26">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-26">26&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-27">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-27">27&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-28">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-28">28&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-29">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-29">29&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-30">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-30">30&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-31">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-31">31&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-32">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-32">32&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-33">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-33">33&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-34">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-34">34&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-35">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-35">35&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">BlogContext&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">DbContext&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">BlogContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DbContextOptions&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">BlogContext&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="k">base&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">Action&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DbContextOptionsBuilder&lt;/span>&lt;span class="p">&amp;gt;?&lt;/span> &lt;span class="n">BlogContextOptionsBuilder&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">protected&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">OnConfiguring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DbContextOptionsBuilder&lt;/span> &lt;span class="n">optionsBuilder&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">base&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">OnConfiguring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">optionsBuilder&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// The DBSet for the Blog entity
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">DbSet&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Blog&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">Blog&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Blog&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">Guid&lt;/span> &lt;span class="n">Id&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">Title&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">Owner&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">Url&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Post&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">Posts&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Post&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">Guid&lt;/span> &lt;span class="n">Id&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">Title&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">Content&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">WordCount&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">Guid&lt;/span> &lt;span class="n">BlogId&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">Blog&lt;/span> &lt;span class="n">Blog&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;blockquote>
&lt;div>
&lt;div style="width: 5%; float: left; vertical-align: middle; padding-right: 60px;">
&lt;i class="inline-svg" >&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-info-circle" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#00abfb" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;circle cx="12" cy="12" r="9" />
&lt;line x1="12" y1="8" x2="12.01" y2="8" />
&lt;polyline points="11 12 12 12 12 16 13 16" />
&lt;/svg>&lt;/i>
&lt;/div>
&lt;div>
&lt;p>&lt;p>The below use cases are &lt;code>fairly niche&lt;/code> - in most day-to-day use cases, &lt;code>EF Core will do what is required out the box&lt;/code>. The below solutions are intended to be used to &lt;code>enhance and work in conjunction&lt;/code> with the normal DbContext.&lt;br>
If you find you are ONLY using the DbContext for the below use cases, it might make sense to investigate using another more suited ORM (such as &lt;strong>&lt;a href="https://github.com/DapperLib/Dapper">Dapper&lt;/a>&lt;/strong>).&lt;/p>
&lt;p>However if you are using EF Core and adding another ORM into your application doesn&amp;rsquo;t make sense, hopefully this post along with the &lt;strong>&lt;a href="https://github.com/always-developing/AlwaysDeveloping.EntityFrameworkCore.DynamicContext">source code + samples&lt;/a>&lt;/strong> and &lt;strong>&lt;a href="https://www.nuget.org/packages/AlwaysDeveloping.EntityFrameworkCore.DynamicContext/">NuGet package&lt;/a>&lt;/strong> can assist you in resolving any issues.&lt;/p>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/blockquote>
&lt;hr>
&lt;h3 id="dbset-is-required">DbSet is required&lt;/h3>
&lt;p>To get a list of all Blogs, one of the following two lines of code can be used:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Blog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// OR
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Blog&lt;/span>&lt;span class="p">&amp;gt;().&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>Suppose only the Blog id and the url was required - any one of the below methods would achieve this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-20">20&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="c1">// Define a new type, called BlogUrl, which contains just BlogId and Url properties
&lt;/span>&lt;span class="c1">// Project into the new type
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Blog&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">BlogUrl&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">BlogId&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Url&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Url&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Project into the new type using raw SQL
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Blog&lt;/span>&lt;span class="p">&amp;gt;().&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id, Url FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">BlogUrl&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">BlogId&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Url&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Url&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Project into an anonymous type
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs3&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Blog&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">BlogId&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Url&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Url&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Project into an anonymous type using raw SQL
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs4&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Blog&lt;/span>&lt;span class="p">&amp;gt;().&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id, Url FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">BlogId&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Url&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Url&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span> &lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>The issue here is that &lt;code>EF Core requires the retrieval to be executed off a DbSet&lt;/code>. This means an entity and matching SQL statement cannot dynamically be thrown at EF Core at runtime, and have data successfully returned.&lt;/p>
&lt;p>For example, the following code would &lt;code>not work unless the BlogUrl type has been added as a DbSet to the DbContext&lt;/code>.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="c1">// Does not work unless a DbSet of type BlogUrl has been added
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">BlogUrl&lt;/span>&lt;span class="p">&amp;gt;().&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id as BlogId, Url FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>This problem also extends to anonymous types - as their definition is only known at runtime, a &lt;code>DbSet&lt;/code> cannot be created for them before runtime.&lt;/p>
&lt;hr>
&lt;h3 id="support-for-simple-types">Support for simple types&lt;/h3>
&lt;p>Suppose now only a list of Blog ids is required to be returned - either one of the following would work:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="c1">// Define a new type, called BlogId, which contains just Id
&lt;/span>&lt;span class="c1">// Project into the new type
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">ids1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Blog&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">BlogId&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">Id&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Id&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Project into a list of Ids
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">ids2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Blog&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Id&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Project into a list of Ids using raw sql
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">ids3&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Blog&lt;/span>&lt;span class="p">&amp;gt;().&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Id&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>The issue here is that the &lt;code>DbSet type is required to be a reference type&lt;/code>: This means a list of simple/value types (and other identifier types such as Guid) cannot be returned directly.&lt;br>
This is related to the first issue mentioned above - a simple/value type and matching SQL statement cannot dynamically be thrown at EF Core at runtime and have data returned.&lt;/p>
&lt;p>For example, the following code would &lt;code>not work&lt;/code>.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="c1">// This DOES NOT WORK (yet)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">ids&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Guid&lt;/span>&lt;span class="p">&amp;gt;().&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;blockquote>
&lt;div>
&lt;div style="width: 5%; float: left; vertical-align: middle; padding-right: 60px;">
&lt;i class="inline-svg" >&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-info-circle" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#00abfb" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;circle cx="12" cy="12" r="9" />
&lt;line x1="12" y1="8" x2="12.01" y2="8" />
&lt;polyline points="11 12 12 12 12 16 13 16" />
&lt;/svg>&lt;/i>
&lt;/div>
&lt;div>
&lt;p>Both issues this post addresses involves the retrieval data - &lt;code>EF Core change tracking functionality will not work, and is not intended to work&lt;/code> with the proposed solutions.&lt;br>
If change tracking is required, then the dynamic route outlines in this post should not be used. This is the reason why all example use &lt;strong>AsNoTracking()&lt;/strong> when retrieving the data.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="dynamic-entity-results">Dynamic entity results&lt;/h2>
&lt;h3 id="projected-entity">Projected entity&lt;/h3>
&lt;p>The first issue to resolve, is the ability to populate an entity &lt;code>without having a Dbset added to the DbContext&lt;/code> for the entity.&lt;br>
We cannot &lt;em>really&lt;/em> get around this requirement - EF Core always need the entity be added as a DbSet, however what if it was &lt;code>added dynamically at runtime?&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-21">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-22">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-22">22&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-23">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-23">23&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-24">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-24">24&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-25">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-25">25&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-26">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-26">26&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-27">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-27">27&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-28">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-28">28&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-29">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-29">29&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-30">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-30">30&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">RuntimeContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">DbContext&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="k">class&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">RuntimeContext&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">protected&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">OnConfiguring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DbContextOptionsBuilder&lt;/span> &lt;span class="n">optionsBuilder&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">optionsBuilder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">UseSqlite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">$&amp;#34;Data Source={Environment
&lt;/span>&lt;span class="s"> .GetFolderPath(Environment.SpecialFolder.MyDocuments)}\\BlogDatabase.db&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">base&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">OnConfiguring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">optionsBuilder&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">protected&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">OnModelCreating&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ModelBuilder&lt;/span> &lt;span class="n">modelBuilder&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">modelBuilder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Entity&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;().&lt;/span>&lt;span class="n">HasNoKey&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">foreach&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">prop&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">GetProperties&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BindingFlags&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Instance&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="n">BindingFlags&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Public&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(!&lt;/span>&lt;span class="n">prop&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CustomAttributes&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AttributeType&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NotMappedAttribute&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Property&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prop&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">base&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">OnModelCreating&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modelBuilder&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>Here a context has been created (inherits from DbContext):&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Line 1:&lt;/strong> It takes in a generic type T&lt;/li>
&lt;li>&lt;strong>Line 15-29&lt;/strong>: The model for the context is created (when the context is initialized)
&lt;ul>
&lt;li>&lt;strong>Line 17&lt;/strong>: Type T is added as a DbSet to the context, but without a Key. A key is not required as this will be used only for data retrieval and with &lt;em>AsNoTracking&lt;/em>.&lt;/li>
&lt;li>&lt;strong>Line 18-26&lt;/strong>: Using reflection, the relevant properties of type T are added to the DbSet entity.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>The following code will now work, without BlogUrl being added&lt;/code> as a DbSet beforehand:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">using&lt;/span> &lt;span class="nn">var&lt;/span> &lt;span class="n">dynContext&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">BlogUrl&lt;/span>&lt;span class="p">&amp;gt;();&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dynContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">BlogUrl&lt;/span>&lt;span class="p">&amp;gt;().&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id as BlogId, Url FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">()&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>As this is all being setup dynamically, EF will not know how to generate the SQL for the dynamic entity - this is why raw SQL will always need to be supplied for this solution. The solution could be expanded to include this functionality in future, but this is outside the scope of this post.&lt;/p>
&lt;p>This is now a &lt;code>working dynamic runtime context&lt;/code> - however there are still a few broader issues which need to be resolved, which we&amp;rsquo;ll get to later in the post:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Dependency Injection&lt;/code> - There needs to be a way to configure the DI container with the dynamic runtime context when the underlying original context is configured.&lt;/li>
&lt;li>&lt;code>Dynamic Configuration&lt;/code>: In the above, the configuration of the dynamic runtime context is hardcoded. Ideally this context would be initialized with the same configuration as the original context.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="anonymous-entity">Anonymous entity&lt;/h3>
&lt;p>As it stands, the core of the above code will work with anonymous types - just one small issue to resolve, and thats how to &lt;code>convert the anonymous type to T&lt;/code>.&lt;/p>
&lt;p>To convert the anonymous object to T, we have to &lt;code>inter T by example&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5">5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6">6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7">7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8">8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9">9&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="kt">var&lt;/span> &lt;span class="n">anon&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">BlogId&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Url&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">blog&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">CallWithAnon&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">anon&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">CallWithAnon&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">example&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">class&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="nn">var&lt;/span> &lt;span class="n">dynContext&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">dynContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;().&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id as BlogId, Url FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">First&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>&lt;strong>Line 1:&lt;/strong> Declare an example anonymous object with the relevant properties, using default values&lt;/li>
&lt;li>&lt;strong>Line 2:&lt;/strong> Invoke the method just using the example object, and not specifying T&lt;/li>
&lt;li>&lt;strong>Line 4-9:&lt;/strong> T is inferred from the example parameter (which is not used in the method - it is only used for the inference) and can successfully call into the dynamic runtime context&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="dynamic-value-type-results">Dynamic value type results&lt;/h2>
&lt;p>The next issue to resolve, is the ability to get a simple type or list of simple types from EF Core dynamically. The term &lt;code>simple type&lt;/code> is used very loosely to refer to following types:&lt;/p>
&lt;ul>
&lt;li>Value types: &lt;code>int&lt;/code>, &lt;code>bool&lt;/code>, &lt;code>float&lt;/code>, &lt;code>char&lt;/code> etc&lt;/li>
&lt;li>Common Unique Identifier: &lt;code>Guid&lt;/code>&lt;/li>
&lt;li>Simple value classes: &lt;code>string&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>As mentioned previously, EF Core requires a query be executed off a DbSet - another requirement is that the &lt;code>DbSet type be a reference type&lt;/code> (a class).&lt;/p>
&lt;p>Even with the dynamic runtime context, the following code &lt;code>would not work&lt;/code> as a DbSet of type &lt;code>Guid&lt;/code> cannot be dynamically created (as its not a reference type):
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="c1">// This DOES NOT WORK (yet)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dynContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Guid&lt;/span>&lt;span class="p">&amp;gt;().&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>We cannot &lt;em>really&lt;/em> get around the requirement that the DbSet be a reference type - however, what can be done is to &lt;code>dynamically converted the simple type to a reference type, run the query and converted the results back to a simple type&lt;/code>&lt;/p>
&lt;p>First lets create a reference type class, which will act as a wrapper:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">SimpleType&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TValue&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">TValue&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>There are no constraints on TValue, as there are no generic constraints which will work for all the types we require (value types, Guid and string).&lt;/p>
&lt;p>Now we can use this reference wrapper class, and call the dynamic runtime context:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">using&lt;/span> &lt;span class="nn">var&lt;/span> &lt;span class="n">dynContext&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">SimpleType&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Guid&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;();&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dynContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">SimpleType&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Guid&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id as Value FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">First&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="p">;&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>The above will work, but we no have two more broader issues which need to be resolved:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Still using reference type&lt;/code>: We are still using a reference type for the DbSet and have to manually wrap the simple type and then unwrap it&lt;/li>
&lt;li>&lt;code>Column called 'Value'&lt;/code>: The column in the SQL has to be called &amp;lsquo;Value&amp;rsquo; for it to match the field on the wrapper class and successfully retrieve the data&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="resolving-outstanding-issues">Resolving outstanding issues&lt;/h2>
&lt;h3 id="code-restructure">Code restructure&lt;/h3>
&lt;p>Even though we have a working dynamic runtime context, there are 4 outstanding issues to be resolved, before we have a more complete solution. First lets restructure the code a bit to make these easier to resolve.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create a new class &lt;code>DynamicContext&lt;/code> which accepts a generic DbContext.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">DynamicContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TContext&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">TContext&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">DbContext&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">DbContext&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">originalContext&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">DbContext&lt;/span> &lt;span class="n">Context&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">originalContext&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">DynamicContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">originalContext&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Change &lt;code>RuntimeContext&lt;/code> to accept a generic TContext of type DbContext, and make it internal instead of public. The reason for this will become more apparent as we start adding more functionality to &lt;code>DynamicContext&lt;/code>.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5">5&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">internal&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">RuntimeContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TContext&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">:&lt;/span>
&lt;span class="n">DbContext&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">where&lt;/span> &lt;span class="n">TContext&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">DbContext&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">// Rest of class implementation
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;code>DynamicContext&lt;/code> will now become a &lt;code>wrapper&lt;/code> and the public face of &lt;code>RuntimeContext&lt;/code> and of the original &lt;code>DbContext&lt;/code> - as we work through the outstanding issues below, more functionality will be added to &lt;code>DynamicContext&lt;/code> to make use of &lt;code>RuntimeContext&lt;/code>.&lt;/p>
&lt;p>The four outstanding issues:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Dependency Injection&lt;/code>: There needs to be a way to configure the DI container with the runtime context as well as the original context&lt;/li>
&lt;li>&lt;code>Dynamic Configuration&lt;/code>: The dynamic runtime context should use the same configuration as the original underlying DbContext&lt;/li>
&lt;li>&lt;code>Reference type wrapper&lt;/code>: A reference type wrapper is still used for simple types, which has to manually be wrapped and unwrapped&lt;/li>
&lt;li>&lt;code>Column called 'Value'&lt;/code>: The column in the raw SQL has to be called &amp;lsquo;Value&amp;rsquo; as it has to match the field on the wrapper class&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="dependency-injection">Dependency Injection&lt;/h3>
&lt;p>As &lt;code>DynamicContext&lt;/code> now takes a DbContext as a generic parameter, if a DbContext is added to the DI container &lt;code>DynamicContext&lt;/code> should be added as well.&lt;/p>
&lt;p>To do this, we&amp;rsquo;ll use extension methods which correspond to the existing .NET &lt;code>AddDbContext&lt;/code> methods. For each overloaded &lt;code>AddDbContext&lt;/code> method, an &lt;code>AddDynamicContext&lt;/code> method will be added (an example of one of these methods):
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">IServiceCollection&lt;/span> &lt;span class="n">AddDynamicContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TContext&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>
&lt;span class="k">this&lt;/span> &lt;span class="n">IServiceCollection&lt;/span> &lt;span class="n">serviceCollection&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Action&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DbContextOptionsBuilder&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">optionsAction&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">ServiceLifetime&lt;/span> &lt;span class="n">contextLifetime&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ServiceLifetime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Scoped&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">ServiceLifetime&lt;/span> &lt;span class="n">optionsLifetime&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ServiceLifetime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Scoped&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">TContext&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">DbContext&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">// Add the dynamic context for the original dbcontext
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">serviceCollection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DynamicContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TContext&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;();&lt;/span>
&lt;span class="c1">// add the dbcontext using the normal AddDbContext call
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">serviceCollection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddDbContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TContext&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TContext&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>
&lt;span class="n">optionsAction&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">contextLifetime&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">optionsLifetime&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>The method has the same parameters as the invoked &lt;code>AddDbContext&lt;/code> method, and acts as a passthrough - on the way adding a record to the DI container for &lt;code>DynamicContext&amp;lt;T&amp;gt;&lt;/code>.&lt;br>
An extension method is added for each variation of the &lt;code>AddDbContext&lt;/code> method.&lt;/p>
&lt;p>When setting up the DI container, instead of calling &lt;code>AddDbContext&lt;/code>, &lt;code>AddDynamicContext&lt;/code> is now called.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5">5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6">6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7">7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8">8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9">9&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="c1">// OLD
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddDbContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">BlogContext&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">UseSqlite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">$&amp;#34;Data Source={Environment
&lt;/span>&lt;span class="s"> .GetFolderPath(Environment.SpecialFolder.MyDocuments)}\\BlogDatabase.db&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">// NEW
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddDynamicContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">BlogContext&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">UseSqlite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">$&amp;#34;Data Source={Environment
&lt;/span>&lt;span class="s"> .GetFolderPath(Environment.SpecialFolder.MyDocuments)}\\BlogDatabase.db&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>We can now inject DynamicContext&amp;lt;T&amp;gt; (where T is the DbContext) into the relevant constructor, and have access to the dynamic functionality provided by &lt;code>DynamicContext&lt;/code> as well as access to the underlying DbContext, via the &lt;code>Context&lt;/code> property.&lt;/p>
&lt;p>&lt;strong>Dependency injection taken care of!&lt;/strong>&lt;/p>
&lt;hr>
&lt;h3 id="dynamic-configuration">Dynamic Configuration&lt;/h3>
&lt;p>Currently, the configuration of the RuntimeContext is hardcoded in the &lt;em>OnConfiguring&lt;/em> method. Next let&amp;rsquo;s make it dynamic and have the same configuration as the underlying original DbContext.&lt;/p>
&lt;p>First, lets define a new type to &lt;code>store the DbContext initialization Action&lt;/code>:&lt;/p>
&lt;p>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5">5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6">6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7">7&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">DynamicContextInitOptions&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TContext&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">TContext&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">DbContext&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">Action&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DbContextOptionsBuilder&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">optionsAction&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">Action&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IServiceProvider&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DbContextOptionsBuilder&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="n">optionsActionDependencyInjection&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
When initializing a DbContext, one of the two &lt;code>Actions&lt;/code> could be used. The class can cater for both, but only one of the two will be used at any one time.&lt;/p>
&lt;p>Next, when a DbContext is added to the container (via the &lt;code>AddDynamicContext&lt;/code> extension method) we&amp;rsquo;ll record how the original DbContext was initialized, and add the initialization Action to the DI container as well. A private helper method &lt;code>AddDynamicContent&lt;/code> is used to configure the DI container based on the Action passed in:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-21">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-22">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-22">22&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-23">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-23">23&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-24">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-24">24&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-25">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-25">25&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-26">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-26">26&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-27">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-27">27&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-28">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-28">28&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-29">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-29">29&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-30">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-30">30&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-31">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-31">31&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-32">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-32">32&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-33">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-33">33&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-34">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-34">34&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-35">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-35">35&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-36">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-36">36&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-37">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-37">37&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-38">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-38">38&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-39">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-39">39&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-40">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-40">40&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">IServiceCollection&lt;/span> &lt;span class="n">AddDynamicContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TContext&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>
&lt;span class="k">this&lt;/span> &lt;span class="n">IServiceCollection&lt;/span> &lt;span class="n">serviceCollection&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Action&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DbContextOptionsBuilder&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">optionsAction&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">ServiceLifetime&lt;/span> &lt;span class="n">contextLifetime&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ServiceLifetime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Scoped&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">ServiceLifetime&lt;/span> &lt;span class="n">optionsLifetime&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ServiceLifetime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Scoped&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">TContext&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">DbContext&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">AddDynamicContent&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TContext&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">serviceCollection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">optionsAction&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">serviceCollection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddDbContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TContext&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TContext&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>
&lt;span class="n">optionsAction&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">contextLifetime&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">optionsLifetime&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">AddDynamicContent&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TContext&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>
&lt;span class="n">IServiceCollection&lt;/span> &lt;span class="n">serviceCollection&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Action&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DbContextOptionsBuilder&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">optionsAction&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Action&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IServiceProvider&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DbContextOptionsBuilder&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="n">optionsActionDependencyInjection&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">TContext&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">DbContext&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">serviceCollection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DynamicContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TContext&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;();&lt;/span>
&lt;span class="c1">// If no action, then it would need to be added manually
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">optionsAction&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="k">null&lt;/span> &lt;span class="p">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">optionsActionDependencyInjection&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Create an options instance with the Action populated.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// One of the two will always be null
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">var&lt;/span> &lt;span class="n">options&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DynamicContextInitOptions&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TContext&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">optionsAction&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">optionsAction&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">optionsActionDependencyInjection&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">optionsActionDependencyInjection&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="c1">// add the type to the DI container
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">serviceCollection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddSingleton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>For a specific DbContext, we now know how it was initialized. So if we inject &lt;code>DynamicContextInitOptions&amp;lt;TContext&amp;gt;&lt;/code> into &lt;code>DynamicContext&lt;/code> and then into &lt;code>RuntimeContext&lt;/code>, it can be used to initialized dynamically.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-21">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-22">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-22">22&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-23">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-23">23&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-24">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-24">24&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-25">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-25">25&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-26">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-26">26&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-27">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-27">27&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-28">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-28">28&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-29">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-29">29&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-30">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-30">30&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-31">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-31">31&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-32">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-32">32&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-33">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-33">33&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-34">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-34">34&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">internal&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">RuntimeContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">:&lt;/span> &lt;span class="n">DbContext&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="k">class&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">DynamicContextInitOptions&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DbContext&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">contextInitAction&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IServiceProvider&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">serviceProvider&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">RuntimeContext&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">DynamicContextInitOptions&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DbContext&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">contextInitAction&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">IServiceProvider&lt;/span> &lt;span class="n">serviceProvider&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">contextInitAction&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">contextInitAction&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">serviceProvider&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">serviceProvider&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">protected&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">OnConfiguring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DbContextOptionsBuilder&lt;/span> &lt;span class="n">optionsBuilder&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">// init the context based on how the initial TContext was initially initialized
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="m">_&lt;/span>&lt;span class="n">contextInitAction&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">optionsAction&lt;/span> &lt;span class="p">!=&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">contextInitAction&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">optionsAction&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">optionsBuilder&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">contextInitAction&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">optionsActionDependencyInjection&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">Invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">_&lt;/span>&lt;span class="n">serviceProvider&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">optionsBuilder&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">base&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">OnConfiguring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">optionsBuilder&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Class continues...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>We can now inject a DynamicContext into a relevant constructor, have access to dynamic functionality as well as the underlying original DbContext, and we can dynamically initialized the dynamic context based on how the underlying original context was initialized.&lt;/p>
&lt;p>&lt;strong>Dynamic configuration taken care of!&lt;/strong>&lt;/p>
&lt;hr>
&lt;h3 id="dynamiccontext-wrapper">DynamicContext wrapper&lt;/h3>
&lt;p>Next we&amp;rsquo;ll add a few methods to the wrapper &lt;code>DynamicContext&lt;/code> to provide access to the internal &lt;code>RuntimeContext&lt;/code>, as well as making using the &lt;code>reference type wrapper, SimpleType&amp;lt;T&amp;gt;&lt;/code> easier.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>First a method to add a DbSet dynamically based on the &lt;code>generic entity&lt;/code> &lt;em>TEntity&lt;/em>:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="n">DbSet&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">TEntity&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="k">class&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">// if the type is on the original context,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// then don&amp;#39;t initialize the dynamic context
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="m">_&lt;/span>&lt;span class="n">originalContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">FindEntityType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">!=&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">originalContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">runtimeContext&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">runtimeInitAction&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">serviceProvider&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">runtimeContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>To invoke this method:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dynamicContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">BlogUrl&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id as BlogId, Url FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">()&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Next, a method to add DbSet dynamically based on an &lt;code>anonymous object&lt;/code>:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-17">17&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="n">DbSet&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">TEntity&lt;/span> &lt;span class="n">example&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">where&lt;/span> &lt;span class="n">TEntity&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="k">class&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">example&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// if the type is on the original context,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// then don&amp;#39;t initialize the dynamic context
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="m">_&lt;/span>&lt;span class="n">originalContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">FindEntityType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">!=&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">originalContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">runtimeContext&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">runtimeInitAction&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">serviceProvider&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">runtimeContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>To invoke this method:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="kt">var&lt;/span> &lt;span class="n">anonBlogUrl&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">BlogId&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Url&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dynamicContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">anonBlogUrl&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id as BlogId, Url FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Next, a method to &lt;code>wrap the explicit SimpleType&amp;lt;T&amp;gt; usage&lt;/code>. With this method SimpleType&amp;lt;T&amp;gt; does not need to be used explicitly:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="n">DbSet&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">SimpleType&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">ValueSet&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">TEntity&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="k">struct&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">// as the constraint is on struct, we have this additional check
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// just to make sure its a struct of a relevant type
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// (int, long, float, bool etc)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(!&lt;/span>&lt;span class="n">IsValidType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InvalidOperationException&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s">$&amp;#34;Type &amp;#39;{typeof(TEntity).Name}&amp;#39; is not supported&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">runtimeContext&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">GetInternalRuntimeContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">SimpleType&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;());&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">runtimeContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">SimpleType&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>To invoke this method:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="kt">var&lt;/span> &lt;span class="n">blogIds&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dynamicContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ValueSet&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Guid&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id as Value FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Lastly, as &lt;code>string is not a struct, it has to be handled separately&lt;/code>:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5">5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6">6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7">7&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="n">DbSet&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">SimpleType&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">StringSet&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="k">where&lt;/span> &lt;span class="n">TEntity&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">&amp;gt;,&lt;/span> &lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ICloneable&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">IComparable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IComparable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">&amp;gt;,&lt;/span> &lt;span class="n">IConvertible&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IEquatable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">runtimeContext&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">GetInternalRuntimeContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">SimpleType&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;());&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">runtimeContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">SimpleType&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>To invoke this method:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="kt">var&lt;/span> &lt;span class="n">urls&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">StringSet&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Url as Value FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>We can have user friendly methods which are similar to the DbContext &lt;em>Set&lt;/em> methods, and which wrap some of the annoyance of having to use &lt;em>SimpleType&amp;lt;T&amp;gt;&lt;/em> explicitly.&lt;/p>
&lt;p>&lt;strong>Simple value usage taken care of!&lt;/strong>&lt;/p>
&lt;hr>
&lt;h3 id="value-column">Value column&lt;/h3>
&lt;p>The last issue to resolve is the fact that the &lt;code>Set&amp;lt;&amp;gt;&lt;/code> methods for simple types (struct and string) return a &lt;code>DbSet of SimpleType object and not the simple type value itself&lt;/code>.&lt;/p>
&lt;p>One option, is to explicitly select the value out the IQueryable, as seen in &lt;code>line 4 below&lt;/code>:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5">5&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="kt">var&lt;/span> &lt;span class="n">urls&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">StringSet&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Url as Value FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>The other option is to add some extension methods to easily unpack the &lt;code>SimpleType&amp;lt;T&amp;gt;&lt;/code> into the &lt;code>T&lt;/code>:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">IQueryable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">ToSimple&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>
&lt;span class="k">this&lt;/span> &lt;span class="n">IQueryable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">SimpleType&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">query&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">where&lt;/span> &lt;span class="n">TEntity&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IComparable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IFormattable&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">IComparable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;,&lt;/span> &lt;span class="n">IEquatable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TEntity&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">query&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entity&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">entity&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">AsQueryable&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">IQueryable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">ToSimple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="n">IQueryable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">SimpleType&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">query&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">query&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entity&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">entity&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">AsQueryable&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>To invoke this method:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5">5&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="kt">var&lt;/span> &lt;span class="n">blogIds&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ValueSet&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Guid&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id as Value FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ToSimple&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;blockquote>
&lt;div>
&lt;div style="width: 5%; float: left; vertical-align: middle; padding-right: 60px;">
&lt;i class="inline-svg" >&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-info-circle" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#00abfb" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;circle cx="12" cy="12" r="9" />
&lt;line x1="12" y1="8" x2="12.01" y2="8" />
&lt;polyline points="11 12 12 12 12 16 13 16" />
&lt;/svg>&lt;/i>
&lt;/div>
&lt;div>
&lt;p>The solution still requires that the SQL command have a column returned with the name of &amp;lsquo;Value&amp;rsquo;. With some additional effort, this constraint could be resolved , but this is outside the scope of this post.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/blockquote>
&lt;p>&lt;strong>Value column partially taken care of!&lt;/strong>&lt;/p>
&lt;hr>
&lt;h2 id="nuget-package">Nuget Package&lt;/h2>
&lt;p>All the above functionality has been packed into a &lt;strong>&lt;a class="link" href="https://www.nuget.org/packages/AlwaysDeveloping.EntityFrameworkCore.DynamicContext/" target="_blank" rel="noopener"
>NuGet package which is ready to use, and is available here&lt;/a>&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>&lt;a class="link" href="https://github.com/always-developing/AlwaysDeveloping.EntityFrameworkCore.DynamicContext" target="_blank" rel="noopener"
>Full source code is also available on GitHub here&lt;/a>&lt;/strong>&lt;/p>
&lt;hr>
&lt;h2 id="performance-benchmarks">Performance benchmarks&lt;/h2>
&lt;p>Some performance benchmarks of using the DynamicContext vs DbContext directly and projecting the values out (using .NET 6, EF Core 6 and Sqlite)&lt;/p>
&lt;p>The first set of results benchmark &lt;code>retrieving a list of ids and urls from a database of 500 records, then 100 000 records&lt;/code>.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-21">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-22">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-22">22&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-23">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-23">23&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-24">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-24">24&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-25">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-25">25&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-26">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-26">26&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-27">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-27">27&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-28">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-28">28&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-29">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-29">29&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-30">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-30">30&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-31">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-31">31&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="c1">// DirectDbSet
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Blog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// GenericDbSet
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Blog&lt;/span>&lt;span class="p">&amp;gt;().&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// GenericDbSetRaw
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Blog&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT * FROM Blog&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// GenericDbSetProj
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs3&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Blog&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">BlogUrl&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">BlogId&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Url&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Url&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// GenericDbSetRawProj
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs4&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Blog&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id, Url FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">BlogUrl&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">BlogId&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Url&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Url&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// DynamicDbSet
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs5&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dynamicContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">BlogUrl&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id as BlogId, Url FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// DynamicDbSetAnon
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">anonBlogUrl&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">BlogId&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Url&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">blogs6&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dynamicContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">anonBlogUrl&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id as BlogId, Url FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>&lt;code>500 records&lt;/code>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Method&lt;/th>
&lt;th style="text-align:right">Mean&lt;/th>
&lt;th style="text-align:right">Error&lt;/th>
&lt;th style="text-align:right">StdDev&lt;/th>
&lt;th style="text-align:right">Ratio&lt;/th>
&lt;th style="text-align:right">Gen 0&lt;/th>
&lt;th style="text-align:right">Gen 1&lt;/th>
&lt;th style="text-align:right">Allocated&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>DirectDbSet&lt;/td>
&lt;td style="text-align:right">1,049.3 us&lt;/td>
&lt;td style="text-align:right">10.66 us&lt;/td>
&lt;td style="text-align:right">9.97 us&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">76.1719&lt;/td>
&lt;td style="text-align:right">25.3906&lt;/td>
&lt;td style="text-align:right">477 KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GenericDbSet&lt;/td>
&lt;td style="text-align:right">1,054.4 us&lt;/td>
&lt;td style="text-align:right">12.71 us&lt;/td>
&lt;td style="text-align:right">11.89 us&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">76.1719&lt;/td>
&lt;td style="text-align:right">25.3906&lt;/td>
&lt;td style="text-align:right">477 KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GenericDbSetRaw&lt;/td>
&lt;td style="text-align:right">1,070.9 us&lt;/td>
&lt;td style="text-align:right">18.19 us&lt;/td>
&lt;td style="text-align:right">16.12 us&lt;/td>
&lt;td style="text-align:right">1.02&lt;/td>
&lt;td style="text-align:right">78.1250&lt;/td>
&lt;td style="text-align:right">25.3906&lt;/td>
&lt;td style="text-align:right">481 KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GenericDbSetProj&lt;/td>
&lt;td style="text-align:right">638.2 us&lt;/td>
&lt;td style="text-align:right">9.48 us&lt;/td>
&lt;td style="text-align:right">8.87 us&lt;/td>
&lt;td style="text-align:right">0.61&lt;/td>
&lt;td style="text-align:right">47.8516&lt;/td>
&lt;td style="text-align:right">12.6953&lt;/td>
&lt;td style="text-align:right">296 KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GenericDbSetRawProj&lt;/td>
&lt;td style="text-align:right">661.1 us&lt;/td>
&lt;td style="text-align:right">3.98 us&lt;/td>
&lt;td style="text-align:right">3.53 us&lt;/td>
&lt;td style="text-align:right">0.63&lt;/td>
&lt;td style="text-align:right">48.8281&lt;/td>
&lt;td style="text-align:right">14.6484&lt;/td>
&lt;td style="text-align:right">302 KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DynamicDbSet&lt;/td>
&lt;td style="text-align:right">696.8 us&lt;/td>
&lt;td style="text-align:right">3.22 us&lt;/td>
&lt;td style="text-align:right">2.69 us&lt;/td>
&lt;td style="text-align:right">0.66&lt;/td>
&lt;td style="text-align:right">54.6875&lt;/td>
&lt;td style="text-align:right">14.6484&lt;/td>
&lt;td style="text-align:right">338 KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DynamicDbSetAnon&lt;/td>
&lt;td style="text-align:right">605.2 us&lt;/td>
&lt;td style="text-align:right">5.51 us&lt;/td>
&lt;td style="text-align:right">5.15 us&lt;/td>
&lt;td style="text-align:right">0.58&lt;/td>
&lt;td style="text-align:right">45.8984&lt;/td>
&lt;td style="text-align:right">13.6719&lt;/td>
&lt;td style="text-align:right">287 KB&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>100 000 records&lt;/code> (Gen 0, 1 and 2 decimals truncated for space reasons):&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Method&lt;/th>
&lt;th style="text-align:right">Mean&lt;/th>
&lt;th style="text-align:right">Error&lt;/th>
&lt;th style="text-align:right">StdDev&lt;/th>
&lt;th style="text-align:right">Ratio&lt;/th>
&lt;th style="text-align:right">Gen 0&lt;/th>
&lt;th style="text-align:right">Gen 1&lt;/th>
&lt;th style="text-align:right">Gen 2&lt;/th>
&lt;th style="text-align:right">Allocated&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>DirectDbSet&lt;/td>
&lt;td style="text-align:right">268.5 ms&lt;/td>
&lt;td style="text-align:right">2.02 ms&lt;/td>
&lt;td style="text-align:right">1.89 ms&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">15000.00&lt;/td>
&lt;td style="text-align:right">5000.00&lt;/td>
&lt;td style="text-align:right">2000.00&lt;/td>
&lt;td style="text-align:right">81 MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GenericDbSet&lt;/td>
&lt;td style="text-align:right">268.6 ms&lt;/td>
&lt;td style="text-align:right">2.47 ms&lt;/td>
&lt;td style="text-align:right">2.19 ms&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">15000.00&lt;/td>
&lt;td style="text-align:right">5000.00&lt;/td>
&lt;td style="text-align:right">2000.00&lt;/td>
&lt;td style="text-align:right">81 MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GenericDbSetRaw&lt;/td>
&lt;td style="text-align:right">267.9 ms&lt;/td>
&lt;td style="text-align:right">3.11 ms&lt;/td>
&lt;td style="text-align:right">2.91 ms&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">15000.00&lt;/td>
&lt;td style="text-align:right">5000.00&lt;/td>
&lt;td style="text-align:right">2000.00&lt;/td>
&lt;td style="text-align:right">81 MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GenericDbSetProj&lt;/td>
&lt;td style="text-align:right">143.8 ms&lt;/td>
&lt;td style="text-align:right">2.60 ms&lt;/td>
&lt;td style="text-align:right">3.09 ms&lt;/td>
&lt;td style="text-align:right">0.54&lt;/td>
&lt;td style="text-align:right">8250.00&lt;/td>
&lt;td style="text-align:right">3000.00&lt;/td>
&lt;td style="text-align:right">1000.00&lt;/td>
&lt;td style="text-align:right">46 MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GenericDbSetRawProj&lt;/td>
&lt;td style="text-align:right">140.8 ms&lt;/td>
&lt;td style="text-align:right">2.76 ms&lt;/td>
&lt;td style="text-align:right">3.06 ms&lt;/td>
&lt;td style="text-align:right">0.52&lt;/td>
&lt;td style="text-align:right">8250.00&lt;/td>
&lt;td style="text-align:right">3000.00&lt;/td>
&lt;td style="text-align:right">1000.00&lt;/td>
&lt;td style="text-align:right">46 MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DynamicDbSet&lt;/td>
&lt;td style="text-align:right">143.9 ms&lt;/td>
&lt;td style="text-align:right">2.11 ms&lt;/td>
&lt;td style="text-align:right">1.97 ms&lt;/td>
&lt;td style="text-align:right">0.54&lt;/td>
&lt;td style="text-align:right">8250.00&lt;/td>
&lt;td style="text-align:right">3000.00&lt;/td>
&lt;td style="text-align:right">1000.00&lt;/td>
&lt;td style="text-align:right">46 MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DynamicDbSetAnon&lt;/td>
&lt;td style="text-align:right">118.1 ms&lt;/td>
&lt;td style="text-align:right">2.28 ms&lt;/td>
&lt;td style="text-align:right">2.02 ms&lt;/td>
&lt;td style="text-align:right">0.44&lt;/td>
&lt;td style="text-align:right">6400.00&lt;/td>
&lt;td style="text-align:right">2400.00&lt;/td>
&lt;td style="text-align:right">1000.00&lt;/td>
&lt;td style="text-align:right">36 MB&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>As expected, projecting the required fields out, is faster and requires less memory than retrieving all the data. Using the &lt;code>DynamicContext&lt;/code> is comparable to projecting the specific values out - &lt;code>the overhead of dynamically creating the DynamicContext is negligible&lt;/code>.&lt;/p>
&lt;hr>
&lt;p>The next set of results benchmark &lt;code>retrieving a list of simple types (Guid) from a database of 500 records, then 100 000 records&lt;/code>.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-21">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-22">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-22">22&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-23">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-23">23&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-24">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-24">24&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-25">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-25">25&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-26">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-26">26&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-27">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-27">27&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-28">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-28">28&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="c1">// DirectDbSet
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">blogIds&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Blog&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Id&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// ValueSetSelect
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">blogIds1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dynamicContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ValueSet&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Guid&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id as Value FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// ValueSetToSimple
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">blogIds2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dynamicContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ValueSet&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Guid&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Id as Value FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToSimple&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// DirectDbSetString
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">urls&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Blog&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Url FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Url&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// StringSetSelect
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">urls1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dynamicContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">StringSet&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Url as Value FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// StringSetToSimple
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">urls2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dynamicContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">StringSet&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">FromSqlRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT Url as Value FROM Blog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AsNoTracking&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToSimple&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>&lt;code>500 records&lt;/code>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Method&lt;/th>
&lt;th style="text-align:right">Mean&lt;/th>
&lt;th style="text-align:right">Error&lt;/th>
&lt;th style="text-align:right">StdDev&lt;/th>
&lt;th style="text-align:right">Ratio&lt;/th>
&lt;th style="text-align:right">Gen 0&lt;/th>
&lt;th style="text-align:right">Gen 1&lt;/th>
&lt;th style="text-align:right">Allocated&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>DirectDbSet&lt;/td>
&lt;td style="text-align:right">864.1 us&lt;/td>
&lt;td style="text-align:right">38.04 us&lt;/td>
&lt;td style="text-align:right">111.55 us&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">-&lt;/td>
&lt;td style="text-align:right">-&lt;/td>
&lt;td style="text-align:right">226 KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ValueSetSelect&lt;/td>
&lt;td style="text-align:right">439.1 us&lt;/td>
&lt;td style="text-align:right">8.32 us&lt;/td>
&lt;td style="text-align:right">14.12 us&lt;/td>
&lt;td style="text-align:right">0.52&lt;/td>
&lt;td style="text-align:right">37.1094&lt;/td>
&lt;td style="text-align:right">8.7891&lt;/td>
&lt;td style="text-align:right">233 KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ValueSetToSimple&lt;/td>
&lt;td style="text-align:right">435.7 us&lt;/td>
&lt;td style="text-align:right">7.98 us&lt;/td>
&lt;td style="text-align:right">8.20 us&lt;/td>
&lt;td style="text-align:right">0.51&lt;/td>
&lt;td style="text-align:right">37.1094&lt;/td>
&lt;td style="text-align:right">6.8359&lt;/td>
&lt;td style="text-align:right">232 KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DirectDbSetString&lt;/td>
&lt;td style="text-align:right">610.5 us&lt;/td>
&lt;td style="text-align:right">12.65 us&lt;/td>
&lt;td style="text-align:right">14.06 us&lt;/td>
&lt;td style="text-align:right">0.71&lt;/td>
&lt;td style="text-align:right">38.0859&lt;/td>
&lt;td style="text-align:right">1.9531&lt;/td>
&lt;td style="text-align:right">233 KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>StringSetSelect&lt;/td>
&lt;td style="text-align:right">437.9 us&lt;/td>
&lt;td style="text-align:right">8.53 us&lt;/td>
&lt;td style="text-align:right">11.67 us&lt;/td>
&lt;td style="text-align:right">0.50&lt;/td>
&lt;td style="text-align:right">39.0625&lt;/td>
&lt;td style="text-align:right">10.7422&lt;/td>
&lt;td style="text-align:right">240 KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>StringSetToSimple&lt;/td>
&lt;td style="text-align:right">439.3 us&lt;/td>
&lt;td style="text-align:right">8.56 us&lt;/td>
&lt;td style="text-align:right">12.28 us&lt;/td>
&lt;td style="text-align:right">0.51&lt;/td>
&lt;td style="text-align:right">39.0625&lt;/td>
&lt;td style="text-align:right">9.7656&lt;/td>
&lt;td style="text-align:right">240 KB&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>100 000 records&lt;/code> (Gen 0, 1 and 2 decimals truncated for space reasons):&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Method&lt;/th>
&lt;th style="text-align:right">Mean&lt;/th>
&lt;th style="text-align:right">Error&lt;/th>
&lt;th style="text-align:right">StdDev&lt;/th>
&lt;th style="text-align:right">Ratio&lt;/th>
&lt;th style="text-align:right">Gen 0&lt;/th>
&lt;th style="text-align:right">Gen 1&lt;/th>
&lt;th style="text-align:right">Gen 2&lt;/th>
&lt;th style="text-align:right">Allocated&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>DirectDbSet&lt;/td>
&lt;td style="text-align:right">58.67 ms&lt;/td>
&lt;td style="text-align:right">1.167 ms&lt;/td>
&lt;td style="text-align:right">2.276 ms&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">4000.00&lt;/td>
&lt;td style="text-align:right">1000.00&lt;/td>
&lt;td style="text-align:right">1000.00&lt;/td>
&lt;td style="text-align:right">32 MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ValueSetSelect&lt;/td>
&lt;td style="text-align:right">54.48 ms&lt;/td>
&lt;td style="text-align:right">1.058 ms&lt;/td>
&lt;td style="text-align:right">1.132 ms&lt;/td>
&lt;td style="text-align:right">0.91&lt;/td>
&lt;td style="text-align:right">5500.00&lt;/td>
&lt;td style="text-align:right">1100.00&lt;/td>
&lt;td style="text-align:right">1000.00&lt;/td>
&lt;td style="text-align:right">32 MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ValueSetToSimple&lt;/td>
&lt;td style="text-align:right">51.66 ms&lt;/td>
&lt;td style="text-align:right">0.399 ms&lt;/td>
&lt;td style="text-align:right">0.354 ms&lt;/td>
&lt;td style="text-align:right">0.86&lt;/td>
&lt;td style="text-align:right">5444.44&lt;/td>
&lt;td style="text-align:right">1111.11&lt;/td>
&lt;td style="text-align:right">1000.00&lt;/td>
&lt;td style="text-align:right">32 MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DirectDbSetString&lt;/td>
&lt;td style="text-align:right">81.04 ms&lt;/td>
&lt;td style="text-align:right">1.153 ms&lt;/td>
&lt;td style="text-align:right">0.963 ms&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">6000.00&lt;/td>
&lt;td style="text-align:right">2000.00&lt;/td>
&lt;td style="text-align:right">1000.00&lt;/td>
&lt;td style="text-align:right">33 MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>StringSetSelect&lt;/td>
&lt;td style="text-align:right">92.20 ms&lt;/td>
&lt;td style="text-align:right">1.359 ms&lt;/td>
&lt;td style="text-align:right">1.271 ms&lt;/td>
&lt;td style="text-align:right">1.14&lt;/td>
&lt;td style="text-align:right">5666.67&lt;/td>
&lt;td style="text-align:right">2000.00&lt;/td>
&lt;td style="text-align:right">833.33&lt;/td>
&lt;td style="text-align:right">33 MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>StringSetToSimple&lt;/td>
&lt;td style="text-align:right">92.26 ms&lt;/td>
&lt;td style="text-align:right">1.789 ms&lt;/td>
&lt;td style="text-align:right">1.915 ms&lt;/td>
&lt;td style="text-align:right">1.14&lt;/td>
&lt;td style="text-align:right">5666.67&lt;/td>
&lt;td style="text-align:right">2000.00&lt;/td>
&lt;td style="text-align:right">833.33&lt;/td>
&lt;td style="text-align:right">33 MB&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>For the &lt;code>non-string values, using DynamicContext is faster&lt;/code>, while using roughly the same memory, especially with more records. For &lt;code>string values DynamicContext is slower&lt;/code> - but with the tradeoff of it being more dynamic.&lt;/p>
&lt;hr>
&lt;h2 id="closing">Closing&lt;/h2>
&lt;p>The post outlines solutions to be able to:&lt;/p>
&lt;ul>
&lt;li>Retrieve data into an entity (or collection of entities) without a DbSet, using raw SQL&lt;/li>
&lt;li>Retrieve data into an entity or collection of entities) based on an anonymous object, using raw SQL&lt;/li>
&lt;li>Retrieve data into a simple type without having to define a reference type to use as a DbSet&lt;/li>
&lt;/ul>
&lt;p>The performance of the library is either faster or comparable to using a DbContext, but as always, test and benchmark and make an informed decision in your specific use case.&lt;/p>
&lt;p>Full source code available on &lt;a class="link" href="https://github.com/always-developing/AlwaysDeveloping.EntityFrameworkCore.DynamicContex" target="_blank" rel="noopener"
>Github&lt;/a> and fully functionality package available on &lt;a class="link" href="https://www.nuget.org/packages/AlwaysDeveloping.EntityFrameworkCore.DynamicContext/" target="_blank" rel="noopener"
>NuGet&lt;/a>.&lt;/p></description></item><item><title>Roslyn Analyzer - tips and tricks (Part 5)</title><link>https://always-developing.github.io/p/analyzer-extra/</link><pubDate>Sun, 28 Nov 2021 05:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/analyzer-extra/</guid><description>&lt;p>All posts in the series:&lt;br>
&lt;strong>Part 1:&lt;/strong> &lt;a class="link" href="../analyzer-explained" >Roslyn Analyzer - explained&lt;/a> &lt;br>
&lt;strong>Part 2:&lt;/strong> &lt;a class="link" href="../analyzer-write/" >Roslyn Analyzer - writing an analyzer&lt;/a>&lt;br>
&lt;strong>Part 3:&lt;/strong> &lt;a class="link" href="../analyzer-code-fix/" >Roslyn Analyzer - writing a code fix&lt;/a>&lt;br>
&lt;strong>Part 4:&lt;/strong> &lt;a class="link" href="../analyzer-test/" >Roslyn Analyzer - testing an analyzer and code fix&lt;/a>&lt;br>
&lt;strong>Part 5:&lt;/strong> Roslyn Analyzer - tips and tricks (this post)&lt;/p>
&lt;p>All code in the posts, including the sample project and working &lt;code>analyzer&lt;/code> and &lt;code>code fix&lt;/code> are &lt;a class="link" href="https://github.com/always-developing/CodeAnalysis.EntityFrameworkCore.Sample" target="_blank" rel="noopener"
>available on Github&lt;/a>.&lt;/p>
&lt;h2 id="tips-and-tricks">Tips and tricks&lt;/h2>
&lt;p>This post contains a list of tips and tricks, work-around&amp;rsquo;s and other bits of (what I find) useful information to aid in developing &lt;code>analyzers&lt;/code>.&lt;/p>
&lt;hr>
&lt;h3 id="analyzer-tips-and-tricks">Analyzer tips and tricks&lt;/h3>
&lt;h4 id="compatibility">Compatibility&lt;/h4>
&lt;p>If an analyzer is created in Visual Studio 2019 using the &lt;code>Analyzer with Code Fix&lt;/code> project - it will not be initially compatible with Visual Stdio 2022 (or visa versa).&lt;br>
The actual &lt;code>analyzer&lt;/code> and &lt;code>code fix&lt;/code> code itself is compatible (as its .NET Standard 2.0), however the VSIX project is not compatible&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 202;
flex-basis: 485px"
>
&lt;a href="https://always-developing.github.io/p/analyzer-extra/VS2019.png" data-size="326x161">
&lt;img src="https://always-developing.github.io/p/analyzer-extra/VS2019.png"
width="326"
height="161"
srcset="https://always-developing.github.io/p/analyzer-extra/VS2019_hu5c43c60b615a0ba159d8e1629ea1e3e6_8131_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/analyzer-extra/VS2019_hu5c43c60b615a0ba159d8e1629ea1e3e6_8131_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Default Microsoft.VSSDK.BuildTools reference">
&lt;/a>
&lt;figcaption>Default Microsoft.VSSDK.BuildTools reference&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>To have the VSIX project work in Visual Studio 2022, the &lt;code>Microsoft.VSSDK.BuildTools&lt;/code> reference needs to be updated to version 17. However doing so will mean it will no longer be supported in Visual Studio 2019.&lt;/p>
&lt;p>To have the analyzer work in both Visual Studio 2019 and Visual Studio 2022, two VSIX projects need to be created in the solution. One will be for Visual Studio 2019 and have a &lt;code>Microsoft.VSSDK.BuildTools&lt;/code> reference of version &lt;code>15 or 16&lt;/code>, and the other for Visual Studio 2022 with a &lt;code>Microsoft.VSSDK.BuildTools&lt;/code> reference of &lt;code>17&lt;/code>.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 104;
flex-basis: 250px"
>
&lt;a href="https://always-developing.github.io/p/analyzer-extra/MultiVsix.png" data-size="334x320">
&lt;img src="https://always-developing.github.io/p/analyzer-extra/MultiVsix.png"
width="334"
height="320"
srcset="https://always-developing.github.io/p/analyzer-extra/MultiVsix_hue1e907f4b5b1c78fe1d57c945723e628_16210_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/analyzer-extra/MultiVsix_hue1e907f4b5b1c78fe1d57c945723e628_16210_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Visual Studio support">
&lt;/a>
&lt;figcaption>Visual Studio support&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;hr>
&lt;h4 id="syntax-tree">Syntax tree&lt;/h4>
&lt;p>Sometimes when using the &lt;code>Syntax Visualizer&lt;/code>, detailed in the section &lt;a class="link" href="../analyzer-explained" >Writing an analyzer - interrogate the syntax tree&lt;/a>, the tree in the &lt;code>Syntax Visualizer&lt;/code> windows stops refreshing when selecting items in the code, and will appear blank.&lt;/p>
&lt;p>To force a refresh of the window, make a small code change - for example, add a remove a semi-colon in code. This will force the window to refresh and the syntax tree will appear and refresh correctly (until the next time it stops working).&lt;/p>
&lt;hr>
&lt;h4 id="additional-files">Additional files&lt;/h4>
&lt;p>While an &lt;code>analyzer&lt;/code> can inspect non-code files (such as the appsettings.json in the sample), these &amp;ldquo;additional files&amp;rdquo; are not included as part of the Roslyn checks by default. A file has to specifically be marked as an additional file for Roslyn to be able to work with it.&lt;br>
This is done by specifying the files &lt;code>Build Action&lt;/code> to be &lt;code>C# analyzer additional file&lt;/code> on the file&amp;rsquo;s &lt;code>Properties&lt;/code> window in Visual Studio.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 183;
flex-basis: 439px"
>
&lt;a href="https://always-developing.github.io/p/analyzer-extra/AnalyzerFile.png" data-size="454x248">
&lt;img src="https://always-developing.github.io/p/analyzer-extra/AnalyzerFile.png"
width="454"
height="248"
srcset="https://always-developing.github.io/p/analyzer-extra/AnalyzerFile_hua0bb48158b6a826be2fcf2c1944be4ca_11029_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/analyzer-extra/AnalyzerFile_hua0bb48158b6a826be2fcf2c1944be4ca_11029_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Appsettings.json build action">
&lt;/a>
&lt;figcaption>Appsettings.json build action&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>When an &lt;code>analyzer&lt;/code> is dependent on the additional file being present, as is the case in the sample analyzer, then a diagnostic can be raised if the additional file cannot be found.&lt;/p>
&lt;p>In the below example, the &lt;code>ADEF002&lt;/code> diagnostic is raised if the &lt;code>appsettings.json&lt;/code> hasn&amp;rsquo;t been included as an additional file - if it doesn&amp;rsquo;t have a build action of &lt;code>C# analyzer additional file&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="c1">// if there is no file to query, then report a diagnostic
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Options&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AdditionalFiles&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="k">null&lt;/span> &lt;span class="p">||&lt;/span>
&lt;span class="p">!&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Options&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AdditionalFiles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Path&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">EndsWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;appsettings.json&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StringComparison&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">OrdinalIgnoreCase&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">diagnostic002&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Diagnostic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rule002&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">None&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ReportDiagnostic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">diagnostic002&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h3 id="code-fix-tips-and-tricks">Code fix tips and tricks&lt;/h3>
&lt;h4 id="modify-non-code">Modify non-code&lt;/h4>
&lt;p>While it is possible to have an &lt;code>analyzer&lt;/code> inspect non-code files (such as the appsettings.json in the sample), it is not possible to have the &lt;code>code fix&lt;/code> modify these files. The &lt;code>code fix&lt;/code> is only able to modify the syntax tree, which a non-code file will obviously not have.&lt;/p>
&lt;p>A solution to this is the demonstrated in the sample &lt;code>analyzer&lt;/code>. Diagnostic &lt;code>ADEF003&lt;/code> ensures that the connection string name specified in code exists in the appsettings.json file. As an &lt;code>analyzer&lt;/code> can inspect the json file, it is successfully able to trigger the diagnostic, however the associated &lt;code>code fix&lt;/code> is unable to modify the json.&lt;/p>
&lt;p>Instead, a comment snippet is inserted above the offending code block, with the correct json, and a message informing the developer what to do with it.&lt;/p>
&lt;p>In the below example, no connection string called &lt;em>SampleDatabase&lt;/em> was present in the appsettings.json, so a diagnostic was triggered.&lt;/p>
&lt;p>Before &lt;code>code fix&lt;/code> has been applied:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="p">.&lt;/span>&lt;span class="n">ConfigureServices&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">services&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">services&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddDbContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">SampleContext&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">UseSqlite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Configuration&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetConnectionString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SampleDatabase&amp;#34;&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="p">).&lt;/span>&lt;span class="n">Build&lt;/span>&lt;span class="p">();&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>After &lt;code>code fix&lt;/code> has been applied:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="p">.&lt;/span>&lt;span class="n">ConfigureServices&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">services&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">services&lt;/span>
&lt;span class="cm">/* Ensure the below JSON snippet exists in appsettings.json.
&lt;/span>&lt;span class="cm"> {
&lt;/span>&lt;span class="cm"> &amp;#34;ConnectionStrings&amp;#34;: {
&lt;/span>&lt;span class="cm"> &amp;#34;SampleDatabase&amp;#34;: &amp;#34;Data Source=LocalDatabase.db&amp;#34;
&lt;/span>&lt;span class="cm"> }
&lt;/span>&lt;span class="cm"> }
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddDbContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">SampleContext&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">UseSqlite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Configuration&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetConnectionString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SampleDatabase&amp;#34;&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="p">).&lt;/span>&lt;span class="n">Build&lt;/span>&lt;span class="p">();&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>This &lt;code>code fix&lt;/code> however does not fully resolve the diagnostic. Only once the json snippet has been manually copied in the appsettings.json file by the developer will the &lt;code>analyzer&lt;/code> stop reporting the diagnostic.&lt;/p>
&lt;hr>
&lt;h3 id="unit-test-tips-and-tricks">Unit test tips and tricks&lt;/h3>
&lt;h4 id="vsix-debugging">VSIX debugging&lt;/h4>
&lt;p>Using the VSIX project, which is part of the &lt;code>analyzer&lt;/code> template, is a critical tool to test and debug an &lt;code>analyzer&lt;/code>, and see how it performs in an Visual Studio instance (vs running units tests to ensure the functionality is correct). However occasionally when running the VSIX project, the updated version of the &lt;code>analyzer&lt;/code> does get installed/loaded into the debugging Visual Studio instance.&lt;/p>
&lt;p>Performing one of these two options usually resolves the issue:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Explicitly build/rebuild each project in the &lt;code>analyzer&lt;/code> solution before running the &lt;code>analyzer&lt;/code> VSIX project.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Delete the cache for the debug Visual Studio instance. The cache is stored in the user folder: &lt;code>C:\Users\username\AppData\Local\Microsoft\VisualStudio\xxxxRoslyn&lt;/code>.&lt;/p>
&lt;p>Deleting this cache will removing any settings, cache for the debug Visual Studio instance, and the next time its opened it will be as if it was the first time, and the updated version of the extension will be installed for the &amp;ldquo;first time&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="series-finale">Series Finale&lt;/h3>
&lt;p>The series of posts have hopefully given enough base information to give a basic understand of what an &lt;code>analyzer&lt;/code> and &lt;code>code fix&lt;/code> are, what the various components are and how they fit together, and how they can successfully be tested using a number of methods.&lt;/p>
&lt;p>The source code for full working &lt;code>analyzer&lt;/code> and &lt;code>code fix&lt;/code>, as well as the sample application is all &lt;a class="link" href="https://github.com/always-developing/CodeAnalysis.EntityFrameworkCore.Sample" target="_blank" rel="noopener"
>available on Github&lt;/a>.&lt;/p></description></item><item><title>Roslyn Analyzer - testing an analyzer and code fix (Part 4)</title><link>https://always-developing.github.io/p/analyzer-test/</link><pubDate>Sat, 27 Nov 2021 04:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/analyzer-test/</guid><description>&lt;p>All posts in the series:&lt;br>
&lt;strong>Part 1:&lt;/strong> &lt;a class="link" href="../analyzer-explained" >Roslyn Analyzer - explained&lt;/a> &lt;br>
&lt;strong>Part 2:&lt;/strong> &lt;a class="link" href="../analyzer-write/" >Roslyn Analyzer - writing an analyzer&lt;/a>&lt;br>
&lt;strong>Part 3:&lt;/strong> &lt;a class="link" href="../analyzer-code-fix/" >Roslyn Analyzer - writing a code fix&lt;/a>&lt;br>
&lt;strong>Part 4:&lt;/strong> Roslyn Analyzer - testing an analyzer and code fix (this post)&lt;br>
&lt;strong>Part 5:&lt;/strong> &lt;a class="link" href="../analyzer-extra/" >Roslyn Analyzer - tips and tricks&lt;/a>&lt;/p>
&lt;p>All code in the posts, including the sample project and working &lt;code>analyzer&lt;/code> and &lt;code>code fix&lt;/code> are &lt;a class="link" href="https://github.com/always-developing/CodeAnalysis.EntityFrameworkCore.Sample" target="_blank" rel="noopener"
>available on Github&lt;/a>.&lt;/p>
&lt;h2 id="analyzer-unit-test-introduction">Analyzer unit test introduction&lt;/h2>
&lt;p>The previous posts in the series detail how to &lt;a class="link" href="../analyzer-write" >write an analyzer&lt;/a> and &lt;a class="link" href="../analyzer-code-fix" >code fix&lt;/a>.&lt;/p>
&lt;p>This post details writing unit tests to help ensure the stability of the code, but also aid in the development process by providing a quick and easy way to debug and test the &lt;code>analyzer&lt;/code> and &lt;code>code fix&lt;/code>.&lt;/p>
&lt;hr>
&lt;h2 id="why-write-unit-tests">Why write unit tests?&lt;/h2>
&lt;p>&lt;code>Analyzers&lt;/code> are not simple to test - to &amp;ldquo;run&amp;rdquo; an analyzer, a new instance of Visual Studio starts up with the &lt;code>analyzer&lt;/code> installed as an extension. An application (which has the code needed to test the &lt;code>analyzer&lt;/code>) then needs to be opened to cause the &lt;code>analyzer&lt;/code> trigger.&lt;br>
While this definitely has a place when testing (hence the suggestion of &lt;a class="link" href="../analyzer-write/#a-sample-application" >creating a sample application for the analyzer&lt;/a>), this process to often be inconsistent, with the updated &lt;code>analyzer&lt;/code> not always being installed in the new instance of Visual Studio, or the breakpoints in the &lt;code>analyzer&lt;/code> not being hit.&lt;/p>
&lt;p>Unit tests provide a convenient and comparatively quick way to debug and iterate while coding the &lt;code>analyzer&lt;/code> and &lt;code>code fix&lt;/code>.&lt;/p>
&lt;p>Luckily, writing unit tests are fairly straight forward. In addition a test framework is available for the testing of &lt;code>analyzers&lt;/code> and &lt;code>code fixes&lt;/code>.&lt;/p>
&lt;hr>
&lt;h2 id="default-unit-tests">Default unit tests&lt;/h2>
&lt;h3 id="wrapper-classes">Wrapper classes&lt;/h3>
&lt;p>As part of the &lt;code>analyzer&lt;/code> template, a unit test project is automatically created.&lt;br>
This template has:&lt;/p>
&lt;ul>
&lt;li>A sample &lt;code>analyzer&lt;/code> test, using the a VerifyCS.&lt;em>VerifyAnalyzerAsync&lt;/em> method&lt;/li>
&lt;li>A sample verify &lt;code>code fix&lt;/code> test, using a VerifyCS.&lt;em>VerifyCodeFixAsync&lt;/em> method&lt;/li>
&lt;/ul>
&lt;p>The &lt;em>VerifyCS&lt;/em> class is an auto-generated class, which wraps a lot of the complexity of the underlying testing framework classes - while this is great when first working with &lt;code>analyzers&lt;/code> and is easy to use for simple use cases, more complex use cases require more configuration and its generally easier to just use the underlying wrapped classes directly.&lt;/p>
&lt;p>Using the &lt;em>VerifyCS&lt;/em> class to test an &lt;code>analyzer&lt;/code> is straightforward though:&lt;/p>
&lt;ol>
&lt;li>Define a block of code as a string&lt;/li>
&lt;li>Define the list of diagnostic result the code should produce (and the location in the code)&lt;/li>
&lt;li>Call &lt;em>VerifyCS.VerifyAnalyzerAsync()&lt;/em>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5">5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6">6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7">7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8">8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9">9&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="c1">//No diagnostics expected to show up
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="na">[TestMethod]&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">async&lt;/span> &lt;span class="n">Task&lt;/span> &lt;span class="n">TestMethod1&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">test&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">@&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// No code, so no diagnostic will be triggered
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="n">VerifyCS&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VerifyAnalyzerAsync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>Using the &lt;em>VerifyCS&lt;/em> class to test a &lt;code>code fix&lt;/code>:&lt;/p>
&lt;ol>
&lt;li>Define a initial state block of code as a string&lt;/li>
&lt;li>Define the list of diagnostic result the code should produce (and the location in the code)&lt;/li>
&lt;li>Define a final state block of code as a string (what the code would look like after the code fix has been applied)&lt;/li>
&lt;li>Call &lt;em>VerifyCS.VerifyCodeFixAsync()&lt;/em>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-21">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-22">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-22">22&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-23">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-23">23&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-24">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-24">24&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-25">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-25">25&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-26">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-26">26&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-27">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-27">27&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-28">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-28">28&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-29">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-29">29&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-30">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-30">30&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-31">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-31">31&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-32">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-32">32&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-33">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-33">33&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-34">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-34">34&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-35">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-35">35&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-36">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-36">36&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-37">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-37">37&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-38">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-38">38&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-39">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-39">39&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-40">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-40">40&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-41">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-41">41&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-42">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-42">42&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-43">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-43">43&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="c1">//Diagnostic and CodeFix both triggered and checked for
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="na"> [TestMethod]&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">async&lt;/span> &lt;span class="n">Task&lt;/span> &lt;span class="n">TestMethod2&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">// define the initial code block
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">var&lt;/span> &lt;span class="n">test&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">@&amp;#34;
&lt;/span>&lt;span class="s">using System;
&lt;/span>&lt;span class="s">using System.Collections.Generic;
&lt;/span>&lt;span class="s">using System.Linq;
&lt;/span>&lt;span class="s">using System.Text;
&lt;/span>&lt;span class="s">using System.Threading.Tasks;
&lt;/span>&lt;span class="s">using System.Diagnostics;
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s">namespace ConsoleApplication1
&lt;/span>&lt;span class="s">{
&lt;/span>&lt;span class="s"> class {|#0:TypeName|}
&lt;/span>&lt;span class="s"> {
&lt;/span>&lt;span class="s"> }
&lt;/span>&lt;span class="s">}&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// define the final state code block
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">var&lt;/span> &lt;span class="n">fixtest&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">@&amp;#34;
&lt;/span>&lt;span class="s">using System;
&lt;/span>&lt;span class="s">using System.Collections.Generic;
&lt;/span>&lt;span class="s">using System.Linq;
&lt;/span>&lt;span class="s">using System.Text;
&lt;/span>&lt;span class="s">using System.Threading.Tasks;
&lt;/span>&lt;span class="s">using System.Diagnostics;
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s">namespace ConsoleApplication1
&lt;/span>&lt;span class="s">{
&lt;/span>&lt;span class="s"> class TYPENAME
&lt;/span>&lt;span class="s"> {
&lt;/span>&lt;span class="s"> }
&lt;/span>&lt;span class="s">}&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Expected diagnostics to be triggered
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">var&lt;/span> &lt;span class="n">expected&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">VerifyCS&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Diagnostic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Analyzer1&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">WithLocation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">WithArguments&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;TypeName&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Verify the diagnostic will be triggered,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// and that the code fix applies successfully
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="n">VerifyCS&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VerifyCodeFixAsync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expected&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fixtest&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h3 id="complex-use-cases">Complex use cases&lt;/h3>
&lt;p>There are a few use cases where I&amp;rsquo;ve found &lt;strong>NOT&lt;/strong> using &lt;em>VerifyCS&lt;/em> easier (although it is still possible to use it):&lt;/p>
&lt;ul>
&lt;li>If the code block requires external dependencies to compile (such as a NuGet package)&lt;/li>
&lt;li>If the code block is using some of the .NET 6 features (such as the minimal startup with the implicit main method)&lt;/li>
&lt;li>If the &lt;code>analyzer&lt;/code> requires additional files, such as an appsettings.json file.&lt;/li>
&lt;li>If the build config (or any preprocessor symbol) makes a different to the analyzer&lt;/li>
&lt;/ul>
&lt;p>For these reasons, I generally &lt;code>do not use VerifyCS&lt;/code>, but use the underlying framework classes directly instead.&lt;/p>
&lt;hr>
&lt;h2 id="enhanced-unit-tests">Enhanced unit tests&lt;/h2>
&lt;p>The steps for using the framework classes directly (&lt;em>CSharpAnalyzerTest&lt;/em>) are similar to using the wrapper class:&lt;/p>
&lt;p>Using the &lt;em>CSharpAnalyzerTest&lt;/em> class to test an analyzer:&lt;/p>
&lt;ol>
&lt;li>Define a block of code as a string&lt;/li>
&lt;li>Define the list of diagnostic result the code should produce (and the location in the code)&lt;/li>
&lt;li>Define any additional configuration&lt;/li>
&lt;li>Call &lt;em>RunAsync()&lt;/em>&lt;/li>
&lt;/ol>
&lt;p>To test a code fix using &lt;em>CSharpCodeFixTest&lt;/em>:&lt;/p>
&lt;ol>
&lt;li>Define a initial state block of code as a string&lt;/li>
&lt;li>Define the list of diagnostic result the code should produce (and the location in the code)&lt;/li>
&lt;li>Define a final state block of code as a string (what the code would look like after the code fix has been applied)&lt;/li>
&lt;li>Define any additional configuration for both the initial and final state&lt;/li>
&lt;li>Call &lt;em>RunAsync()&lt;/em>&lt;/li>
&lt;/ol>
&lt;p>Lets go through these steps in details in the next sections.&lt;/p>
&lt;hr>
&lt;h3 id="defining-the-code">Defining the code&lt;/h3>
&lt;h4 id="analyzer-test-code">Analyzer test code&lt;/h4>
&lt;p>Although the analyzer and code fix test use different test classes, the setup is very similar.&lt;/p>
&lt;p>With the configuration for an &lt;code>analyzer&lt;/code>, the &lt;em>TestState&lt;/em> is set - the &lt;strong>sourceCode&lt;/strong> variable is a string with C# code as text.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5">5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6">6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7">7&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="kt">var&lt;/span> &lt;span class="n">analyzerTest&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CSharpAnalyzerTest&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DevOnlyMigrateAnalyzer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MSTestVerifier&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">TestState&lt;/span> &lt;span class="p">=&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">Sources&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">sourceCode&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;h4 id="code-fix-test-code">Code fix test code&lt;/h4>
&lt;p>With the configuration for a &lt;code>code fix&lt;/code>, the &lt;em>TestState&lt;/em> is set, as well as the source code for the expected &lt;em>FinalState&lt;/em>. The final state is the expected code after the code fix has been applied. Again, both &lt;strong>sourceCode&lt;/strong> and &lt;strong>fixedCode&lt;/strong> are C# code as text.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="kt">var&lt;/span> &lt;span class="n">analyzerFix&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CSharpCodeFixTest&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DevOnlyMigrateAnalyzer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">DevOnlyMigrateCodeFixProvider&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MSTestVerifier&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">TestState&lt;/span> &lt;span class="p">=&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">Sources&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">sourceCode&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="n">FixedState&lt;/span> &lt;span class="p">=&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">Sources&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">fixCode&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;hr>
&lt;h3 id="defining-the-diagnostics">Defining the diagnostics&lt;/h3>
&lt;p>Next up is to define the diagnostics we expect the code to trigger.&lt;/p>
&lt;h4 id="analyzer-diagnostics">Analyzer diagnostics&lt;/h4>
&lt;p>With an &lt;code>analyzer&lt;/code> test, the diagnostic id, severity and location of the expected diagnostics is specified:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5">5&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="n">analyzerTest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ExpectedDiagnostics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">DiagnosticResult&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;ADEF001&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Microsoft&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CodeAnalysis&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DiagnosticSeverity&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Warning&lt;/span>
&lt;span class="p">).&lt;/span>&lt;span class="n">WithLocation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">18&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">27&lt;/span>&lt;span class="p">));&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;h4 id="code-fix-diagnostics">Code fix diagnostics&lt;/h4>
&lt;p>With a &lt;code>code fix&lt;/code>, if the expectation is that there will still be diagnostics after the code fix has been applied, the ExpectedDiagnostics is set on the &lt;strong>FixedState&lt;/strong>:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5">5&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="n">analyzerFix&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">FixedState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ExpectedDiagnostics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">DiagnosticResult&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;ADEF001&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Microsoft&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CodeAnalysis&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DiagnosticSeverity&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Warning&lt;/span>
&lt;span class="p">).&lt;/span>&lt;span class="n">WithLocation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">18&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">27&lt;/span>&lt;span class="p">));&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>No or multiple expected diagnostics can be specified.&lt;/p>
&lt;hr>
&lt;h3 id="additional-configuration">Additional configuration&lt;/h3>
&lt;h4 id="net60-support">.NET6.0 support&lt;/h4>
&lt;p>If the &lt;strong>sourceCode&lt;/strong> (a string representation of C# code) contains any features specific to .NET6.0 (such as the no longer required Main method), the setup below needs to be done.&lt;/p>
&lt;p>This specifies to the testing framework to include the additional package as part of the code when executing the analyzer:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="kt">var&lt;/span> &lt;span class="n">analyzerTest&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CSharpAnalyzerTest&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">ConfigConnectionStringAnalyzer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">MSTestVerifier&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">TestState&lt;/span> &lt;span class="p">=&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">Sources&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">sourceCode&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="n">ReferenceAssemblies&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ReferenceAssemblies&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;net6.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">PackageIdentity&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;Microsoft.NETCore.App.Ref&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;6.0.0&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Combine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ref&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;net6.0&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>For a &lt;code>code fix&lt;/code> test, the same needs to be applied to the &lt;strong>FinalState&lt;/strong> if it makes use of the same .NET6.0 specific functionality.&lt;/p>
&lt;h4 id="nuget-packages">Nuget Packages&lt;/h4>
&lt;p>Sometimes additional packages are required for the &lt;em>sourceCode&lt;/em> to successfully compile. In the sample code, for example, the EntityFramework Core references.&lt;/p>
&lt;p>The required package names and version are specified and then added to the &lt;em>TestState&lt;/em>.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-21">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-22">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-22">22&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="c1">// include any nuget packages to reduce the number of errors
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">packages&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">PackageIdentity&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Microsoft.Extensions.Hosting&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;6.0.0&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">PackageIdentity&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Microsoft.Extensions.Configuration&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;6.0.0&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">PackageIdentity&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Microsoft.EntityFrameworkCore&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;6.0.0&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">PackageIdentity&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Microsoft.EntityFrameworkCore.Sqlite&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;6.0.0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ToImmutableArray&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">analyzerTest&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CSharpAnalyzerTest&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DevOnlyMigrateAnalyzer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MSTestVerifier&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">TestState&lt;/span> &lt;span class="p">=&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">Sources&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">sourceCode&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="n">ReferenceAssemblies&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ReferenceAssemblies&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;net6.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">PackageIdentity&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;Microsoft.NETCore.App.Ref&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;6.0.0&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Combine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ref&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;net6.0&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddPackages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">packages&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;blockquote>
&lt;div>
&lt;div style="width: 5%; float: left; vertical-align: middle; padding-right: 60px;">
&lt;i class="inline-svg" >&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-info-circle" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#00abfb" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;circle cx="12" cy="12" r="9" />
&lt;line x1="12" y1="8" x2="12.01" y2="8" />
&lt;polyline points="11 12 12 12 12 16 13 16" />
&lt;/svg>&lt;/i>
&lt;/div>
&lt;div>
&lt;p>&lt;p>Adding the packages to the tests is NOT required - if not added, the code simply wont compile, with the error: &lt;strong>&lt;em>The type or namespace name &amp;lsquo;XXX&amp;rsquo; does not exist in the namespace&lt;/em>&lt;/strong> &amp;hellip;&lt;br>
These errors could be added to the &lt;em>ExpectedDiagnostics&lt;/em> collection and as the test now expects these to occur, the test will pass.&lt;/p>
&lt;p>However the easier and more complete solution, is to rather just add the required packages instead of trying to cater for diagnostics not related to the &lt;code>analyzer&lt;/code> or &lt;code>code fix&lt;/code> being tested.&lt;/p>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/blockquote>
&lt;h4 id="additional-files">Additional files&lt;/h4>
&lt;p>Sometimes an analyzer will require additional files to successfully perform its function - such as checking the contents of the appsettings.json. To successfully be able to test this, additional files (names, and content) can be configured as part of the test.&lt;/p>
&lt;p>This is done on the &lt;em>TestState&lt;/em> or &lt;em>FixedState&lt;/em>:&lt;/p>
&lt;p>In the below sample, an additional file called &lt;code>appsettings.json&lt;/code>, with &lt;code>empty json&lt;/code> contents, is added to the test state.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="n">analyzerTest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">TestState&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AdditionalFiles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="s">&amp;#34;appsettings.json&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;h4 id="build-configuration">Build configuration&lt;/h4>
&lt;p>In some use cases, such as one in the sample, the build configuration of the project makes a difference to how the analyzer performs.&lt;/p>
&lt;p>To specify the build configuration, or any preprocessor symbols, the following is used:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5">5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6">6&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="n">analyzerTest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SolutionTransforms&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WithProjectParseOptions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">CSharpParseOptions&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">WithPreprocessorSymbols&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;DEBUG&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">});&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2 id="next-steps-tips-and-tricks">Next steps: Tips and tricks&lt;/h2>
&lt;p>The next and final &lt;a class="link" href="../analyzer-extra/" >part in the series&lt;/a> will provider some collection of tips and tricks collected while working with &lt;code>analyzers&lt;/code>.&lt;/p>
&lt;h2 id="useful-links">Useful links&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/dotnet/roslyn" target="_blank" rel="noopener"
>Roslyn repository&lt;/a>&lt;br>
&lt;a class="link" href="https://github.com/always-developing/CodeAnalysis.EntityFrameworkCore.Sample" target="_blank" rel="noopener"
>Sample analyzer and code fix repository&lt;/a>&lt;/p></description></item><item><title>Roslyn Analyzer - writing the code fix (Part 3)</title><link>https://always-developing.github.io/p/analyzer-code-fix/</link><pubDate>Fri, 26 Nov 2021 03:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/analyzer-code-fix/</guid><description>&lt;p>All posts in the series:&lt;br>
&lt;strong>Part 1:&lt;/strong> &lt;a class="link" href="../analyzer-explained" >Roslyn Analyzer - explained&lt;/a> &lt;br>
&lt;strong>Part 2:&lt;/strong> &lt;a class="link" href="../analyzer-write/" >Roslyn Analyzer - writing an analyzer&lt;/a>&lt;br>
&lt;strong>Part 3:&lt;/strong> Roslyn Analyzer - writing a code fix (this post)&lt;br>
&lt;strong>Part 4:&lt;/strong> &lt;a class="link" href="../analyzer-test/" >Roslyn Analyzer - testing an analyzer and code fix&lt;/a>&lt;br>
&lt;strong>Part 5:&lt;/strong> &lt;a class="link" href="../analyzer-extra/" >Roslyn Analyzer - tips and tricks&lt;/a>&lt;/p>
&lt;p>All code in the posts, including the sample project and working &lt;code>analyzer&lt;/code> and &lt;code>code fix&lt;/code> are &lt;a class="link" href="https://github.com/always-developing/CodeAnalysis.EntityFrameworkCore.Sample" target="_blank" rel="noopener"
>available on Github&lt;/a>.&lt;/p>
&lt;h2 id="code-fix-introduction">Code fix introduction&lt;/h2>
&lt;p>As detailed in the &lt;a class="link" href="../analyzer-write" >previous post in the series&lt;/a>, now that there is a working &lt;code>analyzer&lt;/code> which accurately reports diagnostic information to Roslyn, the next step is to write the &lt;code>code fix&lt;/code> to resolve the diagnostic.&lt;/p>
&lt;p>Not all &lt;code>analyzers&lt;/code> will have a &lt;code>code fix&lt;/code> - the resolution might be out of the scope of Roslyn to resolve, in which case the diagnostic should info the developer how to resolve the report.&lt;/p>
&lt;hr>
&lt;h2 id="coding-the-code-fix">Coding the code fix&lt;/h2>
&lt;h3 id="code-fix-setup">Code fix setup&lt;/h3>
&lt;p>First step is to configure the &lt;code>code fix&lt;/code> so it applies to a specific diagnostic (or multiple diagnostics)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-17">17&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="na">[ExportCodeFixProvider(LanguageNames.CSharp,
&lt;/span>&lt;span class="na"> Name = nameof(DevOnlyMigrateCodeFixProvider)), Shared]&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">DevOnlyMigrateCodeFixProvider&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">CodeFixProvider&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">sealed&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="n">ImmutableArray&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">FixableDiagnosticIds&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">get&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">ImmutableArray&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DevOnlyMigrateAnalyzer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DiagnosticId&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">sealed&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="n">FixAllProvider&lt;/span> &lt;span class="n">GetFixAllProvider&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">WellKnownFixAllProviders&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">BatchFixer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>
&lt;span class="p">.&lt;/span>
&lt;span class="p">.&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>&lt;strong>Line 3&lt;/strong>: The class must inherit from &lt;em>CodeFixProvider&lt;/em>&lt;/li>
&lt;li>&lt;strong>Line 5-8&lt;/strong>: The overridden &lt;em>FixableDiagnosticIds&lt;/em> returns a list of the diagnostic ids this &lt;code>code fix&lt;/code> will resolve&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="register-the-code-fix">Register the code fix&lt;/h3>
&lt;p>The next step is to register the code fix with Roslyn - this is done by overriding the &lt;em>RegisterCodeFixesAsync&lt;/em> method.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-20">20&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">sealed&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="k">async&lt;/span> &lt;span class="n">Task&lt;/span> &lt;span class="n">RegisterCodeFixesAsync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CodeFixContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetSyntaxRootAsync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CancellationToken&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ConfigureAwait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">diagnostic&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Diagnostics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">First&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">diagnosticSpan&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">diagnostic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SourceSpan&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">declaration&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">FindToken&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">diagnosticSpan&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Start&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">Parent&lt;/span>&lt;span class="p">.&lt;/span>
&lt;span class="n">AncestorsAndSelf&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">OfType&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">InvocationExpressionSyntax&lt;/span>&lt;span class="p">&amp;gt;().&lt;/span>&lt;span class="n">First&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Register a code action that will invoke the fix.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">RegisterCodeFix&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">CodeAction&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">equivalenceKey&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">DevOnlyMigrateAnalyzer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DiagnosticId&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">title&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Surround with correct #if directive&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">createChangedDocument&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="n">InsertIfDirectiveAsync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Document&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">declaration&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">diagnostic&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>&lt;strong>Lines 3-4&lt;/strong>: Gets the entire syntax tree from the context&lt;/li>
&lt;li>&lt;strong>Lines 6-7&lt;/strong>: Get the first diagnostic reported, and get its Span (the location within the root syntax tree)&lt;/li>
&lt;li>&lt;strong>Lines 9-10&lt;/strong>: Find the syntax node at the location of the diagnostic&lt;/li>
&lt;li>&lt;strong>Lines 13-19&lt;/strong>: Register the code fix:
&lt;ul>
&lt;li>&lt;strong>Line 15&lt;/strong>: Register the specific diagnostic id&lt;/li>
&lt;li>&lt;strong>Line 16&lt;/strong>: The text which appears in the quick action menu&lt;/li>
&lt;li>&lt;strong>Lines 17-19&lt;/strong>: The method to call which will handle altering the document&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="alter-the-syntax-tree">Alter the syntax tree&lt;/h3>
&lt;p>A &lt;code>code fix&lt;/code> consists of taking the original document (which contains the full context tree), modifying various nodes in the tree to reflect how the fixed code should look, and then returning the updated document.&lt;/p>
&lt;p>For the sample &lt;code>analyzer&lt;/code>, this is done in &lt;em>InsertIfDirectiveAsync&lt;/em>, the method registered in the previous step:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-21">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-22">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-22">22&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-23">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-23">23&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-24">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-24">24&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-25">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-25">25&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-26">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-26">26&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-27">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-27">27&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-28">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-28">28&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-29">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-29">29&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-30">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-30">30&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-31">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-31">31&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-32">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-32">32&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-33">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-33">33&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-34">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-34">34&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-35">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-35">35&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-36">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-36">36&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-37">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-37">37&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-38">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-38">38&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-39">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-39">39&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-40">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-40">40&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-41">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-41">41&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-42">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-42">42&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-43">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-43">43&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-44">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-44">44&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-45">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-45">45&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-46">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-46">46&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-47">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-47">47&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-48">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-48">48&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">private&lt;/span> &lt;span class="k">async&lt;/span> &lt;span class="n">Task&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Document&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">InsertIfDirectiveAsync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Document&lt;/span> &lt;span class="n">document&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">InvocationExpressionSyntax&lt;/span> &lt;span class="n">invocationExpr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CancellationToken&lt;/span> &lt;span class="n">cancellationToken&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">memberAccessExpr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">invocationExpr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Expression&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">MemberAccessExpressionSyntax&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">originalRoot&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="n">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetSyntaxRootAsync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cancellationToken&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">statement&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">GetStatement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">invocationExpr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// get the closest If directive
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">var&lt;/span> &lt;span class="n">closestIfDirective&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">CodeAnalysisHelper&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetClosestIfDirective&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">memberAccessExpr&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">originalRoot&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// if there was one
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">closestIfDirective&lt;/span> &lt;span class="p">!=&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">// work out the replacement directive and replace
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">var&lt;/span> &lt;span class="n">replacementIfDirective&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">SyntaxFactory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">IfDirectiveTrivia&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">SyntaxFactory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ParseExpression&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">$&amp;#34; DEBUG{Environment.NewLine}&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="k">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">true&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">replacementIfDirectiveList&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">SyntaxFactory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">TriviaList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">SyntaxTrivia&lt;/span>&lt;span class="p">[]&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">SyntaxFactory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Trivia&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">replacementIfDirective&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">ifDirectiveNode&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">statement&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">FindNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">closestIfDirective&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Span&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ifDirectiveNode&lt;/span> &lt;span class="p">!=&lt;/span> &lt;span class="k">null&lt;/span> &lt;span class="p">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">ifDirectiveNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">HasLeadingTrivia&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">newIfDirectiveNode&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ifDirectiveNode&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">WithLeadingTrivia&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">replacementIfDirectiveList&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">newReplacementStatement&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">statement&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ReplaceNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ifDirectiveNode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">newIfDirectiveNode&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">newReplacementRoot&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">originalRoot&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ReplaceNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">statement&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">newReplacementStatement&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WithSyntaxRoot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">newReplacementRoot&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">document&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// this branch is if there is no directive
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">var&lt;/span> &lt;span class="n">statementWithDirective&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">InsertNewIfDirective&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">statement&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">newRootWithEndDirective&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">originalRoot&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ReplaceNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">statement&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">statementWithDirective&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WithSyntaxRoot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">newRootWithEndDirective&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>&lt;strong>Lines 1-2&lt;/strong>: The parameters to the method are the full Document, as well as the specific syntax which triggered the diagnostic&lt;/li>
&lt;li>&lt;strong>Line 6&lt;/strong>: A helper method is called to get the code statement which &lt;em>invocationExpr&lt;/em> (Migrate method call) is part of.&lt;br>
The statement is the larger code block containing the &lt;em>invocationExpr&lt;/em> : _context?.Database.Migrate()&lt;/li>
&lt;li>&lt;strong>Lines 9-10&lt;/strong>: A helper method is called to get the closest #if directive which occurs before the &lt;em>invocationExpr&lt;/em> location&lt;/li>
&lt;li>&lt;strong>Lines 13-39&lt;/strong>: This handles replacing the existing #if directive with a version which has the correct condition
&lt;ul>
&lt;li>&lt;strong>Lines 16-23&lt;/strong>: Builds the replacement trivia: &lt;code>#if DEBUG&lt;/code>&lt;/li>
&lt;li>&lt;strong>Line 25&lt;/strong>: Find the existing trivia in the statement node&lt;/li>
&lt;li>&lt;strong>Lines 29-34&lt;/strong>: Replaces the text in the #if directive, then replaced the directive in the statement with the new directive, then replaced the statement in the root with the new statement&lt;/li>
&lt;li>&lt;strong>Lines 36&lt;/strong>: Return the document with the new syntax root&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Lines 43-47&lt;/strong>: This handles inserting a new #if directive into the statement (InsertNewIfDirective method), and then returns the document with the newly inserted directive.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="applying-the-code-fix">Applying the code fix&lt;/h3>
&lt;p>Nothing more is required - Visual Studio and Roslyn will automatically call the &lt;code>code fix&lt;/code> method to:&lt;/p>
&lt;ol>
&lt;li>Give a preview of the fix being applied when the cursor is held over the quick action menu item.&lt;/li>
&lt;li>Apply the fix when the quick action menu item is clicked.&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 278;
flex-basis: 667px"
>
&lt;a href="https://always-developing.github.io/p/analyzer-code-fix/FixPreview.png" data-size="690x248">
&lt;img src="https://always-developing.github.io/p/analyzer-code-fix/FixPreview.png"
width="690"
height="248"
srcset="https://always-developing.github.io/p/analyzer-code-fix/FixPreview_hu4cab6ce6ea1db54dbb70da6bc5a61d25_37377_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/analyzer-code-fix/FixPreview_hu4cab6ce6ea1db54dbb70da6bc5a61d25_37377_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="The code fix preview">
&lt;/a>
&lt;figcaption>The code fix preview&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;hr>
&lt;h2 id="next-steps-testing-the-analyzer-and-code-fix">Next steps: Testing the analyzer and code fix&lt;/h2>
&lt;p>Next up, &lt;a class="link" href="../analyzer-test/" >part 4 in the series&lt;/a> will detail how to test the custom &lt;code>analyzer&lt;/code> and associated &lt;code>code fix&lt;/code>. This includes information on using the analyzer &lt;code>unit tests infrastructure&lt;/code> to assist with development, as well as using the &lt;code>VSIX&lt;/code> project.&lt;/p>
&lt;h2 id="useful-links">Useful links&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/dotnet/roslyn" target="_blank" rel="noopener"
>Roslyn repository&lt;/a>&lt;br>
&lt;a class="link" href="https://github.com/always-developing/CodeAnalysis.EntityFrameworkCore.Sample" target="_blank" rel="noopener"
>Sample analyzer and code fix repository&lt;/a>&lt;/p></description></item><item><title>Roslyn Analyzer - writing the analyzer (Part 2)</title><link>https://always-developing.github.io/p/analyzer-write/</link><pubDate>Thu, 25 Nov 2021 02:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/analyzer-write/</guid><description>&lt;p>All posts in the series:&lt;br>
&lt;strong>Part 1:&lt;/strong> &lt;a class="link" href="../analyzer-explained" >Roslyn Analyzer - explained&lt;/a> &lt;br>
&lt;strong>Part 2:&lt;/strong> Roslyn Analyzer - writing an analyzer (this post)&lt;br>
&lt;strong>Part 3:&lt;/strong> &lt;a class="link" href="../analyzer-code-fix/" >Roslyn Analyzer - writing a code fix&lt;/a>&lt;br>
&lt;strong>Part 4:&lt;/strong> &lt;a class="link" href="../analyzer-test/" >Roslyn Analyzer - testing an analyzer and code fix&lt;/a>&lt;br>
&lt;strong>Part 5:&lt;/strong> &lt;a class="link" href="../analyzer-extra/" >Roslyn Analyzer - tips and tricks&lt;/a>&lt;/p>
&lt;p>All code in the posts, including the sample project and working &lt;code>analyzer&lt;/code> and &lt;code>code fix&lt;/code> are &lt;a class="link" href="https://github.com/always-developing/CodeAnalysis.EntityFrameworkCore.Sample" target="_blank" rel="noopener"
>available on Github&lt;/a>.&lt;/p>
&lt;h2 id="analyzer-introduction">Analyzer introduction&lt;/h2>
&lt;p>To recap from the &lt;a class="link" href="../analyzer-explained" >previous post in the series&lt;/a>, an &lt;code>analyzer&lt;/code> is a piece of code which inspects code (C# or Visual Basic) during design and compile time, and based on the results of the inspection, can trigger a &lt;strong>diagnostic&lt;/strong> as an &lt;strong>Error, Warning&lt;/strong> or as &lt;strong>Information&lt;/strong>.&lt;/p>
&lt;p>This post will detail the various parts of the &lt;code>analyzer&lt;/code>, how they fit together, and then explore creating a custom &lt;code>analyzer&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;div>
&lt;div style="width: 5%; float: left; vertical-align: middle; padding-right: 60px;">
&lt;i class="inline-svg" >&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-info-circle" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#00abfb" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;circle cx="12" cy="12" r="9" />
&lt;line x1="12" y1="8" x2="12.01" y2="8" />
&lt;polyline points="11 12 12 12 12 16 13 16" />
&lt;/svg>&lt;/i>
&lt;/div>
&lt;div>
&lt;p>While the samples used in these posts and in the associated &lt;a href="https://github.com/always-developing/CodeAnalysis.EntityFrameworkCore.Sample">Github repository&lt;/a> are working and practical, the code is NOT optimized, and also does not cater for all use cases scenarios and edge cases.&lt;br>
The code should be used as a guide for writing a custom &lt;code>analyzer&lt;/code> and &lt;code>code fix&lt;/code> and not as-is for production use.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="analyzer-solution">Analyzer solution&lt;/h2>
&lt;h3 id="creating-an-analyzer-project">Creating an analyzer project&lt;/h3>
&lt;p>Creating the initial analyzer project is very simple - Visual Studio has a template for it!&lt;br>
When creating a new project in Visual Studio, search for &lt;em>analyzer&lt;/em> and select the C# &lt;em>Analyzer with Code Fix (.NET Standard)&lt;/em> template.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 264;
flex-basis: 633px"
>
&lt;a href="https://always-developing.github.io/p/analyzer-write/1.ProjectSelection.png" data-size="700x265">
&lt;img src="https://always-developing.github.io/p/analyzer-write/1.ProjectSelection.png"
width="700"
height="265"
srcset="https://always-developing.github.io/p/analyzer-write/1.ProjectSelection_hu7c07f03fb5105e408f1eb18f69829091_59864_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/analyzer-write/1.ProjectSelection_hu7c07f03fb5105e408f1eb18f69829091_59864_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="C# Analyzer with Code Fix (.NET Standard) project">
&lt;/a>
&lt;figcaption>C# Analyzer with Code Fix (.NET Standard) project&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>If the project doesn&amp;rsquo;t appear in the list, the .NET Compiler Platform SDK workload is most likely not installed. Modify the Visual Studio installation to confirm and install if required.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 192;
flex-basis: 461px"
>
&lt;a href="https://always-developing.github.io/p/analyzer-write/2.ExtensionDevelopment2.png" data-size="700x364">
&lt;img src="https://always-developing.github.io/p/analyzer-write/2.ExtensionDevelopment2.png"
width="700"
height="364"
srcset="https://always-developing.github.io/p/analyzer-write/2.ExtensionDevelopment2_huf899301865720470f1585aada73b5225_93069_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/analyzer-write/2.ExtensionDevelopment2_huf899301865720470f1585aada73b5225_93069_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=".NET Compiler Platform SDK selection">
&lt;/a>
&lt;figcaption>.NET Compiler Platform SDK selection&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;blockquote>
&lt;div>
&lt;div style="width: 5%; float: left; vertical-align: middle; padding-right: 60px;">
&lt;i class="inline-svg" >&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-info-circle" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#00abfb" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;circle cx="12" cy="12" r="9" />
&lt;line x1="12" y1="8" x2="12.01" y2="8" />
&lt;polyline points="11 12 12 12 12 16 13 16" />
&lt;/svg>&lt;/i>
&lt;/div>
&lt;div>
&lt;p>The various analyzer projects will be created with the target framework of .NET Standard 2.0 for the analyzer specific projects, and .NET Framework 4.7.2 for the VSIX project.&lt;br>
These should remain as is - as Visual Studio was written using .NET Framework, extensions are required to target .NET Standard 2.0 and currently cannot target any later framework.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/blockquote>
&lt;hr>
&lt;h3 id="structure-of-the-solution">Structure of the solution&lt;/h3>
&lt;p>The default analyzer template will create 5 projects as part of the solution (in the order as they appear in the screenshot below):&lt;/p>
&lt;ol>
&lt;li>A project which contains the &lt;code>analyzer&lt;/code> code&lt;/li>
&lt;li>A project which contains the &lt;code>code fix&lt;/code> code&lt;/li>
&lt;li>A project used to create a NuGet package for the analyzer&lt;/li>
&lt;li>A test project containing unit test (which is also invaluable for debugging while developing)&lt;/li>
&lt;li>A VSIX project which creates the Visual Studio extension (also invaluable for testing while developing)&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 343;
flex-basis: 824px"
>
&lt;a href="https://always-developing.github.io/p/analyzer-write/3.SolutionStructure.png" data-size="512x149">
&lt;img src="https://always-developing.github.io/p/analyzer-write/3.SolutionStructure.png"
width="512"
height="149"
srcset="https://always-developing.github.io/p/analyzer-write/3.SolutionStructure_hu9a5cdf6e66cf642e035007ebb17f06f8_14459_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/analyzer-write/3.SolutionStructure_hu9a5cdf6e66cf642e035007ebb17f06f8_14459_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Structure of an analyzer solution (sample folder added manually)">
&lt;/a>
&lt;figcaption>Structure of an analyzer solution (sample folder added manually)&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;hr>
&lt;h2 id="the-analyzer">The analyzer&lt;/h2>
&lt;h3 id="a-sample-application">A sample application&lt;/h3>
&lt;p>Before starting to code the analyzer, a &lt;strong>&lt;em>very strong&lt;/em>&lt;/strong> suggestion is to create a small sample application which contains the scenario to trigger the &lt;code>analyzer&lt;/code>.
This will be very useful when testing, as well as crucial when working out the syntax tree of the code (more on this below).&lt;/p>
&lt;p>This sample project does not have to be at all complicated - the sample project (&lt;a class="link" href="https://github.com/always-developing/CodeAnalysis.EntityFrameworkCore.Sample" target="_blank" rel="noopener"
>available on Github&lt;/a>) just creates a connection to a Sqlite database, and applies a database migration. No other logic.&lt;/p>
&lt;p>Personally I prefer to add the sample to my analyzer solution (useful when using the Syntax Visualizer), but then also create a separate solution which just contains just the sample project (useful when testing the analyzer as an extension).&lt;/p>
&lt;p>See &lt;a class="link" href="../analyzer-explained" >part 1 for a more in depth breakdown&lt;/a> of the the scenarios the custom &lt;code>analyzers&lt;/code> are reporting on.&lt;/p>
&lt;hr>
&lt;h3 id="coding-the-analyzer">Coding the analyzer&lt;/h3>
&lt;h4 id="analyzer-structure">Analyzer structure&lt;/h4>
&lt;p>An analyzer class inherits from the &lt;code>DiagnosticAnalyzer&lt;/code> class, and can be broken down into four parts:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>The diagnostic setup&lt;/strong>: Configure the diagnostic information which appear when the analyzer reports feedback back to the developer&lt;/li>
&lt;li>&lt;strong>Register the action&lt;/strong>: An Action (a method) is registered, along with a specific syntax kind (e.g. MethodInvocations or NamedTypes). The action/method will then be invoked whenever Roslyn encounters a syntax of that kind while running analysis.&lt;/li>
&lt;li>&lt;strong>Interrogate the syntax tree&lt;/strong>: Once Roslyn calls the action/method setup in step 2, the syntax tree/code structure is interrogated to determine if the code is relevant for the &lt;code>analyzer&lt;/code> and does a diagnostic need to be trigger&lt;/li>
&lt;li>&lt;strong>Trigger the diagnostic result&lt;/strong>: The final step is to trigger a diagnostic with Roslyn so the results can be reported back&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h4 id="diagnostic-setup">Diagnostic setup&lt;/h4>
&lt;p>The first step is to setup the diagnostic information, the information which is reported back.&lt;/p>
&lt;p>The template makes use of a resx file to allow for localization, however in the sample code &lt;a class="link" href="https://github.com/always-developing/CodeAnalysis.EntityFrameworkCore.Sample" target="_blank" rel="noopener"
>on Github&lt;/a> as well as in the example below, the resx has been removed and the messages put directly in code.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-19">19&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">DiagnosticId&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;ADEF001&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">Title&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Release build auto-migration&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">MessageFormat&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;It is recommended to only &amp;#34;&lt;/span> &lt;span class="p">+&lt;/span>
&lt;span class="s">&amp;#34;run auto-migrations in development environments&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">Description&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Best practice is to only run &amp;#34;&lt;/span>&lt;span class="p">+&lt;/span>
&lt;span class="s">&amp;#34;auto-migrations in development environments and not &amp;#34;&lt;/span> &lt;span class="p">+&lt;/span>
&lt;span class="s">&amp;#34;in test or production environments - this should be done by a CI/CD pipeline.&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">Category&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Usage&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">DiagnosticDescriptor&lt;/span> &lt;span class="n">rule001&lt;/span> &lt;span class="p">=&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">DiagnosticDescriptor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DiagnosticId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Title&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">MessageFormat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Category&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DiagnosticSeverity&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Warning&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">isEnabledByDefault&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">description&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Description&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="n">ImmutableArray&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DiagnosticDescriptor&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">SupportedDiagnostics&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">ImmutableArray&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rule001&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>&lt;strong>Line 1:&lt;/strong> The unique identifier for the diagnostic being triggered&lt;/li>
&lt;li>&lt;strong>Line 3:&lt;/strong> The title for the diagnostic&lt;/li>
&lt;li>&lt;strong>Line 4:&lt;/strong> The message for the diagnostic&lt;/li>
&lt;li>&lt;strong>Line 11:&lt;/strong> The category for the diagnostic (the type of &lt;code>analyzer&lt;/code> - for example the default template analyzer has a category of &lt;em>Naming&lt;/em>, while the above uses &lt;em>Usage&lt;/em>)&lt;/li>
&lt;li>&lt;strong>Line 13:&lt;/strong> Creates the actual rule using the information defined above&lt;/li>
&lt;li>&lt;strong>Line 14:&lt;/strong> Exposes the rules the &lt;code>analyzer&lt;/code> could potentially report (a single analyzer could trigger multiple types of diagnostic)&lt;/li>
&lt;/ul>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 646;
flex-basis: 1552px"
>
&lt;a href="https://always-developing.github.io/p/analyzer-write/DiagnosticReport.png" data-size="886x137">
&lt;img src="https://always-developing.github.io/p/analyzer-write/DiagnosticReport.png"
width="886"
height="137"
srcset="https://always-developing.github.io/p/analyzer-write/DiagnosticReport_hu058c5f7cdeb080dd72c798839b740e86_11380_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/analyzer-write/DiagnosticReport_hu058c5f7cdeb080dd72c798839b740e86_11380_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="The diagnostic result information displayed in Visual Studio">
&lt;/a>
&lt;figcaption>The diagnostic result information displayed in Visual Studio&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;hr>
&lt;h4 id="register-the-action">Register the action&lt;/h4>
&lt;p>The next step is to register an action to be called when Roslyn finds a the type of code (syntax kind) the analyzer is interested in.&lt;/p>
&lt;p>This is done in the overridden &lt;em>Initialize&lt;/em> method.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5">5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6">6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7">7&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AnalysisContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ConfigureGeneratedCodeAnalysis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GeneratedCodeAnalysisFlags&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">None&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">EnableConcurrentExecution&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">RegisterSyntaxNodeAction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AnalyzeExpression&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SyntaxKind&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">InvocationExpression&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>&lt;strong>Line 3-4:&lt;/strong> Default configuration. For most &lt;code>analyzers&lt;/code> this does not need to be changed&lt;/li>
&lt;li>&lt;strong>Line 6:&lt;/strong>. This is the important line, which registers the &lt;code>AnalyzeExpression&lt;/code> method to be called when Roslyn finds a piece of code which is of type &lt;code>InvocationExpression&lt;/code> (a method call).&lt;/li>
&lt;/ul>
&lt;p>There are a large number of &lt;code>SyntaxKinds&lt;/code> which can be used to trigger a call to the action method.&lt;/p>
&lt;p>The &lt;code>analyzer&lt;/code> is starting to take form, with the details of the rule defined, as well as an action registered, to be called when the &lt;code>syntax kind&lt;/code> in question is found by Roslyn.&lt;/p>
&lt;hr>
&lt;h4 id="interrogate-the-syntax-tree">Interrogate the syntax tree&lt;/h4>
&lt;p>See the &lt;a class="link" href="../analyzer-explained/#a-working-sample-analyzer" >&amp;ldquo;Working Sample Analyzer&amp;rdquo;&lt;/a> section in the previous post for more information regarding what this customer &lt;code>analyzer&lt;/code> is doing. In short though, the &lt;code>analyser&lt;/code> is looking for a very specific method called &lt;em>Migrate&lt;/em> on a parent called &lt;em>Database&lt;/em> (so &lt;em>Database.Migrate()&lt;/em>), which should only be called in debug configuration.&lt;/p>
&lt;p>This is where most of the &lt;code>analyzer&lt;/code> work happens - the syntax node and syntax tree are interrogated to determine if the diagnostic should be triggered or not.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-21">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-22">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-22">22&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-23">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-23">23&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-24">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-24">24&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-25">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-25">25&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-26">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-26">26&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-27">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-27">27&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-28">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-28">28&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-29">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-29">29&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-30">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-30">30&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-31">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-31">31&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-32">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-32">32&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-33">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-33">33&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-34">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-34">34&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-35">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-35">35&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-36">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-36">36&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-37">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-37">37&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-38">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-38">38&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-39">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-39">39&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-40">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-40">40&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-41">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-41">41&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-42">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-42">42&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-43">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-43">43&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-44">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-44">44&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-45">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-45">45&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-46">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-46">46&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-47">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-47">47&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-48">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-48">48&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-49">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-49">49&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-50">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-50">50&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-51">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-51">51&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-52">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-52">52&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">private&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">AnalyzeExpression&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SyntaxNodeAnalysisContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">// We know the node is of type InvocationExpressionSyntax as the callback
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// registration was only for SyntaxKind.InvocationExpression
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">var&lt;/span> &lt;span class="n">invocationExpr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">InvocationExpressionSyntax&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// InvocationExpr.Expression is the method name, the expression before &amp;#34;(&amp;#34;.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// In our case Database.Migrate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">var&lt;/span> &lt;span class="n">memberAccessExpr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">invocationExpr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Expression&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">MemberAccessExpressionSyntax&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">memberAccessExpr&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Get the expression. In our case, Database
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">var&lt;/span> &lt;span class="n">bindingExpression&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">memberAccessExpr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Expression&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">MemberBindingExpressionSyntax&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bindingExpression&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Get the memberAccessExpr name of the expression.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// In our case, Migrate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">var&lt;/span> &lt;span class="n">expressionName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">bindingExpression&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Name&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">IdentifierNameSyntax&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">expressionName&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// If we reach this far, make sure its the Database property
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">expressionName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Identifier&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ToString&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToLower&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">!=&lt;/span> &lt;span class="s">&amp;#34;Database&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ToLower&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Get the memberAccessExpr name of the expression.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// In our case, Migrate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">var&lt;/span> &lt;span class="n">identifierName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">memberAccessExpr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Name&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">IdentifierNameSyntax&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">identifierName&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// check if its the specific method we want to analyze
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">identifierName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Identifier&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ToString&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ToLower&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="s">&amp;#34;Migrate&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ToLower&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">closestIfDirective&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">CodeAnalysisHelper&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetClosestIfDirective&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">memberAccessExpr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SemanticModel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SyntaxTree&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetRoot&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">closestIfDirective&lt;/span> &lt;span class="p">!=&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CodeAnalysisHelper&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">IsValidIfDirective&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">closestIfDirective&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// report the error if we found the method and it didn&amp;#39;t have the
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// directives expected
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">var&lt;/span> &lt;span class="n">diagnostic001&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Diagnostic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rule001&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">identifierName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetLocation&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ReportDiagnostic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">diagnostic001&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>As the &lt;code>AnalyzeExpression&lt;/code> method is called every time the syntax kind registered (&lt;em>InvocationExpression&lt;/em> in this case) is found in code, the analyzer needs to ignore any &lt;em>InvocationExpression&lt;/em>&amp;rsquo;s which are not relevant to it.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Lines 5-35&lt;/strong>: These lines interrogate the syntax tree to make sure the &lt;em>InvocationExpression&lt;/em> is the one relevant to it - &lt;strong>Database.Migrate()&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Line 37-38&lt;/strong>: A helper method is called to find the closest &lt;code>#if directive&lt;/code> which occurs before the &lt;strong>Database.Migrate()&lt;/strong> call&lt;/li>
&lt;li>&lt;strong>Line 41&lt;/strong>: A helper method is called to check if the &lt;code>#if directive&lt;/code> contains a valid condition&lt;/li>
&lt;li>&lt;strong>Line 49-50&lt;/strong>: All necessary checks are complete and the diagnostic is triggered with Roslyn&lt;/li>
&lt;/ul>
&lt;p>These step can be very tricky to get right, and sometimes requires a lot of trial and error and debugging to get right. Working with the syntax tree can be complex depending on what the &lt;code>analyzer&lt;/code> is looking for.&lt;/p>
&lt;p>However the &lt;code>Syntax Visualizer&lt;/code> does make it easier.&lt;/p>
&lt;p>This is an iterative process, using the below three methods to debug, inspect the code and syntax tree, and making tweaks to the various &lt;code>analyzer&lt;/code> checks:&lt;/p>
&lt;ul>
&lt;li>Use of the &lt;code>Syntax Visualizer&lt;/code>&lt;/li>
&lt;li>Use of the &lt;code>unit test infrastructure&lt;/code> for analyzers&lt;/li>
&lt;li>Executing the &lt;code>VSIX project&lt;/code> (which starts up a new instance of Visual Studio with the analyzer installed as an extension)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h5 id="the-syntax-visualizer">The Syntax Visualizer&lt;/h5>
&lt;p>Visual Studio comes with a built in tool window called the &lt;code>Syntax Visualizer&lt;/code>, which can be found under the &lt;code>View -&amp;gt; Other Windows -&amp;gt; Syntax Visualizer&lt;/code>.&lt;/p>
&lt;p>This window will track the current active code window, and display the syntax tree of the active code, in a hierarchical structure.&lt;br>
Selecting various pieces of the code will cause the highlighted item in the &lt;code>Syntax Visualizer&lt;/code> to change and track the active item in code.&lt;/p>
&lt;p>This is invaluable in determining which &lt;code>SyntaxKind&lt;/code> to register (as described in the &lt;a class="link" href="#register-the-action" >&amp;ldquo;register the action&amp;rdquo;&lt;/a> section ), as well as how to traverse the tree to find the relevant syntax nodes to trigger the diagnostic being registered.&lt;/p>
&lt;p>The &lt;code>Syntax Visualizer&lt;/code> + the sample project created in the &lt;a class="link" href="#creating-an-analyzer-project" >&amp;ldquo;creating an analyzer project&amp;rdquo;&lt;/a> section, are key in correctly determining the logic of the analyzer. The below screen shot show the &lt;code>Syntax Visualizer&lt;/code> reflecting the part of the &lt;code>syntax tree&lt;/code> for the &lt;strong>Migrate()&lt;/strong> method.&lt;/p>
&lt;p>Notice how the tree matches the checks done in the code in the &lt;a class="link" href="#interrogate-the-syntax-tree" >above section:&lt;/a>:&lt;br>
&lt;code>InvocationExpression -&amp;gt; MemberAccessExpression -&amp;gt; MemberBindingExpression -&amp;gt; IdentifierName&lt;/code>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 222;
flex-basis: 533px"
>
&lt;a href="https://always-developing.github.io/p/analyzer-write/SyntaxVisualizer.png" data-size="930x418">
&lt;img src="https://always-developing.github.io/p/analyzer-write/SyntaxVisualizer.png"
width="930"
height="418"
srcset="https://always-developing.github.io/p/analyzer-write/SyntaxVisualizer_hu2c69549fc581dd2251a0c3d99615d337_93142_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/analyzer-write/SyntaxVisualizer_hu2c69549fc581dd2251a0c3d99615d337_93142_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="The Syntax Visualizer used in the sample project">
&lt;/a>
&lt;figcaption>The Syntax Visualizer used in the sample project&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;hr>
&lt;h4 id="trigger-the-diagnostics">Trigger the diagnostics&lt;/h4>
&lt;p>Once the code has been interrogated and it has been determined feedback needs to be given, the final step is to trigger and register the diagnostic with Roslyn.&lt;/p>
&lt;p>The diagnostic information and rule created in &lt;a class="link" href="#diagnostic-setup" >&amp;ldquo;diagnostic setup&amp;rdquo;&lt;/a>, is reported at a specific location.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="c1">// report the error if we found the method and it didn&amp;#39;t have the
&lt;/span>&lt;span class="c1">// directives expected
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">diagnostic001&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Diagnostic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rule001&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">identifierName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetLocation&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ReportDiagnostic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">diagnostic001&lt;/span>&lt;span class="p">);&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>&lt;strong>Line 3&lt;/strong>: The diagnostic is created, with a specific rule and a specific location. This location will be where the squiggle appears in code when the diagnostic is triggered.&lt;/li>
&lt;li>&lt;strong>Line 4&lt;/strong>: The diagnostic is finally triggered with Roslyn.&lt;/li>
&lt;/ul>
&lt;h2 id="next-steps-coding-the-code-fix">Next steps: Coding the code fix&lt;/h2>
&lt;p>Next up, &lt;a class="link" href="../analyzer-code-fix/" >part 3 in the series&lt;/a> will go into detail and expand on coding the &lt;code>code fix&lt;/code> for our analyzer, which will fix the code the &lt;code>analyzer&lt;/code> has determined to be incorrect.&lt;/p>
&lt;hr>
&lt;h2 id="useful-links">Useful links&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/dotnet/roslyn" target="_blank" rel="noopener"
>Roslyn repository&lt;/a>&lt;br>
&lt;a class="link" href="https://github.com/always-developing/CodeAnalysis.EntityFrameworkCore.Sample" target="_blank" rel="noopener"
>Sample analyzer and code fix repository&lt;/a>&lt;/p></description></item><item><title>Roslyn Analyzer - explained (Part 1)</title><link>https://always-developing.github.io/p/analyzer-explained/</link><pubDate>Wed, 24 Nov 2021 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/analyzer-explained/</guid><description>&lt;h2 id="series-introduction">Series introduction&lt;/h2>
&lt;p>This is a a five part series exploring the Roslyn analyzer and code fix functionality, how to successfully write and test a custom analyzer, as well as some useful tips and tricks for writing analyzers.&lt;/p>
&lt;p>All posts in the series:&lt;br>
&lt;strong>Part 1:&lt;/strong> Roslyn Analyzer - explained (this post)&lt;br>
&lt;strong>Part 2:&lt;/strong> &lt;a class="link" href="../analyzer-write/" >Roslyn Analyzer - writing an analyzer&lt;/a>&lt;br>
&lt;strong>Part 3:&lt;/strong> &lt;a class="link" href="../analyzer-code-fix/" >Roslyn Analyzer - writing a code fix&lt;/a>&lt;br>
&lt;strong>Part 4:&lt;/strong> &lt;a class="link" href="../analyzer-test/" >Roslyn Analyzer - testing an analyzer and code fix&lt;/a>&lt;br>
&lt;strong>Part 5:&lt;/strong> &lt;a class="link" href="../analyzer-extra/" >Roslyn Analyzer - tips and tricks&lt;/a>&lt;/p>
&lt;p>All code in the posts, including the sample project and working &lt;code>analyzer&lt;/code> and &lt;code>code fix&lt;/code> are &lt;a class="link" href="https://github.com/always-developing/CodeAnalysis.EntityFrameworkCore.Sample" target="_blank" rel="noopener"
>available on Github&lt;/a>.&lt;/p>
&lt;h2 id="what-is-roslyn">What is Roslyn?&lt;/h2>
&lt;p>In short, &lt;code>Roslyn&lt;/code> is the .NET compiler - it consists of the compilers for C# and Visual Basic, as well as an api layer which can be leveraged to gather information about the code (&lt;code>analyse&lt;/code>), and then perform actions based on this information (&lt;code>code fix&lt;/code>).&lt;/p>
&lt;hr>
&lt;h2 id="what-is-a-roslyn-analyzer">What is a Roslyn analyzer?&lt;/h2>
&lt;p>An &lt;code>analyzer&lt;/code> is a piece of code which inspects code (C# or Visual Basic) during design and compile time, and based on the results of the inspection, can raise a &lt;strong>diagnostic result&lt;/strong> as an &lt;strong>Error, Warning&lt;/strong> or as &lt;strong>Information&lt;/strong>.&lt;/p>
&lt;p>All installed and built-in &lt;code>analyzer(s)&lt;/code> are run at design time (and compile time) automatically, with the diagnostic results reflecting:&lt;/p>
&lt;ul>
&lt;li>As coloured &amp;ldquo;squiggles&amp;rdquo; in code&lt;/li>
&lt;li>In the &lt;strong>Error List&lt;/strong> (Ctrl+W, E) in Visual Studio&lt;/li>
&lt;li>In the build output&lt;/li>
&lt;/ul>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 233;
flex-basis: 560px"
>
&lt;a href="https://always-developing.github.io/p/analyzer-explained/1.Warning.png" data-size="600x257">
&lt;img src="https://always-developing.github.io/p/analyzer-explained/1.Warning.png"
width="600"
height="257"
srcset="https://always-developing.github.io/p/analyzer-explained/1.Warning_hu7871c8551ea18709ef3aaad650dd5b7a_35295_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/analyzer-explained/1.Warning_hu7871c8551ea18709ef3aaad650dd5b7a_35295_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Warning highlighted in code by the green squiggle, and also appearing in the Error List">
&lt;/a>
&lt;figcaption>Warning highlighted in code by the green squiggle, and also appearing in the Error List&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 661;
flex-basis: 1586px"
>
&lt;a href="https://always-developing.github.io/p/analyzer-explained/2.BuildWarning2.png" data-size="800x121">
&lt;img src="https://always-developing.github.io/p/analyzer-explained/2.BuildWarning2.png"
width="800"
height="121"
srcset="https://always-developing.github.io/p/analyzer-explained/2.BuildWarning2_huec49f5e12b963a656f418920c493d7bc_48189_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/analyzer-explained/2.BuildWarning2_huec49f5e12b963a656f418920c493d7bc_48189_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Warning also reflecting during a build">
&lt;/a>
&lt;figcaption>Warning also reflecting during a build&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>An &lt;code>analyzer&lt;/code> can be leveraged to inspect code for a number of issues related to (but not limited to):&lt;/p>
&lt;ul>
&lt;li>Style&lt;/li>
&lt;li>Quality&lt;/li>
&lt;li>Design&lt;/li>
&lt;li>Maintainability&lt;/li>
&lt;/ul>
&lt;p>As &lt;code>Roslyn&lt;/code> exposes an API layer on top of the compiler, this layer can be used to write a custom &lt;code>analyzer&lt;/code>.&lt;/p>
&lt;p>&lt;a class="link" href="../analyzer-write/" >See part 2 for more in depth details regarding writing a custom analyzer.&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="what-is-a-roslyn-analyzer-code-fix">What is a Roslyn analyzer code fix?&lt;/h2>
&lt;p>Once an &lt;code>analyzer&lt;/code> has inspected the code and returned an diagnostic result, the next step is apply a code change to resolve the source of the alert - &lt;code>a code fix&lt;/code>.&lt;/p>
&lt;p>An &lt;code>analyzer&lt;/code> does not require a &lt;code>code fix&lt;/code>, but if no &lt;code>code fix&lt;/code> is provided then it is up to the developer to resolve the issue manually based on the &lt;strong>error, warning or information&lt;/strong> message.&lt;/p>
&lt;p>If the &lt;code>analyzer&lt;/code> does have an associated &lt;code>code fix&lt;/code>, it can be accessed using these steps:&lt;/p>
&lt;ol>
&lt;li>Hover or place the cursor over the squiggle, a &lt;em>light bulb&lt;/em> will appear&lt;/li>
&lt;li>Select the small arrow next to the &lt;em>light bulb&lt;/em>, or (Ctrl+.) to see available fix suggestions&lt;/li>
&lt;li>Hover the cursor over one of the suggestions in the list&lt;/li>
&lt;li>A preview of how the code will be changed when the &lt;code>code fix&lt;/code> is applied is displayed&lt;/li>
&lt;li>Select one of the suggestions to apply the &lt;code>code fix&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 239;
flex-basis: 573px"
>
&lt;a href="https://always-developing.github.io/p/analyzer-explained/3.CodeFix.png" data-size="600x251">
&lt;img src="https://always-developing.github.io/p/analyzer-explained/3.CodeFix.png"
width="600"
height="251"
srcset="https://always-developing.github.io/p/analyzer-explained/3.CodeFix_huca494a90debe19a0d730a75e9a1d96c0_34055_480x0_resize_box_3.png 480w, https://always-developing.github.io/p/analyzer-explained/3.CodeFix_huca494a90debe19a0d730a75e9a1d96c0_34055_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Code fix for the analyzer">
&lt;/a>
&lt;figcaption>Code fix for the analyzer&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;a class="link" href="../analyzer-code-fix/" >See part 3 for more in depth details regarding writing a code fix for a custom analyzer.&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="why-write-an-analyzer">Why write an analyzer?&lt;/h2>
&lt;p>A few reasons or use cases for writing a &lt;code>custom analyzer&lt;/code>:&lt;/p>
&lt;ol>
&lt;li>To monitor and diagnose more niche coding patterns you, as a developer, constantly gets wrong or have to look up (&lt;code>analyzers&lt;/code> already exist for most common best practices)&lt;/li>
&lt;li>As a library author (publishing a library to NuGet, for example) an &lt;code>analyzer&lt;/code> can be packaged with the library (see the section below) to ensure that it is used correctly by the developer.&lt;/li>
&lt;li>To ensure common coding practices and styles are shared across all development teams in an organization.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="sharing-a-custom-analyzer">Sharing a custom analyzer&lt;/h2>
&lt;p>There are two ways to share a &lt;code>custom analyzer&lt;/code> once it has been written:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>VSIX&lt;/strong>: The &lt;code>analyzer&lt;/code> can be packaged as a vsix, a Visual Studio Extension. This is an executable file which can be either be shared and manually installed by the developer, or can be downloaded &lt;a class="link" href="https://marketplace.visualstudio.com/vs" target="_blank" rel="noopener"
>Visual Studio Marketplace.&lt;/a>.&lt;/li>
&lt;li>&lt;strong>NuGet package&lt;/strong>: An &lt;code>analyzer&lt;/code> can be package into a NuGet package and installed into a project via a NuGet store (such as &lt;a class="link" href="https://www.nuget.org/" target="_blank" rel="noopener"
>nuget.org&lt;/a> or an internal NuGet store in the case of a company specific &lt;code>analyzer&lt;/code>)&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="analyzers-are-tricky">Analyzers are tricky!&lt;/h2>
&lt;p>It can be very tricky getting the &lt;code>analyzer&lt;/code> to accurately detect the relevant scenarios in code, and just as hard to fix it accurately with a &lt;code>code fix&lt;/code> - syntax trees are complex. (more on this later in the series: &lt;a class="link" href="../analyzer-write/" >part 2&lt;/a>, &lt;a class="link" href="../analyzer-code-fix/" >part 3&lt;/a> and &lt;a class="link" href="../analyzer-test/" >part 4&lt;/a>)&lt;/p>
&lt;p>On top of that, the developer experience for &lt;code>analyzers&lt;/code> are not as slick and friendly as with other tooling. The debugging experience for &lt;code>analyzers&lt;/code> are inconsistent and not always responsive, while the apis exposed to assist with testing an analyzer can be complicated and difficult to configure.&lt;/p>
&lt;p>But all is not lost - it is possible to work with and around the above constraints (with tips from this series of posts) and still successfully create your own custom &lt;code>analyzer&lt;/code>.&lt;/p>
&lt;hr>
&lt;h2 id="a-working-sample-analyzer">A working sample analyzer&lt;/h2>
&lt;p>The guides in &lt;a class="link" href="../analyzer-write/" >part 2&lt;/a> and &lt;a class="link" href="../analyzer-write/" >part 3&lt;/a> will detail how to write an &lt;code>analyzer&lt;/code> package which inspects the code, and applies a &lt;code>code fix&lt;/code> for the following two scenarios related to Entity Framework Core (an understanding of Entity Framework Core is not required to understand the analyzers):&lt;/p>
&lt;ol>
&lt;li>Ensure code migrations are not automatically applied in the Test or Production environment&lt;/li>
&lt;li>Ensure the correct appsettings.json section has been added an Entity Framework Core database connection is configured in code&lt;/li>
&lt;/ol>
&lt;h3 id="scenario-1-auto-migrations">Scenario 1: auto-migrations&lt;/h3>
&lt;p>Entity Framework Core (EF) is an ORM which provides build in data-access functionality to perform operations on a database. What is important for these posts, is to know that EF provides functionality to scaffold and update the schema of the database (the tables etc) at runtime, usually at startup.&lt;/p>
&lt;p>However it is recommended to only run this migration on development environments, and not in test or production environments. Usually CI/CD pipeline executes the database migration in these environments (which also allows for review of the migration script before it being applied to the database)&lt;/p>
&lt;p>The custom &lt;code>analyzer&lt;/code> will look for the presence of the migration code (a &lt;em>.Database.Migrate&lt;/em> method call), and ensure it is only executed when the code is run in DEBUG configuration.&lt;/p>
&lt;h3 id="scenario-2-connection-string">Scenario 2: connection string&lt;/h3>
&lt;p>When configuring EF, a database connection name is specified, with the actual connection string stored in the appsettings.json settings file.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="p">.&lt;/span>&lt;span class="n">AddDbContext&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">SampleContext&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">UseSqlite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Configuration&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetConnectionString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SampleDatabase&amp;#34;&lt;/span>&lt;span class="p">)))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>This code relies on the connection string being present in the appsettings.json file:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5">5&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;ConnectionStrings&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;SamplesDatabase&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Data Source=LocalDatabase.db&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>The custom &lt;code>analyzer&lt;/code> will inspect the appsettings.json file and ensure the connection string is present and correct.&lt;/p>
&lt;hr>
&lt;h2 id="next-steps-writing-the-analyzer">Next steps: Writing the analyzer&lt;/h2>
&lt;p>Next up, &lt;a class="link" href="../analyzer-write/" >part 2 in the series&lt;/a> will go into detail and expand on coding a custom &lt;code>analyzer&lt;/code>.&lt;/p>
&lt;hr>
&lt;h2 id="useful-links">Useful links&lt;/h2>
&lt;p>&lt;a class="link" href="https://docs.microsoft.com/en-us/ef/core/" target="_blank" rel="noopener"
>Entity Framework Core&lt;/a>&lt;br>
&lt;a class="link" href="https://github.com/dotnet/roslyn" target="_blank" rel="noopener"
>Roslyn repository&lt;/a>&lt;br>
&lt;a class="link" href="https://github.com/always-developing/CodeAnalysis.EntityFrameworkCore.Sample" target="_blank" rel="noopener"
>Sample analyzer and code fix repository&lt;/a>&lt;/p></description></item><item><title>Multiple implementations of same interface - the options</title><link>https://always-developing.github.io/p/multiple-implementations/</link><pubDate>Sat, 06 Nov 2021 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/multiple-implementations/</guid><description>&lt;h2 id="the-challenge">The challenge&lt;/h2>
&lt;p>Consider a scenario where the requirement is to upload a file to an online provider (AWS S3, Azure Blob or a FTP site in the examples below), where the provider can be easily changed (either dynamically at runtime, or easily with minimal code changes), with the possibility additional providers being added in future.&lt;/p>
&lt;p>To make use of dependency injection, a generic interface is created, &lt;strong>&lt;em>IFileUploader&lt;/em>&lt;/strong>, along with three implementations &lt;strong>&lt;em>AWSUploader&lt;/em>&lt;/strong>, &lt;strong>&lt;em>AzureUploader&lt;/em>&lt;/strong> and &lt;strong>&lt;em>FTPUploader&lt;/em>&lt;/strong>. The interface prescribes that the implementations provide a method to upload a file (&lt;em>UploadFile&lt;/em>) and a method to get the implementation name (&lt;em>GetName&lt;/em>).&lt;/p>
&lt;p>The built in .NET dependency injection (DI) container is all one will need for almost all situations (including this situation): however this scenario can be a bit more challenging to get right - &lt;strong>&lt;code>with multiple implementations of the same interface, how do you get the right implementation from the DI container?&lt;/code>&lt;/strong>&lt;/p>
&lt;h2 id="the-problem-with-net-dependency-injection-container">The problem with .NET dependency injection container&lt;/h2>
&lt;p>One piece of functionality the .NET DI container does not have (which is available in some other 3rd party DI/IoC containers) is the ability to add and retrieve service implementations by name.&lt;/p>
&lt;p>Short of actually implementing one of these other 3rd party containers, below are a number of different options and techniques one can use to get the correct implementation from the DI container when there are multiple implementations registered.&lt;/p>
&lt;blockquote>
&lt;div>
&lt;div style="width: 5%; float: left; vertical-align: middle; padding-right: 60px;">
&lt;i class="inline-svg" >&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-info-circle" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#00abfb" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;circle cx="12" cy="12" r="9" />
&lt;line x1="12" y1="8" x2="12.01" y2="8" />
&lt;polyline points="11 12 12 12 12 16 13 16" />
&lt;/svg>&lt;/i>
&lt;/div>
&lt;div>
&lt;p>The benchmarks on the below techniques were all executed at the same time under the same conditions using &lt;a href="https://benchmarkdotnet.org/articles/overview.html">&lt;strong>BenchmarkDotNet&lt;/strong>&lt;/a>&lt;br>
Even though some some techniques performed poorly when compared to others, bear in mind that the time frame in question here is nanoseconds (a nanosecond is &lt;strong>one billionth of a second&lt;/strong>).&lt;br>
In &lt;em>most&lt;/em> scenarios, the DI technique used (if used correctly) is not going to make a massive material different to the performance of the application/service (of course there are exceptions, depending on how complicated the dependency tree is)&lt;/p>
&lt;/div>
&lt;/div>
&lt;/blockquote>
&lt;h2 id="the-different-techniques">The different techniques&lt;/h2>
&lt;h3 id="ienumerable">IEnumerable&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Configuration:&lt;/strong>&lt;br>
This is the simplest &amp;lsquo;out of the box&amp;rsquo; technique, with the various implementations just all added to the DI container using the same interface (&lt;a class="link" href="#ienumconfig-7" >lines 7-9&lt;/a>):
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumconfig-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumconfig-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumconfig-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumconfig-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumconfig-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumconfig-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumconfig-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumconfig-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumconfig-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumconfig-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumconfig-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumconfig-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumconfig-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumconfig-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumconfig-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumconfig-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumconfig-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumconfig-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumconfig-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumconfig-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumconfig-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumconfig-11">11&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IHost&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">EnumerableBenchmark&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">host&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Host&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CreateDefaultBuilder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ConfigureServices&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">services&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">services&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">EnumerableHandler&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">AzureUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FTPUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">).&lt;/span>&lt;span class="n">Build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Usage:&lt;/strong>&lt;br>
Inject IEnumerable&lt;!-- raw HTML omitted --> into the relevant class (&lt;a class="link" href="#ienumusage-4" >line 4&lt;/a>), and then retrieve the required implementation from the IEnumerable collection (&lt;a class="link" href="#ienumusage-11" >lines 11-13&lt;/a>)
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="ienumusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-21">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="ienumusage-22">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#ienumusage-22">22&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">EnumerableHandler&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">uploaders&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">EnumerableHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">uploaders&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">uploaders&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">uploaders&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">providerName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;aws&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">uploader&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">uploaders&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">FirstOrDefault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">up&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">up&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">GetName&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">Equals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">providerName&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uploader&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArgumentException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">$&amp;#34;No uploader with name &amp;#34;&lt;/span> &lt;span class="p">+&lt;/span>
&lt;span class="s">$&amp;#34;{providerName} could be found&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">uploader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">UploadFile&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Pros:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Easy to implement&lt;/li>
&lt;li>Implementation can be selected/changed at runtime&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cons:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Every implementation is instantiated (as part of IEnumerable) even if not required or used. This could be especially problematic if the implementations themselves have a number of dependencies which then need to be instantiated (this was NOT the case with the benchmarks) which could result in a negative performance impact.&lt;/li>
&lt;li>The logic to retrieve the implementation from IEnumerable is contained in multiple places (each class which has it injected)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Performance:&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Method&lt;/th>
&lt;th style="text-align:right">Mean&lt;/th>
&lt;th style="text-align:right">Error&lt;/th>
&lt;th style="text-align:right">StdDev&lt;/th>
&lt;th style="text-align:right">Ratio&lt;/th>
&lt;th style="text-align:right">RatioSD&lt;/th>
&lt;th style="text-align:right">Gen 0&lt;/th>
&lt;th style="text-align:right">Allocated&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Enumerable&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">86.99 ns&lt;/td>
&lt;td style="text-align:right">0.987 ns&lt;/td>
&lt;td style="text-align:right">0.924 ns&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">0.00&lt;/td>
&lt;td style="text-align:right">0.0421&lt;/td>
&lt;td style="text-align:right">264 B&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="factory">Factory&lt;/h3>
&lt;p>One of the negative aspects of the &lt;code>IEnumerable&lt;/code> approach, is that the logic to retrieve the correct implementation could be present in multiple places (if IEnumberable is injected into multiple classes). The &lt;code>Factory&lt;/code> approach moves the logic into a separate actory class, which is then injected and is responsible for retrieving the required implementation.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Configuration:&lt;/strong>&lt;br>
Configuration is the &lt;em>same as &lt;code>IEnumerable&lt;/code>&lt;/em>, the various implementations all added to the DI container using the same interface, with one additional class added, the factory class (&lt;a class="link" href="#factoryconfig-7" >line 7&lt;/a>)
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="factoryconfig-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-12">12&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IHost&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">FactoryBenchmark&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">host&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Host&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CreateDefaultBuilder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ConfigureServices&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">services&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">services&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">FactoryHandler&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">FileUploaderFactory&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">AzureUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FTPUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">).&lt;/span>&lt;span class="n">Build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>The factory looks very similar to the handler from the &lt;code>IEnumerable&lt;/code> approach:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="factoryconfig-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryconfig-21">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryconfig-21">21&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">FileUploaderFactory&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">uploaders&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">FileUploaderFactory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">uploaders&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">uploaders&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">uploaders&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">IFileUploader&lt;/span> &lt;span class="n">Resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span> &lt;span class="n">providerName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">uploader&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">uploaders&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">FirstOrDefault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">up&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">up&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">GetName&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">Equals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">providerName&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uploader&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArgumentException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">$&amp;#34;No uploader with name &amp;#34;&lt;/span> &lt;span class="p">+&lt;/span>
&lt;span class="s">$&amp;#34;{providerName} could be found&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">uploader&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Usage:&lt;/strong>&lt;br>
The factory is now injected into the relevant class (&lt;a class="link" href="#factoryusage-4" >line 4&lt;/a>) and is then invoked to get the requested implementation (&lt;a class="link" href="#factoryusage-12" >line 12&lt;/a>)
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="factoryusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="factoryusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#factoryusage-15">15&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">FactoryHandler&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">FileUploaderFactory&lt;/span> &lt;span class="m">_f&lt;/span>&lt;span class="n">actory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">FactoryHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FileUploaderFactory&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_f&lt;/span>&lt;span class="n">actory&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">providerName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;azure&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">uploader&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">_f&lt;/span>&lt;span class="n">actory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">providerName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">uploader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">UploadFile&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Pros:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Easy to implement&lt;/li>
&lt;li>Implementation can be selected/changed at runtime&lt;/li>
&lt;li>Retrieval logic is contained in a single place&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cons:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Every implementation is instantiated (as part of IEnumerable) even if not required or used. This could have an impact on performance and memory usage.&lt;/li>
&lt;li>Slightly slower, and slightly more memory usage than the &lt;code>IEnumerable&lt;/code> approach (due to the extra layer between the handler and the IEnumerable collection)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Performance:&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Method&lt;/th>
&lt;th style="text-align:right">Mean&lt;/th>
&lt;th style="text-align:right">Error&lt;/th>
&lt;th style="text-align:right">StdDev&lt;/th>
&lt;th style="text-align:right">Ratio&lt;/th>
&lt;th style="text-align:right">RatioSD&lt;/th>
&lt;th style="text-align:right">Gen 0&lt;/th>
&lt;th style="text-align:right">Allocated&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Enumerable&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">86.99 ns&lt;/td>
&lt;td style="text-align:right">0.987 ns&lt;/td>
&lt;td style="text-align:right">0.924 ns&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">0.00&lt;/td>
&lt;td style="text-align:right">0.0421&lt;/td>
&lt;td style="text-align:right">264 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Factory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">103.20 ns&lt;/td>
&lt;td style="text-align:right">1.324 ns&lt;/td>
&lt;td style="text-align:right">1.238 ns&lt;/td>
&lt;td style="text-align:right">1.19&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0459&lt;/td>
&lt;td style="text-align:right">288 B&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="type-factory">Type Factory&lt;/h3>
&lt;p>A big negative aspect of the &lt;code>IEnumerable&lt;/code> and &lt;code>Factory&lt;/code> approach, is that all the implementations are instantiated every time, even if not used or required. This could have big impact on performance and memory if the implementations them themselves have many dependencies (and those dependencies have dependencies and so on).&lt;br>
The next approach is extends on the &lt;code>Factory&lt;/code> technique, but only instantiates the requested implementation &lt;strong>based on naming conventions&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Configuration:&lt;/strong>&lt;br>
Setup is the same as with the &lt;code>Factory&lt;/code> method.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="typefactoryconfig-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig-12">12&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IHost&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">FactoryBenchmark&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">host&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Host&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CreateDefaultBuilder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ConfigureServices&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">services&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">services&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TypeFactoryHandler&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">FileUploaderTypeFactory&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">AzureUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FTPUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">).&lt;/span>&lt;span class="n">Build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>The factory in this approach, takes the requested name, finds the type based on the name (&lt;a class="link" href="#typefactoryconfig2-11" >lines 11-12&lt;/a>) and gets it from the DI container (&lt;a class="link" href="#typefactoryconfig2-20" >line 20&lt;/a>)
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="typefactoryconfig2-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-21">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-22">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-22">22&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryconfig2-23">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryconfig2-23">23&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">FileUploaderTypeFactory&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IServiceProvider&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">provider&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">FileUploaderTypeFactory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IServiceProvider&lt;/span> &lt;span class="n">provider&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">provider&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">provider&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">IFileUploader&lt;/span> &lt;span class="n">Resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span> &lt;span class="n">providerName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Assembly&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAssembly&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FileUploaderTypeFactory&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="n">GetType&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s">$&amp;#34;{typeof(FileUploaderTypeFactory).Namespace}.{providerName}Uploader&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArgumentException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">$&amp;#34;No uploader with name &amp;#34;&lt;/span> &lt;span class="p">+&lt;/span>
&lt;span class="s">$&amp;#34;{providerName} could be found&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">uploader&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">provider&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">uploader&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Usage:&lt;/strong>&lt;br>
The factory is now injected into the relevant class (&lt;a class="link" href="#typefactoryusage-4" >line 4&lt;/a>) and is then invoked to get the requested implementation (&lt;a class="link" href="#typefactoryusage-12" >line 12&lt;/a>)
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="typefactoryusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="typefactoryusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typefactoryusage-15">15&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">TypeFactoryHandler&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">FileUploaderTypeFactory&lt;/span> &lt;span class="m">_f&lt;/span>&lt;span class="n">actory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">TypeFactoryHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FileUploaderTypeFactory&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_f&lt;/span>&lt;span class="n">actory&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">providerName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Azure&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">uploader&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">_f&lt;/span>&lt;span class="n">actory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">providerName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">uploader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">UploadFile&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Pros:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Not all implementations are instantiated&lt;/li>
&lt;li>Better memory usage compared to other two approaches so far&lt;/li>
&lt;li>Implementation can be selected/changed at runtime&lt;/li>
&lt;li>Retrieval logic is contained in a single place&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cons:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Use of reflection to convert the name to a Type does have an big impact on performance&lt;/li>
&lt;li>Strict naming convention has to be followed in order for the reflection logic to work correctly&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Performance:&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Method&lt;/th>
&lt;th style="text-align:right">Mean&lt;/th>
&lt;th style="text-align:right">Error&lt;/th>
&lt;th style="text-align:right">StdDev&lt;/th>
&lt;th style="text-align:right">Ratio&lt;/th>
&lt;th style="text-align:right">RatioSD&lt;/th>
&lt;th style="text-align:right">Gen 0&lt;/th>
&lt;th style="text-align:right">Allocated&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Enumerable&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">86.99 ns&lt;/td>
&lt;td style="text-align:right">0.987 ns&lt;/td>
&lt;td style="text-align:right">0.924 ns&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">0.00&lt;/td>
&lt;td style="text-align:right">0.0421&lt;/td>
&lt;td style="text-align:right">264 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Factory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">103.20 ns&lt;/td>
&lt;td style="text-align:right">1.324 ns&lt;/td>
&lt;td style="text-align:right">1.238 ns&lt;/td>
&lt;td style="text-align:right">1.19&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0459&lt;/td>
&lt;td style="text-align:right">288 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TypeFactory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">525.19 ns&lt;/td>
&lt;td style="text-align:right">2.624 ns&lt;/td>
&lt;td style="text-align:right">2.455 ns&lt;/td>
&lt;td style="text-align:right">6.04&lt;/td>
&lt;td style="text-align:right">0.07&lt;/td>
&lt;td style="text-align:right">0.0277&lt;/td>
&lt;td style="text-align:right">176 B&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="delegate">Delegate&lt;/h3>
&lt;p>The next approach tries to achieve the same as the &lt;code>Type Factory&lt;/code> approach - not instantiating every implementation, but using a different technique.&lt;br>
In short, a delegate is called at runtime when an implementation is requested, and using a switch statement the correct one is determined and returned.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Configuration:&lt;/strong>&lt;br>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="delegateconfig-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-21">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-22">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-22">22&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-23">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-23">23&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-24">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-24">24&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateconfig-25">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateconfig-25">25&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IHost&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">DelegateBenchmark&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">host&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Host&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CreateDefaultBuilder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ConfigureServices&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">services&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">services&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AzureUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">FTPUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DelegateHandler&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DelegateResolver&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">serviceProvider&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">providerName&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">providerName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;aws&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">serviceProvider&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetService&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">&amp;gt;();&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;azure&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">serviceProvider&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetService&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AzureUploader&lt;/span>&lt;span class="p">&amp;gt;();&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;ftp&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">serviceProvider&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetService&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">FTPUploader&lt;/span>&lt;span class="p">&amp;gt;();&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArgumentException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">$&amp;#34;No uploader with &amp;#34;&lt;/span> &lt;span class="p">+&lt;/span>
&lt;span class="s">$&amp;#34;name {providerName} could be found&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">})).&lt;/span>&lt;span class="n">Build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>The DelegateResolver is as follows
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="delegateresolver-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateresolver-1">1&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#"> &lt;span class="k">public&lt;/span> &lt;span class="k">delegate&lt;/span> &lt;span class="n">IFileUploader&lt;/span> &lt;span class="n">DelegateResolver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span> &lt;span class="n">providerName&lt;/span>&lt;span class="p">);&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Usage:&lt;/strong>&lt;br>
The delegate is now injected into the relevant class (&lt;a class="link" href="#delegateusage-4" >line 4&lt;/a>) and is then invoked to get the requested implementation (&lt;a class="link" href="#delegateusage-11" >line 11&lt;/a>)
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="delegateusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="delegateusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#delegateusage-15">15&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">DelegateHandler&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">DelegateResolver&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">resolver&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">DelegateHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DelegateResolver&lt;/span> &lt;span class="n">resovler&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">resolver&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">resovler&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">uploader&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">resolver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ftp&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">uploader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">UploadFile&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Pros:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Not all implementations are instantiated&lt;/li>
&lt;li>Best memory usage compared to other approaches so far&lt;/li>
&lt;li>Implementation can be selected/changed at runtime&lt;/li>
&lt;li>Retrieval logic is contained in a single place&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cons:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Slightly more complicated setup with the delegate and switch statement compared to other approaches&lt;/li>
&lt;li>Switch statement is hardcoded and needs to be manually maintained every time a new provider is added&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Performance:&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Method&lt;/th>
&lt;th style="text-align:right">Mean&lt;/th>
&lt;th style="text-align:right">Error&lt;/th>
&lt;th style="text-align:right">StdDev&lt;/th>
&lt;th style="text-align:right">Ratio&lt;/th>
&lt;th style="text-align:right">RatioSD&lt;/th>
&lt;th style="text-align:right">Gen 0&lt;/th>
&lt;th style="text-align:right">Allocated&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Enumerable&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">86.99 ns&lt;/td>
&lt;td style="text-align:right">0.987 ns&lt;/td>
&lt;td style="text-align:right">0.924 ns&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">0.00&lt;/td>
&lt;td style="text-align:right">0.0421&lt;/td>
&lt;td style="text-align:right">264 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Factory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">103.20 ns&lt;/td>
&lt;td style="text-align:right">1.324 ns&lt;/td>
&lt;td style="text-align:right">1.238 ns&lt;/td>
&lt;td style="text-align:right">1.19&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0459&lt;/td>
&lt;td style="text-align:right">288 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TypeFactory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">525.19 ns&lt;/td>
&lt;td style="text-align:right">2.624 ns&lt;/td>
&lt;td style="text-align:right">2.455 ns&lt;/td>
&lt;td style="text-align:right">6.04&lt;/td>
&lt;td style="text-align:right">0.07&lt;/td>
&lt;td style="text-align:right">0.0277&lt;/td>
&lt;td style="text-align:right">176 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Delegate&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">111.45 ns&lt;/td>
&lt;td style="text-align:right">1.456 ns&lt;/td>
&lt;td style="text-align:right">1.291 ns&lt;/td>
&lt;td style="text-align:right">1.28&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0178&lt;/td>
&lt;td style="text-align:right">112 B&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="type-delegate">Type Delegate&lt;/h3>
&lt;p>The next approach extends the &lt;code>Delegate&lt;/code> technique, and uses reflection and naming conventions to get the Type dynamically.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Configuration:&lt;/strong>&lt;br>
Setup is as follows, very similar to the &lt;code>Delegate&lt;/code> approach, but instead of the switch statement, reflection is used to get the Type based on naming conventions.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="typedelegateconfig-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-21">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-22">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-22">22&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-23">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-23">23&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-24">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-24">24&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-25">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-25">25&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateconfig-26">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateconfig-26">26&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IHost&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">TypeDelegateBenchmark&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">host&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Host&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CreateDefaultBuilder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ConfigureServices&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">services&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">services&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AzureUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">FTPUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TypeDelegateHandler&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TypeDelegateResolver&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">serviceProvider&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">providerName&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Assembly&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAssembly&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FileUploaderTypeFactory&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">GetType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">$&amp;#34;{typeof(FileUploaderTypeFactory).Namespace}
&lt;/span>&lt;span class="s"> .{providerName}Uploader&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">false&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">true&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArgumentException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">$&amp;#34;No uploader with &amp;#34;&lt;/span> &lt;span class="p">+&lt;/span>
&lt;span class="s">$&amp;#34;name {providerName} could be found&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">uploader&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">serviceProvider&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">uploader&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">})).&lt;/span>&lt;span class="n">Build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>The DelegateResolver is the same as before.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="typedelegateresolver-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateresolver-1">1&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#"> &lt;span class="k">public&lt;/span> &lt;span class="k">delegate&lt;/span> &lt;span class="n">IFileUploader&lt;/span> &lt;span class="n">DelegateResolver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span> &lt;span class="n">providerName&lt;/span>&lt;span class="p">);&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Usage:&lt;/strong>&lt;br>
The delegate is now injected into the relevant class (&lt;a class="link" href="#typedelegateusage-4" >line 4&lt;/a>) and is then invoked to get the requested implementation (&lt;a class="link" href="#typedelegateusage-11" >line 11&lt;/a>)
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="typedelegateusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="typedelegateusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#typedelegateusage-15">15&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">TypeDelegateHandler&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">DelegateResolver&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">resolver&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">TypeDelegateHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DelegateResolver&lt;/span> &lt;span class="n">resovler&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">resolver&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">resovler&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">uploader&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">resolver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ftp&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">uploader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">UploadFile&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Pros:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Not all implementations are instantiated&lt;/li>
&lt;li>Implementation can be selected/changed at runtime&lt;/li>
&lt;li>Retrieval logic is contained in a single place&lt;/li>
&lt;li>No switch statement to maintain when a new provider is added&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cons:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Use of reflection to convert the name to a Type does have a large impact on performance&lt;/li>
&lt;li>Strict naming convention has to be followed in order for the reflection logic to work correctly&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Performance:&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Method&lt;/th>
&lt;th style="text-align:right">Mean&lt;/th>
&lt;th style="text-align:right">Error&lt;/th>
&lt;th style="text-align:right">StdDev&lt;/th>
&lt;th style="text-align:right">Ratio&lt;/th>
&lt;th style="text-align:right">RatioSD&lt;/th>
&lt;th style="text-align:right">Gen 0&lt;/th>
&lt;th style="text-align:right">Allocated&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Enumerable&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">86.99 ns&lt;/td>
&lt;td style="text-align:right">0.987 ns&lt;/td>
&lt;td style="text-align:right">0.924 ns&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">0.00&lt;/td>
&lt;td style="text-align:right">0.0421&lt;/td>
&lt;td style="text-align:right">264 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Factory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">103.20 ns&lt;/td>
&lt;td style="text-align:right">1.324 ns&lt;/td>
&lt;td style="text-align:right">1.238 ns&lt;/td>
&lt;td style="text-align:right">1.19&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0459&lt;/td>
&lt;td style="text-align:right">288 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TypeFactory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">525.19 ns&lt;/td>
&lt;td style="text-align:right">2.624 ns&lt;/td>
&lt;td style="text-align:right">2.455 ns&lt;/td>
&lt;td style="text-align:right">6.04&lt;/td>
&lt;td style="text-align:right">0.07&lt;/td>
&lt;td style="text-align:right">0.0277&lt;/td>
&lt;td style="text-align:right">176 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Delegate&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">111.45 ns&lt;/td>
&lt;td style="text-align:right">1.456 ns&lt;/td>
&lt;td style="text-align:right">1.291 ns&lt;/td>
&lt;td style="text-align:right">1.28&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0178&lt;/td>
&lt;td style="text-align:right">112 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TypeDelegate&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">861.84 ns&lt;/td>
&lt;td style="text-align:right">6.599 ns&lt;/td>
&lt;td style="text-align:right">5.850 ns&lt;/td>
&lt;td style="text-align:right">9.90&lt;/td>
&lt;td style="text-align:right">0.15&lt;/td>
&lt;td style="text-align:right">0.0343&lt;/td>
&lt;td style="text-align:right">216 B&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="distinct">Distinct&lt;/h3>
&lt;p>The next technique uses a wrapper to make each implementation added to the DI container unique, and hence can be retrieved uniquely.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Configuration:&lt;/strong>&lt;br>
Additional types are also now required to be defined and added to the DI container, &lt;em>IGenericUploader&lt;/em> and &lt;em>GenericUploader&lt;/em>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="distinctconfig-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctconfig-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctconfig-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctconfig-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctconfig-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctconfig-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctconfig-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctconfig-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctconfig-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctconfig-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctconfig-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctconfig-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctconfig-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctconfig-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctconfig-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctconfig-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctconfig-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctconfig-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctconfig-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctconfig-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctconfig-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctconfig-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctconfig-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctconfig-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctconfig-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctconfig-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctconfig-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctconfig-14">14&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IHost&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">DistinctBenchmark&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">host&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Host&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CreateDefaultBuilder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ConfigureServices&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">services&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">services&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AzureUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">FTPUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DistinctHandler&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IGenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">&amp;gt;,&lt;/span> &lt;span class="n">GenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IGenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AzureUploader&lt;/span>&lt;span class="p">&amp;gt;,&lt;/span> &lt;span class="n">GenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AzureUploader&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IGenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">FTPUploader&lt;/span>&lt;span class="p">&amp;gt;,&lt;/span> &lt;span class="n">GenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">FTPUploader&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;()&lt;/span>
&lt;span class="p">).&lt;/span>&lt;span class="n">Build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>IGenericUploader is defined as below.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="distinctinterface-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctinterface-1">1&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#"> &lt;span class="k">public&lt;/span> &lt;span class="k">interface&lt;/span> &lt;span class="n">IGenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">IFileUploader&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">IFileUploader&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>GenericUploader is defined as below.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="distinctimplementation-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctimplementation-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctimplementation-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctimplementation-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctimplementation-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctimplementation-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctimplementation-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctimplementation-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctimplementation-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctimplementation-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctimplementation-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctimplementation-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctimplementation-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctimplementation-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctimplementation-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctimplementation-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctimplementation-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctimplementation-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctimplementation-18">18&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">GenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">IGenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">IFileUploader&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">implementation&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">GenericUploader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">implementation&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">implementation&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">implementation&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">GetName&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">implementation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetName&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">UploadFile&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">implementation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">UploadFile&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>A new generic provider is defined (implementing the relevant interface) and the generic provider wraps the &amp;ldquo;true provider&amp;rdquo; implementation. As the generic implementation takes a T argument, this can be used to uniquely distinguish them and retrieve the correct implementation.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Usage:&lt;/strong>&lt;br>
The generic interface with the required implementation is now injected into the relevant class (&lt;a class="link" href="#distinctusage-4" >line 4&lt;/a>) and is then invoked (&lt;a class="link" href="#distinctusage-11" >line 11&lt;/a>)
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="distinctusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctusage-13">13&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">DistinctHandler&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IGenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">uploader&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">DistinctHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IGenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">uploader&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">uploader&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">uploader&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">uploader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">UploadFile&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Pros:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Not all implementations are instantiated&lt;/li>
&lt;li>The default DI container is doing all the retrieval work (as a unique item is being asked for), so is very efficient&lt;/li>
&lt;li>By far the best performing (in both time and memory usage) technique so far&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cons:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Implementation can NOT be selected/changed at runtime&lt;/li>
&lt;li>Bit of a convoluted process having a wrapper interface&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Performance:&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Method&lt;/th>
&lt;th style="text-align:right">Mean&lt;/th>
&lt;th style="text-align:right">Error&lt;/th>
&lt;th style="text-align:right">StdDev&lt;/th>
&lt;th style="text-align:right">Ratio&lt;/th>
&lt;th style="text-align:right">RatioSD&lt;/th>
&lt;th style="text-align:right">Gen 0&lt;/th>
&lt;th style="text-align:right">Allocated&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Enumerable&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">86.99 ns&lt;/td>
&lt;td style="text-align:right">0.987 ns&lt;/td>
&lt;td style="text-align:right">0.924 ns&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">0.00&lt;/td>
&lt;td style="text-align:right">0.0421&lt;/td>
&lt;td style="text-align:right">264 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Factory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">103.20 ns&lt;/td>
&lt;td style="text-align:right">1.324 ns&lt;/td>
&lt;td style="text-align:right">1.238 ns&lt;/td>
&lt;td style="text-align:right">1.19&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0459&lt;/td>
&lt;td style="text-align:right">288 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TypeFactory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">525.19 ns&lt;/td>
&lt;td style="text-align:right">2.624 ns&lt;/td>
&lt;td style="text-align:right">2.455 ns&lt;/td>
&lt;td style="text-align:right">6.04&lt;/td>
&lt;td style="text-align:right">0.07&lt;/td>
&lt;td style="text-align:right">0.0277&lt;/td>
&lt;td style="text-align:right">176 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Delegate&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">111.45 ns&lt;/td>
&lt;td style="text-align:right">1.456 ns&lt;/td>
&lt;td style="text-align:right">1.291 ns&lt;/td>
&lt;td style="text-align:right">1.28&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0178&lt;/td>
&lt;td style="text-align:right">112 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TypeDelegate&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">861.84 ns&lt;/td>
&lt;td style="text-align:right">6.599 ns&lt;/td>
&lt;td style="text-align:right">5.850 ns&lt;/td>
&lt;td style="text-align:right">9.90&lt;/td>
&lt;td style="text-align:right">0.15&lt;/td>
&lt;td style="text-align:right">0.0343&lt;/td>
&lt;td style="text-align:right">216 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Distinct&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">50.78 ns&lt;/td>
&lt;td style="text-align:right">0.441 ns&lt;/td>
&lt;td style="text-align:right">0.413 ns&lt;/td>
&lt;td style="text-align:right">0.58&lt;/td>
&lt;td style="text-align:right">0.01&lt;/td>
&lt;td style="text-align:right">0.0038&lt;/td>
&lt;td style="text-align:right">24 B&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="distinct-factory">Distinct Factory&lt;/h3>
&lt;p>This technique extends the &lt;code>Distinct&lt;/code> approach, resolving the limitation of not being able to select or change the implementation at runtime.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Configuration:&lt;/strong>&lt;br>
Setup very similar to the &lt;code>Distinct&lt;/code> setup, with the addition of the DistinctFactory (&lt;a class="link" href="#distinctfactoryconfig-9" >line 9&lt;/a>)
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="distinctfactoryconfig-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryconfig-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryconfig-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryconfig-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryconfig-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryconfig-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryconfig-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryconfig-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryconfig-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryconfig-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryconfig-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryconfig-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryconfig-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryconfig-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryconfig-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryconfig-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryconfig-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryconfig-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryconfig-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryconfig-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryconfig-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryconfig-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryconfig-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryconfig-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryconfig-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryconfig-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryconfig-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryconfig-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryconfig-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryconfig-15">15&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IHost&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">DistinctFactoryBenchmark&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">host&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Host&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CreateDefaultBuilder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ConfigureServices&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">services&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">services&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AzureUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">FTPUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DistinctFactory&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DistinctFactoryHandler&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IGenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">&amp;gt;,&lt;/span> &lt;span class="n">GenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IGenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AzureUploader&lt;/span>&lt;span class="p">&amp;gt;,&lt;/span> &lt;span class="n">GenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AzureUploader&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddScoped&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IGenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">FTPUploader&lt;/span>&lt;span class="p">&amp;gt;,&lt;/span> &lt;span class="n">GenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">FTPUploader&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;()&lt;/span>
&lt;span class="p">).&lt;/span>&lt;span class="n">Build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>IGenericUploader and GenericUploader are exactly as defined in the &lt;code>Distinct&lt;/code> technique.&lt;/p>
&lt;p>DistinctFactoryHandler is defined as below.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="distinctfactoryfactory-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-20">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-21">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-22">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-22">22&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-23">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-23">23&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-24">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-24">24&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-25">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-25">25&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-26">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-26">26&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryfactory-27">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryfactory-27">27&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">DistinctFactory&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IServiceProvider&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">provider&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">DistinctFactory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IServiceProvider&lt;/span> &lt;span class="n">provider&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">provider&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">provider&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">IFileUploader&lt;/span> &lt;span class="n">Resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span> &lt;span class="n">providerName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">providerName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;aws&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">provider&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">IGenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">&amp;gt;))&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;azure&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">provider&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">IGenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AzureUploader&lt;/span>&lt;span class="p">&amp;gt;))&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;ftp&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">provider&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">IGenericUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">FTPUploader&lt;/span>&lt;span class="p">&amp;gt;))&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArgumentException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">$&amp;#34;No uploader with &amp;#34;&lt;/span> &lt;span class="p">+&lt;/span>
&lt;span class="s">$&amp;#34;name {providerName} could be found&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Usage:&lt;/strong>&lt;br>
The factory is now injected into the relevant class (&lt;a class="link" href="#distinctfactoryusage-4" >line 4&lt;/a>) and is then invoked to get the requested implementation by name (&lt;a class="link" href="#distinctfactoryusage-11" >line 11&lt;/a>)
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="distinctfactoryusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="distinctfactoryusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#distinctfactoryusage-14">14&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#"> &lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">DistinctFactoryHandler&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">DistinctFactory&lt;/span> &lt;span class="m">_d&lt;/span>&lt;span class="n">istinctFactory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">DistinctFactoryHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DistinctFactory&lt;/span> &lt;span class="n">distinctFactory&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_d&lt;/span>&lt;span class="n">istinctFactory&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">distinctFactory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_d&lt;/span>&lt;span class="n">istinctFactory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ftp&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">UploadFile&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Pros:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Not all implementations are instantiated&lt;/li>
&lt;li>Implementation can be selected/changed at runtime&lt;/li>
&lt;li>Good overall performance&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cons:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Switch statement is hardcoded and needs to be manually maintained every time a new provider is added&lt;/li>
&lt;li>Bit of a convoluted process&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Performance:&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Method&lt;/th>
&lt;th style="text-align:right">Mean&lt;/th>
&lt;th style="text-align:right">Error&lt;/th>
&lt;th style="text-align:right">StdDev&lt;/th>
&lt;th style="text-align:right">Ratio&lt;/th>
&lt;th style="text-align:right">RatioSD&lt;/th>
&lt;th style="text-align:right">Gen 0&lt;/th>
&lt;th style="text-align:right">Allocated&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Enumerable&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">86.99 ns&lt;/td>
&lt;td style="text-align:right">0.987 ns&lt;/td>
&lt;td style="text-align:right">0.924 ns&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">0.00&lt;/td>
&lt;td style="text-align:right">0.0421&lt;/td>
&lt;td style="text-align:right">264 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Factory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">103.20 ns&lt;/td>
&lt;td style="text-align:right">1.324 ns&lt;/td>
&lt;td style="text-align:right">1.238 ns&lt;/td>
&lt;td style="text-align:right">1.19&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0459&lt;/td>
&lt;td style="text-align:right">288 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TypeFactory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">525.19 ns&lt;/td>
&lt;td style="text-align:right">2.624 ns&lt;/td>
&lt;td style="text-align:right">2.455 ns&lt;/td>
&lt;td style="text-align:right">6.04&lt;/td>
&lt;td style="text-align:right">0.07&lt;/td>
&lt;td style="text-align:right">0.0277&lt;/td>
&lt;td style="text-align:right">176 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Delegate&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">111.45 ns&lt;/td>
&lt;td style="text-align:right">1.456 ns&lt;/td>
&lt;td style="text-align:right">1.291 ns&lt;/td>
&lt;td style="text-align:right">1.28&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0178&lt;/td>
&lt;td style="text-align:right">112 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TypeDelegate&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">861.84 ns&lt;/td>
&lt;td style="text-align:right">6.599 ns&lt;/td>
&lt;td style="text-align:right">5.850 ns&lt;/td>
&lt;td style="text-align:right">9.90&lt;/td>
&lt;td style="text-align:right">0.15&lt;/td>
&lt;td style="text-align:right">0.0343&lt;/td>
&lt;td style="text-align:right">216 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Distinct&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">50.78 ns&lt;/td>
&lt;td style="text-align:right">0.441 ns&lt;/td>
&lt;td style="text-align:right">0.413 ns&lt;/td>
&lt;td style="text-align:right">0.58&lt;/td>
&lt;td style="text-align:right">0.01&lt;/td>
&lt;td style="text-align:right">0.0038&lt;/td>
&lt;td style="text-align:right">24 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DistinctFactory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">96.22 ns&lt;/td>
&lt;td style="text-align:right">1.378 ns&lt;/td>
&lt;td style="text-align:right">1.289 ns&lt;/td>
&lt;td style="text-align:right">1.11&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0076&lt;/td>
&lt;td style="text-align:right">48 B&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="distinct-lookup-factory">Distinct Lookup Factory&lt;/h3>
&lt;p>This approach gives implementations names as they are added to the DI container, keeps track of the name-implementation link, and facilitates lookup and retrieval of the correct implementation.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Configuration:&lt;/strong>&lt;br>
This setup is different, in that implementations of the same interface are grouped together by the AddNamedUploader extension method (&lt;a class="link" href="#lookupdistinctconfig-6" >line 6&lt;/a>), and as implementations are added, they are given a name.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="lookupdistinctconfig-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig-13">13&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IHost&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">DistinctLookupFactoryBenchmark&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">host&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Host&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CreateDefaultBuilder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ConfigureServices&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">services&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">services&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddNamedUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">builder&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">builder&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;aws&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;azure&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AzureUploader&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ftp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FTPUploader&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">DistinctLookupFactoryHandler&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">).&lt;/span>&lt;span class="n">Build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>There are a number of new components here:&lt;/p>
&lt;ol>
&lt;li>AddNamedUploader extension method (&lt;a class="link" href="#lookupdistinctconfig-6" >line 6&lt;/a>): this will setup base functionality required as expose the UploaderBuilder as a parameter&lt;/li>
&lt;li>builder, of type UploaderBuilder (&lt;a class="link" href="#lookupdistinctconfig-6" >line 6&lt;/a>): this is an Action which handles keeping track of the name-implementation link.&lt;/li>
&lt;li>AddTransient extension method (&lt;a class="link" href="#lookupdistinctconfig-7" >lines 7-9&lt;/a>): this is &lt;strong>not&lt;/strong> the same as the normal AddTransient method on IServiceCollection, but an extension method on the builder (UploaderBuilder) which wraps the usual .NET AddTransient method.&lt;/li>
&lt;/ol>
&lt;p>The full definition of the classes (along with all other code) can be found on &lt;a class="link" href="https://github.com/always-developing/Rollcall.Extensions.Microsoft.DependencyInjection/tree/main/benchmark/MultiImplementationBenchark/8.DistinctLookupFactory" target="_blank" rel="noopener"
>Github, here&lt;/a>&lt;/p>
&lt;p>In summary though, it works as follows:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;em>AddNamedUploader&lt;/em> creates an instance of &lt;em>UploaderTypes&lt;/em>, which keeps track of the name and the implementation Type. &lt;em>UploaderTypes&lt;/em> is added to the DI container as a singleton.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="lookupdistinctconfig2-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig2-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig2-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig2-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig2-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig2-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig2-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig2-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig2-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig2-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig2-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig2-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig2-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig2-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig2-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig2-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig2-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig2-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig2-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig2-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig2-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig2-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig2-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig2-12">12&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">IServiceCollection&lt;/span> &lt;span class="n">AddNamedUploader&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>
&lt;span class="k">this&lt;/span> &lt;span class="n">IServiceCollection&lt;/span> &lt;span class="n">services&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Action&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">UploaderBuilder&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="k">class&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">uploaderType&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UploaderTypes&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;();&lt;/span>
&lt;span class="n">services&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddSingleton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uploaderType&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">services&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DistinctLookupFactory&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;));&lt;/span>
&lt;span class="n">builder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">UploaderBuilder&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">services&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uploaderType&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">services&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;em>AddTransient&lt;/em> method will add records to the &lt;em>UploaderTypes&lt;/em> class, as well as add the implementation to the DI container.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="lookupdistinctconfig3-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig3-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig3-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig3-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig3-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig3-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig3-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig3-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig3-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig3-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig3-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig3-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig3-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig3-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig3-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig3-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig3-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig3-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctconfig3-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctconfig3-10">10&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">UploaderBuilder&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>
&lt;span class="k">this&lt;/span> &lt;span class="n">UploaderBuilder&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="kt">string&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Type&lt;/span> &lt;span class="n">implementation&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="k">class&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">builder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Types&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">implementation&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">builder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Services&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">implementation&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Usage:&lt;/strong>&lt;br>
The factory is now injected into the relevant class (&lt;a class="link" href="#lookupdistinctusage-4" >line 4&lt;/a>) for a specific interface, and is then invoked to get the requested implementation by name (&lt;a class="link" href="#lookupdistinctusage-12" >line 12&lt;/a>)
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="lookupdistinctusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="lookupdistinctusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#lookupdistinctusage-14">14&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">DistinctLookupFactoryHandler&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">DistinctLookupFactory&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="m">_d&lt;/span>&lt;span class="n">istinctFactory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">DistinctLookupFactoryHandler&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">DistinctLookupFactory&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">distinctFactory&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_d&lt;/span>&lt;span class="n">istinctFactory&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">distinctFactory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_d&lt;/span>&lt;span class="n">istinctFactory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ftp&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">UploadFile&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Pros:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Not all implementations are instantiated&lt;/li>
&lt;li>Implementation can be selected/changed at runtime&lt;/li>
&lt;li>Good overall performance&lt;/li>
&lt;li>No hard coded switch statement which needs to be maintained&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cons:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>The most complicated to setup, with the most moving parts&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Performance:&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Method&lt;/th>
&lt;th style="text-align:right">Mean&lt;/th>
&lt;th style="text-align:right">Error&lt;/th>
&lt;th style="text-align:right">StdDev&lt;/th>
&lt;th style="text-align:right">Ratio&lt;/th>
&lt;th style="text-align:right">RatioSD&lt;/th>
&lt;th style="text-align:right">Gen 0&lt;/th>
&lt;th style="text-align:right">Allocated&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Enumerable&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">86.99 ns&lt;/td>
&lt;td style="text-align:right">0.987 ns&lt;/td>
&lt;td style="text-align:right">0.924 ns&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">0.00&lt;/td>
&lt;td style="text-align:right">0.0421&lt;/td>
&lt;td style="text-align:right">264 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Factory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">103.20 ns&lt;/td>
&lt;td style="text-align:right">1.324 ns&lt;/td>
&lt;td style="text-align:right">1.238 ns&lt;/td>
&lt;td style="text-align:right">1.19&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0459&lt;/td>
&lt;td style="text-align:right">288 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TypeFactory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">525.19 ns&lt;/td>
&lt;td style="text-align:right">2.624 ns&lt;/td>
&lt;td style="text-align:right">2.455 ns&lt;/td>
&lt;td style="text-align:right">6.04&lt;/td>
&lt;td style="text-align:right">0.07&lt;/td>
&lt;td style="text-align:right">0.0277&lt;/td>
&lt;td style="text-align:right">176 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Delegate&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">111.45 ns&lt;/td>
&lt;td style="text-align:right">1.456 ns&lt;/td>
&lt;td style="text-align:right">1.291 ns&lt;/td>
&lt;td style="text-align:right">1.28&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0178&lt;/td>
&lt;td style="text-align:right">112 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TypeDelegate&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">861.84 ns&lt;/td>
&lt;td style="text-align:right">6.599 ns&lt;/td>
&lt;td style="text-align:right">5.850 ns&lt;/td>
&lt;td style="text-align:right">9.90&lt;/td>
&lt;td style="text-align:right">0.15&lt;/td>
&lt;td style="text-align:right">0.0343&lt;/td>
&lt;td style="text-align:right">216 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Distinct&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">50.78 ns&lt;/td>
&lt;td style="text-align:right">0.441 ns&lt;/td>
&lt;td style="text-align:right">0.413 ns&lt;/td>
&lt;td style="text-align:right">0.58&lt;/td>
&lt;td style="text-align:right">0.01&lt;/td>
&lt;td style="text-align:right">0.0038&lt;/td>
&lt;td style="text-align:right">24 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DistinctFactory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">96.22 ns&lt;/td>
&lt;td style="text-align:right">1.378 ns&lt;/td>
&lt;td style="text-align:right">1.289 ns&lt;/td>
&lt;td style="text-align:right">1.11&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0076&lt;/td>
&lt;td style="text-align:right">48 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DistinctLookupFactory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">92.96 ns&lt;/td>
&lt;td style="text-align:right">0.764 ns&lt;/td>
&lt;td style="text-align:right">0.714 ns&lt;/td>
&lt;td style="text-align:right">1.07&lt;/td>
&lt;td style="text-align:right">0.01&lt;/td>
&lt;td style="text-align:right">0.0126&lt;/td>
&lt;td style="text-align:right">80 B&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="rollcall">Rollcall&lt;/h3>
&lt;p>&lt;code>Rollcall&lt;/code> is a library (written by me) which extends the &lt;code>DistinctLookupFactory&lt;/code> approach and makes it generic so that it will function with any interface and implementation. &lt;a class="link" href="https://www.nuget.org/packages/Rollcall.Extensions.Microsoft.DependencyInjection/" target="_blank" rel="noopener"
>Rollcall is available on Nuget&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Configuration:&lt;/strong>&lt;br>
The setup is almost identical to the &lt;code>DistinctLookupFactory&lt;/code>, but without the need for the factory, as this is built into the &lt;code>Rollcall&lt;/code> library.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="rollcallconfig-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallconfig-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallconfig-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallconfig-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallconfig-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallconfig-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallconfig-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallconfig-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallconfig-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallconfig-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallconfig-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallconfig-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallconfig-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallconfig-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallconfig-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallconfig-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallconfig-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallconfig-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallconfig-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallconfig-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallconfig-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallconfig-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallconfig-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallconfig-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallconfig-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallconfig-13">13&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IHost&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">RollcallBenchmark&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">host&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Host&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CreateDefaultBuilder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ConfigureServices&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">services&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">services&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">RollcallHandler&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddNamedService&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">builder&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">builder&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;aws&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;azure&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AzureUploader&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ftp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FTPUploader&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">).&lt;/span>&lt;span class="n">Build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Usage:&lt;/strong>&lt;br>
The Rollcall provider/factory is now injected into the relevant class (&lt;a class="link" href="#rollcallusage-4" >line 4&lt;/a>) for a specific interface, and is then invoked to get the requested implementation by name (&lt;a class="link" href="#rollcallusage-12" >line 12&lt;/a>)
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="rollcallusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-15">15&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">RollcallHandler&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IRollcallProvider&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">provider&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">RollcallHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IRollcallProvider&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">provider&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">provider&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">provider&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">providerName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;aws&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">uploader&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">provider&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">providerName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">uploader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">UploadFile&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
Not shown above, but one could also inject IServiceProvider and used the provided GetService extension method to get the service by name.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Pros:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Not all implementations are instantiated&lt;/li>
&lt;li>Implementation can be selected/changed at runtime&lt;/li>
&lt;li>Good overall performance&lt;/li>
&lt;li>No hard coded switch statement which needs to be maintained&lt;/li>
&lt;li>Works with any interface + implementation, and provides all functionality out the box&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cons:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Slight performance overhead when compared to the non-generic method&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Performance:&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Method&lt;/th>
&lt;th style="text-align:right">Mean&lt;/th>
&lt;th style="text-align:right">Error&lt;/th>
&lt;th style="text-align:right">StdDev&lt;/th>
&lt;th style="text-align:right">Ratio&lt;/th>
&lt;th style="text-align:right">RatioSD&lt;/th>
&lt;th style="text-align:right">Gen 0&lt;/th>
&lt;th style="text-align:right">Allocated&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Enumerable&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">86.99 ns&lt;/td>
&lt;td style="text-align:right">0.987 ns&lt;/td>
&lt;td style="text-align:right">0.924 ns&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">0.00&lt;/td>
&lt;td style="text-align:right">0.0421&lt;/td>
&lt;td style="text-align:right">264 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Factory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">103.20 ns&lt;/td>
&lt;td style="text-align:right">1.324 ns&lt;/td>
&lt;td style="text-align:right">1.238 ns&lt;/td>
&lt;td style="text-align:right">1.19&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0459&lt;/td>
&lt;td style="text-align:right">288 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TypeFactory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">525.19 ns&lt;/td>
&lt;td style="text-align:right">2.624 ns&lt;/td>
&lt;td style="text-align:right">2.455 ns&lt;/td>
&lt;td style="text-align:right">6.04&lt;/td>
&lt;td style="text-align:right">0.07&lt;/td>
&lt;td style="text-align:right">0.0277&lt;/td>
&lt;td style="text-align:right">176 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Delegate&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">111.45 ns&lt;/td>
&lt;td style="text-align:right">1.456 ns&lt;/td>
&lt;td style="text-align:right">1.291 ns&lt;/td>
&lt;td style="text-align:right">1.28&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0178&lt;/td>
&lt;td style="text-align:right">112 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TypeDelegate&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">861.84 ns&lt;/td>
&lt;td style="text-align:right">6.599 ns&lt;/td>
&lt;td style="text-align:right">5.850 ns&lt;/td>
&lt;td style="text-align:right">9.90&lt;/td>
&lt;td style="text-align:right">0.15&lt;/td>
&lt;td style="text-align:right">0.0343&lt;/td>
&lt;td style="text-align:right">216 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Distinct&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">50.78 ns&lt;/td>
&lt;td style="text-align:right">0.441 ns&lt;/td>
&lt;td style="text-align:right">0.413 ns&lt;/td>
&lt;td style="text-align:right">0.58&lt;/td>
&lt;td style="text-align:right">0.01&lt;/td>
&lt;td style="text-align:right">0.0038&lt;/td>
&lt;td style="text-align:right">24 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DistinctFactory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">96.22 ns&lt;/td>
&lt;td style="text-align:right">1.378 ns&lt;/td>
&lt;td style="text-align:right">1.289 ns&lt;/td>
&lt;td style="text-align:right">1.11&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0076&lt;/td>
&lt;td style="text-align:right">48 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DistinctLookupFactory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">92.96 ns&lt;/td>
&lt;td style="text-align:right">0.764 ns&lt;/td>
&lt;td style="text-align:right">0.714 ns&lt;/td>
&lt;td style="text-align:right">1.07&lt;/td>
&lt;td style="text-align:right">0.01&lt;/td>
&lt;td style="text-align:right">0.0126&lt;/td>
&lt;td style="text-align:right">80 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rollcall&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">124.52 ns&lt;/td>
&lt;td style="text-align:right">1.485 ns&lt;/td>
&lt;td style="text-align:right">1.389 ns&lt;/td>
&lt;td style="text-align:right">1.43&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0076&lt;/td>
&lt;td style="text-align:right">48 B&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="rollcall-with-func">Rollcall with Func&lt;/h3>
&lt;p>&lt;code>Rollcall&lt;/code> can also be used with a implementation factory, a Func&amp;lt;IServiceProvider,object&amp;gt; method. This method is called when requesting the implementation by name from the DI container. &lt;a class="link" href="https://www.nuget.org/packages/Rollcall.Extensions.Microsoft.DependencyInjection/" target="_blank" rel="noopener"
>Available on NuGet.&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Configuration:&lt;/strong>&lt;br>
The setup is a little more complicated than before, as some of the configuration needs to be done manually (instead of by the &lt;code>Rollcall&lt;/code> package)
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="rollcallfuncconfig-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallfuncconfig-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallfuncconfig-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallfuncconfig-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallfuncconfig-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallfuncconfig-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallfuncconfig-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallfuncconfig-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallfuncconfig-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallfuncconfig-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallfuncconfig-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallfuncconfig-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallfuncconfig-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallfuncconfig-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallfuncconfig-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallfuncconfig-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallfuncconfig-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallfuncconfig-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallfuncconfig-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallfuncconfig-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallfuncconfig-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallfuncconfig-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallfuncconfig-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallfuncconfig-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallfuncconfig-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallfuncconfig-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallfuncconfig-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallfuncconfig-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallfuncconfig-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallfuncconfig-15">15&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IHost&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">RollcallFuncBenchmark&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">host&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Host&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CreateDefaultBuilder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">ConfigureServices&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">services&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">services&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">RollcallFuncHandler&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">AzureUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">FTPUploader&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddNamedService&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">builder&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">builder&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;aws&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sp&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">sp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AWSUploader&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;azure&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sp&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">sp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AzureUploader&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">AddTransient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ftp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sp&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">sp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FTPUploader&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="p">)).&lt;/span>&lt;span class="n">Build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Usage:&lt;/strong>&lt;br>
The usage is exactly the same with the Func&amp;lt;&amp;gt; as with the normal interface + implementation (as shown above)
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="rollcallusage-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="rollcallusage-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#rollcallusage-15">15&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">RollcallFuncHandler&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">readonly&lt;/span> &lt;span class="n">IRollcallProvider&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">provider&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="n">RollcallFuncHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IRollcallProvider&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">IFileUploader&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">provider&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="m">_&lt;/span>&lt;span class="n">provider&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">provider&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">providerName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;aws&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">uploader&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">_&lt;/span>&lt;span class="n">provider&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">providerName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">uploader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">UploadFile&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
Not shown above, but one could also inject IServiceProvider and used the provided GetService extension method to get the service by name.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Pros:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Not all implementations are instantiated&lt;/li>
&lt;li>Implementation can be selected/changed at runtime&lt;/li>
&lt;li>Good overall performance&lt;/li>
&lt;li>No hard coded switch statement which needs to be maintained&lt;/li>
&lt;li>Works with any interface + func&amp;lt;&amp;gt;, and provides all functionality out the box&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cons:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Slight performance overhead when compared to the non-generic method, and when compared
to the interface + implementation method.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Performance:&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Method&lt;/th>
&lt;th style="text-align:right">Mean&lt;/th>
&lt;th style="text-align:right">Error&lt;/th>
&lt;th style="text-align:right">StdDev&lt;/th>
&lt;th style="text-align:right">Ratio&lt;/th>
&lt;th style="text-align:right">RatioSD&lt;/th>
&lt;th style="text-align:right">Gen 0&lt;/th>
&lt;th style="text-align:right">Allocated&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Enumerable&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">86.99 ns&lt;/td>
&lt;td style="text-align:right">0.987 ns&lt;/td>
&lt;td style="text-align:right">0.924 ns&lt;/td>
&lt;td style="text-align:right">1.00&lt;/td>
&lt;td style="text-align:right">0.00&lt;/td>
&lt;td style="text-align:right">0.0421&lt;/td>
&lt;td style="text-align:right">264 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Factory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">103.20 ns&lt;/td>
&lt;td style="text-align:right">1.324 ns&lt;/td>
&lt;td style="text-align:right">1.238 ns&lt;/td>
&lt;td style="text-align:right">1.19&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0459&lt;/td>
&lt;td style="text-align:right">288 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TypeFactory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">525.19 ns&lt;/td>
&lt;td style="text-align:right">2.624 ns&lt;/td>
&lt;td style="text-align:right">2.455 ns&lt;/td>
&lt;td style="text-align:right">6.04&lt;/td>
&lt;td style="text-align:right">0.07&lt;/td>
&lt;td style="text-align:right">0.0277&lt;/td>
&lt;td style="text-align:right">176 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Delegate&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">111.45 ns&lt;/td>
&lt;td style="text-align:right">1.456 ns&lt;/td>
&lt;td style="text-align:right">1.291 ns&lt;/td>
&lt;td style="text-align:right">1.28&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0178&lt;/td>
&lt;td style="text-align:right">112 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TypeDelegate&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">861.84 ns&lt;/td>
&lt;td style="text-align:right">6.599 ns&lt;/td>
&lt;td style="text-align:right">5.850 ns&lt;/td>
&lt;td style="text-align:right">9.90&lt;/td>
&lt;td style="text-align:right">0.15&lt;/td>
&lt;td style="text-align:right">0.0343&lt;/td>
&lt;td style="text-align:right">216 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Distinct&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">50.78 ns&lt;/td>
&lt;td style="text-align:right">0.441 ns&lt;/td>
&lt;td style="text-align:right">0.413 ns&lt;/td>
&lt;td style="text-align:right">0.58&lt;/td>
&lt;td style="text-align:right">0.01&lt;/td>
&lt;td style="text-align:right">0.0038&lt;/td>
&lt;td style="text-align:right">24 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DistinctFactory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">96.22 ns&lt;/td>
&lt;td style="text-align:right">1.378 ns&lt;/td>
&lt;td style="text-align:right">1.289 ns&lt;/td>
&lt;td style="text-align:right">1.11&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0076&lt;/td>
&lt;td style="text-align:right">48 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DistinctLookupFactory&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">92.96 ns&lt;/td>
&lt;td style="text-align:right">0.764 ns&lt;/td>
&lt;td style="text-align:right">0.714 ns&lt;/td>
&lt;td style="text-align:right">1.07&lt;/td>
&lt;td style="text-align:right">0.01&lt;/td>
&lt;td style="text-align:right">0.0126&lt;/td>
&lt;td style="text-align:right">80 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rollcall&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">124.52 ns&lt;/td>
&lt;td style="text-align:right">1.485 ns&lt;/td>
&lt;td style="text-align:right">1.389 ns&lt;/td>
&lt;td style="text-align:right">1.43&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0076&lt;/td>
&lt;td style="text-align:right">48 B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RollcallFunc&lt;/td>
&lt;td>Execute&lt;/td>
&lt;td style="text-align:right">134.68 ns&lt;/td>
&lt;td style="text-align:right">1.224 ns&lt;/td>
&lt;td style="text-align:right">1.085 ns&lt;/td>
&lt;td style="text-align:right">1.55&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">0.0076&lt;/td>
&lt;td style="text-align:right">48 B&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>There are a variety of ways to handle multiple implementations of the same interface, none of which are wrong. However, not all are suitable for every situation and using the incorrect one for the situation could result in a performance impact.&lt;br>
There are trade-offs and pros and cons to using each technique - the most performant might be the most difficult to maintain for your situation.&lt;br>
&lt;strong>Test the various methods and find which works best and is most optimal for your particular situation.&lt;/strong>&lt;/p>
&lt;h2 id="references-and-links">References and links&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/always-developing/Rollcall.Extensions.Microsoft.DependencyInjection" target="_blank" rel="noopener"
>Rollcall Github repo&lt;/a>&lt;br>
&lt;a class="link" href="https://www.nuget.org/packages/Rollcall.Extensions.Microsoft.DependencyInjection/" target="_blank" rel="noopener"
>Rollcall Nuget package&lt;/a>&lt;/p>
&lt;hr></description></item><item><title>Useful Visual Studio keyboard shortcuts</title><link>https://always-developing.github.io/p/vs-keyboard-shortcuts/</link><pubDate>Mon, 25 Oct 2021 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/vs-keyboard-shortcuts/</guid><description>&lt;h2 id="why-learn-keyboard-shortcuts">Why learn keyboard shortcuts?&lt;/h2>
&lt;p>So I confess I have no empirical evidence to backup the &lt;code>up to 20% more productive&lt;/code> claim. That number is just made up, but with years of experience on my side, it honestly feels fairly accurate to me!&lt;/p>
&lt;p>Having often been involved in assisting, troubleshooting and debugging code with fellow developers, it is apparent that the developers which are familiar with their IDE, and make use of the shortcuts, &lt;em>generally&lt;/em> (but not always!) resolve tasks quicker and more efficiently than those that don&amp;rsquo;t.&lt;/p>
&lt;p>Every hand reach for the mouse, every unnecessary cursor movement, every menu click is &lt;em>potentially&lt;/em> a waste of time. It&amp;rsquo;s time two hands are not on the keyboard writing code. The more shortcuts a person is familiar with, the more the unnecessary time wasting can be minimized. Thus, more programming time and more productivity!&lt;/p>
&lt;ul>
&lt;li>Is there anything wrong with not making use of keyboard shortcuts? &lt;strong>Definitely not.&lt;/strong>&lt;/li>
&lt;li>Does not using keyboard shortcuts make a person any less of a developer? &lt;strong>Definitely not.&lt;/strong>&lt;/li>
&lt;li>Could using keyboard shortcuts make a person more productive? &lt;strong>Definitely yes.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="visual-studio-shortcuts-to-learn">Visual Studio shortcuts to learn&lt;/h2>
&lt;p>Below is a list of useful &lt;code>Visual Studio&lt;/code> shortcuts I use the most often and find the more useful in my day to day development. This is by no means an exhaustive list - however I have no doubt a massive benefit can be gained by learning just a few of these.&lt;/p>
&lt;p>Some of these shortcuts are not just Visual Studio shortcuts, and also be leveraged in other applications (such as VS Code).&lt;/p>
&lt;blockquote>
&lt;div>
&lt;div style="width: 5%; float: left; vertical-align: middle; padding-right: 60px;">
&lt;i class="inline-svg" >&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-info-circle" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#00abfb" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;circle cx="12" cy="12" r="9" />
&lt;line x1="12" y1="8" x2="12.01" y2="8" />
&lt;polyline points="11 12 12 12 12 16 13 16" />
&lt;/svg>&lt;/i>
&lt;/div>
&lt;div>
&lt;p>&lt;ul>
&lt;li>
&lt;p>&lt;code>+&lt;/code> indicates a combination of keys is to be pressed to perform the action.&lt;br>
In some cases (like the example below), the final key can be tapped to perform the action multiple times (while still holding down the initial two keys)&lt;br>
E.g. &lt;code>Ctrl + Shift + -&lt;/code>: &lt;em>Ctrl&lt;/em> and &lt;em>Shift&lt;/em> can be held down at the same time while the &lt;em>-&lt;/em> key is pressed multiple times.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>,&lt;/code> is used to indicate a sequence of keys is to be pressed.&lt;br>
E.g. &lt;code>Ctrl + M, O&lt;/code>: &lt;em>Ctrl&lt;/em> is held down, while &lt;em>M&lt;/em> is pressed and then &lt;em>O&lt;/em> is pressed.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/blockquote>
&lt;h3 id="view-shortcuts">View shortcuts&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Ctrl + -&lt;/code> and &lt;code>Ctrl + Shift + -&lt;/code>: &lt;strong>Navigate backwards and forwards&lt;/strong> 🧭&lt;br>
Moves the cursor, backwards and forwards through the history of visited cursor locations in file(s). This is incredibly useful especially when used in conjunction with the &lt;em>Go to Definition&lt;/em> / &lt;code>Ctrl + F12&lt;/code> function.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Ctrl + .&lt;/code>: &lt;strong>Quick actions and refactoring&lt;/strong> 💡&lt;br>
When the cursor is over a block of code, this shortcut will bring up the quick actions and refactoring (Lightbulb or screwdriver icon) menu&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Ctrl + Spacebar&lt;/code>: &lt;strong>Trigger Intellisense&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="editor-shortcuts">Editor shortcuts&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Ctrl + ←&lt;/code> and &lt;code>Ctrl + →&lt;/code>: &lt;strong>Moves cursor one word to the left or right&lt;/strong> ⬅️➡️&lt;br>
Great when used in combination with the &lt;em>Shift&lt;/em> key (e.g. &lt;code>Ctrl + Shift + →&lt;/code>) to highlight/select entire word(s).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Ctrl + Del&lt;/code>: &lt;strong>Delete an entire line&lt;/strong> 🚫&lt;br>
When you dislike your code and you want it gone quickly.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Ctrl + M, O&lt;/code>: &lt;strong>Collapse to definitions&lt;/strong> 📄&lt;br>
Collapse all methods, regions, comment blocks etc in the current document.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Ctrl + F&lt;/code>: &lt;strong>Find in current file&lt;/strong> 🔍&lt;br>
Defaults to search in only the current document, but this can be changed to include more documents (e.g. entire solution)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Ctrl + Shift + F&lt;/code>: &lt;strong>Find in all files&lt;/strong> 🔍🔍&lt;br>
Opens the &lt;em>Find in files&lt;/em> dialog. Defaults to search the entire solution, but this can be changed to include less documents (e.g. current document)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Ctrl + H&lt;/code>: &lt;strong>Replace in current file&lt;/strong> 📑&lt;br>
Defaults to search in only the current document, but this can be changed to include more documents (e.g. entire solution)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Ctrl + Shift + H&lt;/code>: &lt;strong>Replace in all files&lt;/strong> 📑📑&lt;br>
Opens the Replace in files_ dialog. Defaults to replace in the entire solution, but this can be changed to include less documents (e.g. current document)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Ctrl + K, C&lt;/code> and &lt;code>Ctrl + K, U&lt;/code>: &lt;strong>Comments and uncomment code selection&lt;/strong> 📜&lt;br>
Comment and uncomment code selection. If no selection is made, the line of code the cursor is current on will be commented/un-commented.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="refactor-shortcuts">Refactor shortcuts&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>'ctor', Tab, Tab&lt;/code>: &lt;strong>Constructor creation&lt;/strong> 🏗️&lt;br>
This is a prebuilt code snippet and not really a keyboard shortcut. This will create a default parameter-less constructor for the current class&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Ctrl + R, R&lt;/code>: &lt;strong>Rename&lt;/strong> 💬&lt;br>
Allows for the rename of a class, method, variable etc. as well as all usages of said code. Place the cursor on a method name, for example, press &lt;code>Ctrl + R, R&lt;/code>, type in the new name and hit enter. The method name and all usages of the name have now been renamed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Ctrl + R, M&lt;/code>: &lt;strong>Extract to method&lt;/strong> 📤&lt;br>
Create a new method containing the selected code, and invoke the new method from the current code location. Great for code clean up.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Ctrl + R, G&lt;/code>: &lt;strong>Remove and sort &lt;em>usings&lt;/em>&lt;/strong> ⛔
Performing this shortcut anywhere in a document will remove any unused &lt;em>usings&lt;/em> in the file, as well as sort the remaining ones alphabetically.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="build-shortcuts">Build shortcuts&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>F5&lt;/code>: &lt;strong>Build and start application with the &lt;em>debugger attached&lt;/em>&lt;/strong>. 🐛&lt;br>
Breakpoints will pause code execution, code can be stepped through, etc.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Ctrl + F5&lt;/code>: &lt;strong>Build and start application &lt;em>without the debugger attached&lt;/em>&lt;/strong>. 🏃‍♂️&lt;br>
No debug symbols will be loaded, so breakpoints will not be hit. Most often used when:&lt;/p>
&lt;ol>
&lt;li>Running multiple dependent services/applications in the same solution (without the need for debugging all the projects)&lt;/li>
&lt;li>Running benchmarking (using BenchmarkDotNet)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="code-quality-shortcuts">Code quality shortcuts&lt;/h3>
&lt;ul>
&lt;li>&lt;code>///&lt;/code>: &lt;strong>Adds comments&lt;/strong> 🧾&lt;br>
Used above a method or class to create and partially auto populate the comments.&lt;br>
These comments can be used to generate an XML document file (especially useful for library authors)&lt;/li>
&lt;/ul>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>It does take a conscious effort when starting to actually slow down, lookup the shortcut to be used and force yourself to use it. But adaption happens quickly, and before you know it you&amp;rsquo;ll be using the keyboard shortcuts without even realising it.&lt;/p>
&lt;p>It is an on-going learning process - if you find yourself performing the same time consuming action over and over in the IDE, consider investigating and learning the shortcut.&lt;/p>
&lt;p>The list of &lt;a class="link" href="https://docs.microsoft.com/en-us/visualstudio/ide/default-keyboard-shortcuts-in-visual-studio?view=vs-2019" target="_blank" rel="noopener"
>&lt;code>VS2019 Keyboard shortcuts&lt;/code>&lt;/a>. (this mostly apply to VS2017 and VS2022 as well)&lt;/p>
&lt;p>Use shortcuts. Be more productive.&lt;/p></description></item><item><title>C# String vs string</title><link>https://always-developing.github.io/p/string-vs-string/</link><pubDate>Thu, 21 Oct 2021 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/p/string-vs-string/</guid><description>&lt;h2 id="whats-the-issue">What&amp;rsquo;s the issue?&lt;/h2>
&lt;p>When working with strings in C# one can either use &lt;code>String&lt;/code> (uppercase) or &lt;code>string&lt;/code> (lowercase) and in both cases the code will compile and execute.&lt;/p>
&lt;p>Explicitly typed string variables can be done in either of the following ways:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="kt">string&lt;/span> &lt;span class="n">variable&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Always Developing&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">variable&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Always Developing&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Or when invoking string related methods, both of the following examples are valid:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="kt">string&lt;/span> &lt;span class="n">variable&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Always Developing using {0}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;C#&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">variable&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Always Developing using {0}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Typescript&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Whats the difference between using &lt;code>String&lt;/code> and using &lt;code>string&lt;/code>? Is there a difference? Does it really matter?&lt;/p>
&lt;h2 id="is-there-a-difference">Is there a difference?&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>System.String&lt;/code> is a .NET CLR (Common Runtime Library) class. This means it&amp;rsquo;s part of the core .NET environment, which sits one level below the specific language implementation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>string&lt;/code> is a C# specific keyword, which is an alias for the CLR &lt;code>System.String&lt;/code> type.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>What this means is that &lt;code>string&lt;/code> is just another name for &lt;code>System.String&lt;/code> and they are &lt;strong>effectively equivalent&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;div>
&lt;div style="width: 5%; float: left; vertical-align: middle; padding-right: 60px;">
&lt;i class="inline-svg" >&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-info-circle" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#00abfb" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;circle cx="12" cy="12" r="9" />
&lt;line x1="12" y1="8" x2="12.01" y2="8" />
&lt;polyline points="11 12 12 12 12 16 13 16" />
&lt;/svg>&lt;/i>
&lt;/div>
&lt;div>
&lt;p>The same way &lt;code>int&lt;/code> is an alias and maps to the CLR type &lt;code>System.Int32&lt;/code> and &lt;code>long&lt;/code> is an alias and map to CLR type &lt;code>System.Int64&lt;/code>, &lt;code>string&lt;/code> is an alias and maps to the CLR type &lt;code>System.String&lt;/code>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/blockquote>
&lt;h2 id="deeper-comparisons">Deeper comparisons&lt;/h2>
&lt;h3 id="variable-declaration">Variable declaration&lt;/h3>
&lt;p>We can further confirm &lt;code>String&lt;/code> and &lt;code>string&lt;/code> are equivalent by comparing the IL (Intermediate Language) code generated when declaring variables using both of the types.&lt;/p>
&lt;blockquote>
&lt;div>
&lt;div style="width: 5%; float: left; vertical-align: middle; padding-right: 60px;">
&lt;i class="inline-svg" >&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-info-circle" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#00abfb" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;circle cx="12" cy="12" r="9" />
&lt;line x1="12" y1="8" x2="12.01" y2="8" />
&lt;polyline points="11 12 12 12 12 16 13 16" />
&lt;/svg>&lt;/i>
&lt;/div>
&lt;div>
&lt;p>This post is primarily to compare the C# &lt;code>String&lt;/code> and &lt;code>string&lt;/code> types, but VB.NET examples have also been included in the comparison for completeness.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/blockquote>
&lt;p>Take these three methods, all functionally equivalent, but declaring the variable using the different types:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">GetString&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">variable&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;string value&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">variable&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">GetString&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">string&lt;/span> &lt;span class="n">variable&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;string value&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">variable&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-VB.net" data-lang="VB.net">&lt;span class="k">Public&lt;/span> &lt;span class="k">Function&lt;/span> &lt;span class="nf">GetString&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="ow">As&lt;/span> &lt;span class="kt">String&lt;/span>
&lt;span class="k">Dim&lt;/span> &lt;span class="n">variable&lt;/span> &lt;span class="ow">As&lt;/span> &lt;span class="kt">String&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;string value&amp;#34;&lt;/span>
&lt;span class="k">Return&lt;/span> &lt;span class="n">variable&lt;/span>
&lt;span class="k">End&lt;/span> &lt;span class="k">Function&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The IL code generated by all three examples is all effectively identical:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="c1">// Methods
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">method&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">hidebysig&lt;/span>
&lt;span class="n">instance&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">GetString&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="n">cil&lt;/span> &lt;span class="n">managed&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">// Method begins at RVA 0x2050
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Code size 6 (0x6)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">maxstack&lt;/span> &lt;span class="m">8&lt;/span>
&lt;span class="n">IL_0000&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ldstr&lt;/span> &lt;span class="s">&amp;#34;string value&amp;#34;&lt;/span>
&lt;span class="n">IL_0005&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ret&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="c1">// end of method CClass::GetString
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="string-method-invocation">String method invocation&lt;/h3>
&lt;p>So it&amp;rsquo;s confirmed that &lt;code>String&lt;/code> and &lt;code>string&lt;/code> are equivalent when declaring variables, but what about with method invocation?&lt;/p>
&lt;p>Again, three functionally equivalent methods, but invoking the &lt;code>Format&lt;/code> method differently:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">StringFormat&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">insertString&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;C#&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">variable&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Always Developing using {0}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">insertString&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">variable&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="k">public&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">StringFormat&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">insertString&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;C#&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">variable&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Always Developing using {0}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">insertString&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">variable&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-VB.net" data-lang="VB.net">&lt;span class="k">Public&lt;/span> &lt;span class="k">Function&lt;/span> &lt;span class="nf">StringFormat&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="ow">As&lt;/span> &lt;span class="kt">String&lt;/span>
&lt;span class="k">Dim&lt;/span> &lt;span class="n">insertString&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;C#&amp;#34;&lt;/span>
&lt;span class="k">Dim&lt;/span> &lt;span class="n">variable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Always Developing using {0}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">insertString&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">Return&lt;/span> &lt;span class="n">variable&lt;/span>
&lt;span class="k">End&lt;/span> &lt;span class="k">Function&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>When the generated IL code is compared, in all three cases, it is equivalent:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="c1">// Methods
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">method&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">hidebysig&lt;/span>
&lt;span class="n">instance&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">StringFormat&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="n">cil&lt;/span> &lt;span class="n">managed&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">// Method begins at RVA 0x2050
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Code size 18 (0x12)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">maxstack&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">locals&lt;/span> &lt;span class="n">init&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="na"> [0]&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">insertString&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">IL_0000&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ldstr&lt;/span> &lt;span class="s">&amp;#34;C#&amp;#34;&lt;/span>
&lt;span class="n">IL_0005&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">stloc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="m">0&lt;/span>
&lt;span class="n">IL_0006&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ldstr&lt;/span> &lt;span class="s">&amp;#34;Always Developing using {0}&amp;#34;&lt;/span>
&lt;span class="n">IL_000b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ldloc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="m">0&lt;/span>
&lt;span class="n">IL_000c&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Private&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CoreLib&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">Format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">object&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">IL_0011&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ret&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="c1">// end of method CClass::StringFormat
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Use either &lt;code>String&lt;/code> or &lt;code>string&lt;/code>, they are effectively equivalent.&lt;/p>
&lt;p>However, the recommended approach is to use the C# language specific keyword &lt;code>string&lt;/code>, as it works without having to include &lt;code>using System;&lt;/code>&lt;/p>
&lt;blockquote>
&lt;div>
&lt;div style="width: 5%; float: left; vertical-align: middle; padding-right: 60px;">
&lt;i class="inline-svg" >&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-info-circle" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#00abfb" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;circle cx="12" cy="12" r="9" />
&lt;line x1="12" y1="8" x2="12.01" y2="8" />
&lt;polyline points="11 12 12 12 12 16 13 16" />
&lt;/svg>&lt;/i>
&lt;/div>
&lt;div>
&lt;p>The recommendation method of using &lt;code>string&lt;/code> comes from the official &lt;em>&lt;strong>&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/">Microsoft documentation&lt;/a>&lt;/strong>&lt;/em>, and is included as a default style rule in &lt;em>&lt;strong>&lt;a href="https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0049">Visual Studio&lt;/a>&lt;/strong>&lt;/em>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/blockquote>
&lt;blockquote>
&lt;div>
&lt;div style="width: 5%; float: left; vertical-align: middle; padding-right: 60px;">
&lt;i class="inline-svg" >&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-circle-check" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#7bc62d" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;circle cx="12" cy="12" r="9" />
&lt;path d="M9 12l2 2l4 -4" />
&lt;/svg>&lt;/i>
&lt;/div>
&lt;div>
&lt;p>&lt;p>It is recommended to use implicitly type local variables (where appropriate) by using the &lt;code>var&lt;/code> keyword (instead of &lt;code>string&lt;/code>, in the above examples), and having the type inferred by the compiled.&lt;/p>
&lt;p>The use of &lt;code>var&lt;/code> versus explicate declaration is a &lt;strong>personal preference&lt;/strong>, and will not effect the execution or performance of the code.&lt;/p>
&lt;p>Personally I use &lt;code>var&lt;/code> in my code: I find the code cleaner and easier to read. One can see the type being inferred by the compiler by hovering the mouse cursor over the &lt;code>var&lt;/code> keyword in Visual Studio.&lt;/p>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/blockquote>
&lt;h2 id="references-and-links">References and links&lt;/h2>
&lt;p>&lt;a class="link" href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/" target="_blank" rel="noopener"
>Microsoft string guidance&lt;/a>&lt;br>
&lt;a class="link" href="https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0049" target="_blank" rel="noopener"
>Microsoft style rule&lt;/a>&lt;br>
&lt;a class="link" href="https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions#implicitly-typed-local-variables" target="_blank" rel="noopener"
>Implicitly typed variables&lt;/a>&lt;br>
&lt;a class="link" href="https://sharplab.io" target="_blank" rel="noopener"
>Sharp lab - IL generator&lt;/a>&lt;/p></description></item></channel></rss>