<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DailyDrop on Always Developing</title><link>https://always-developing.github.io/categories/dailydrop/</link><description>Recent content in DailyDrop on Always Developing</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Thu, 10 Mar 2022 01:00:00 +0200</lastBuildDate><atom:link href="https://always-developing.github.io/categories/dailydrop/index.xml" rel="self" type="application/rss+xml"/><item><title>Duck typing in C#</title><link>https://always-developing.github.io/dailydrop/2022/03/10-duck-typing/</link><pubDate>Thu, 10 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/10-duck-typing/</guid><description>Daily Knowledge Drop The term duck typing refers to the ability to allow for an object to be passed to a method which expects a certain type, even if the object doesn&amp;rsquo;t inherit from the type.
This is more prevalent in dynamic languages and less prevalent in strong type languages, such as C# - however it is still occasionally used.
Duck typing summary The term duck typing is explained by the populate phrase: If it walks like a duck, and quacks like a duck, it must be a duck</description></item><item><title>Lazy loading objects with Lazy&lt;></title><link>https://always-developing.github.io/dailydrop/2022/03/09-lazy-class/</link><pubDate>Wed, 09 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/09-lazy-class/</guid><description>Daily Knowledge Drop The loading of (large) objects can be deferred until they are actually used and required using the Lazy&amp;lt;&amp;gt; class
Sample Use case In our use case, we have a FileEntity which contains details about a file in a specific location. There are two child entities which are properties to FileEntity:
FileSize: stores the file size in bytes (and just stores a double value, so is small) FileContents: stores the contents of the file as a string (depending on the size of the file, this can obviously be very large) The contents of the file will not always be used and are potentially very large - so let&amp;rsquo;s look at how we can defer loading the data until it is actually used and required.</description></item><item><title>Customize debugger class display</title><link>https://always-developing.github.io/dailydrop/2022/03/08-debug-ouput/</link><pubDate>Tue, 08 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/08-debug-ouput/</guid><description>Daily Knowledge Drop The format of how classes are displayed in the debugger can be customized, using a couple of methods.
Sample All the samples below use an instance of the following simple entity class:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // class definition public class Song { public int Id { get; set; } public string Name { get; set; } public string Artist { get; set; } public int YearReleased { get; set; } public int LengthInSeconds { get; set; } } // instance of the class var song = new Song { Id = 1, Name = &amp;#34;Everlong&amp;#34;, Artist = &amp;#34;Foo Fighters&amp;#34;, LengthInSeconds = 250, YearReleased = 1997 }; Default Display By default, the output of a class in the debugger uses the ToString method on a class.</description></item><item><title>Dependency Injection with Func and delegates</title><link>https://always-developing.github.io/dailydrop/2022/03/07-di-func-delegate/</link><pubDate>Mon, 07 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/07-di-func-delegate/</guid><description>Daily Knowledge Drop When requiring to abstract and inject a simple single method interface using dependency injection (DI), its possible to instead use a Func&amp;lt;&amp;gt; or a Delegate instead.
Examples Suppose we want to inject the date time using dependency injection, instead of using DateTime.Now or DateTimeOffSet.Now.
There are a few reasons to do this:
DateTime.Now returns the current system datetime. This does not account for users in different regions, daylight savings etc (this is a complex subject, see the NodaTime reference below for additional information) The current datetime is an external dependency - best practice is for all external dependencies to be abstracted, so that they can be mocked and successfully unit tested There are a number of ways to tackle this requirement.</description></item><item><title>Incremental source generators</title><link>https://always-developing.github.io/dailydrop/2022/03/04-incremental-generator/</link><pubDate>Fri, 04 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/04-incremental-generator/</guid><description>Daily Knowledge Drop Incremental source generators can be used to generated fixed code, which can be used in user code, which can then be used by the source generator to generate additional code.
This is done through the usage of RegisterPostInitializationOutput available to incremental generators.
This will make more sense as we look at an example. This example below is an extension of the example in last week&amp;rsquo;s &amp;ldquo;emitting source generated files&amp;rdquo; post.</description></item><item><title>Enumeration on a custom class</title><link>https://always-developing.github.io/dailydrop/2022/03/03-getenumerator/</link><pubDate>Thu, 03 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/03-getenumerator/</guid><description>Daily Knowledge Drop To enable enumeration on a class (ability to foreach on the class), the only requirement is for a method named GetEnumerator to exist on the class.
There is no requirement for the class to implement any interface (IEnumerable, IEnumerator etc), just the presence of the method is enough.
Without GetEnumerator Last week we looked at adding indexing to a class - adding enumeration is similar, so we&amp;rsquo;ll use similar examples.</description></item><item><title>Optional method parameters</title><link>https://always-developing.github.io/dailydrop/2022/03/02-optional-param-attribute/</link><pubDate>Wed, 02 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/02-optional-param-attribute/</guid><description>Daily Knowledge Drop In additional to giving a parameter a default value, so that it can be omitted when calling a method, the Optional attribute can also be used allow for parameter omission.
Parameter default values When defining a method, the parameters can be given a default value. This allows for the parameter to be omitted when calling the method:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // both required MethodNoDefaults(&amp;#34;John&amp;#34;, 50); // all parameters are required when calling this method void MethodNoDefaults(string name, int age) { Console.</description></item><item><title>System.Text.Json notifications</title><link>https://always-developing.github.io/dailydrop/2022/03/01-json-notifications/</link><pubDate>Tue, 01 Mar 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/03/01-json-notifications/</guid><description>Daily Knowledge Drop As part of .NET6, notification functionality was added to System.Text.Json, allowing for custom logic to be invoked during the serialization and deserializing of objects.
New interfaces Four new interfaces were introduced which can be implemented, according to the requirements:
IJsonOnSerialized IJsonOnSerializing IJsonOnDeserialized IJsonOnDeserializing To receive notifications, the class being serialized/deserialized, needs to implement one or many of the above interfaces.
Example For the examples below, consider a Song class, which has certain required fields in order to be valid.</description></item><item><title>EF Core 6 column order</title><link>https://always-developing.github.io/dailydrop/2022/02/28-ef-column-order/</link><pubDate>Mon, 28 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/28-ef-column-order/</guid><description>Daily Knowledge Drop The Column attribute, as well as the new HasColumnOrder fluent API can be used to determine the specifically order of sequence of columns in the table.
Configurations previously In previous version of Entity Framework Core (EF) the order in which the columns were defined on the entity, where the order in which they were created on the table
1 2 3 4 5 6 7 8 9 10 11 12 public class Song { public string Artist { get; set; } public int YearReleased { get; set; } public int Id { get; set; } public int LengthInSeconds { get; set; } public string Name { get; set; } } The Up method migration created to create the table would look as below.</description></item><item><title>LINQ improvements - FirstOrDefault defaults</title><link>https://always-developing.github.io/dailydrop/2022/02/25-firstordefault-default/</link><pubDate>Fri, 25 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/25-firstordefault-default/</guid><description>Daily Knowledge Drop A number of enhancements have been made to LINQ as part of .NET6 - one of those is the ability to set a default value to be returned from .FirstOrDefault().
Examples List&amp;lt;&amp;gt; is being used in the below examples, but the method is available on all compatible types, not just List&amp;lt;&amp;gt;.
Simple type list 1 2 3 4 5 6 7 8 9 10 11 12 // list of 11 integers var intValues = new List&amp;lt;int&amp;gt; { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; // older method, value found in list Console.</description></item><item><title>Entity Framework Core interceptors</title><link>https://always-developing.github.io/dailydrop/2022/02/24-efcore-interceptors/</link><pubDate>Thu, 24 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/24-efcore-interceptors/</guid><description>Daily Knowledge Drop Entity Framework Core has the concept of interceptors which allow for the insertion of custom logic during the query execution process.
There a number of real world applications for the functionality, for example:
Caching and retrieval of data Logging query or diagnostics information under certain conditions Modifying the query parameters, such as the timeout under certain conditions Interceptor structure Creating an interceptor is straight forward - a class is created which implements the abstract class DbCommandInterceptor, and then overrides the required relevant method(s).</description></item><item><title>Indexers - access a class as an array</title><link>https://always-developing.github.io/dailydrop/2022/02/23-indexers/</link><pubDate>Wed, 23 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/23-indexers/</guid><description>Daily Knowledge Drop Any (relevant) class can be extended so that it can be accessed as an array, using Indexers, just by adding a property to the class.
Without indexers In the examples below, we are using a ProductPrice entity. This class keeps some basic details of a product, as well as an array of prices, one price for each month of the year. So Prices[0] is the price for January, Prices[1] is the price for February and so on.</description></item><item><title>Customize source generator output location</title><link>https://always-developing.github.io/dailydrop/2022/02/22-emit-source-generator-files/</link><pubDate>Tue, 22 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/22-emit-source-generator-files/</guid><description>Daily Knowledge Drop The output location of code created by a Roslyn source generator can be customized, so that the output file can be included in source control (to be included in code reviews for example).
This post will give a brief overview of source generators, and then show the default behavior and how it can be customized.
This post will not go into detail regarding the finer details of source generators - if you would like more details on source generators, see the reference links below.</description></item><item><title>EF Core 6 EntityTypeConfiguration Attribute</title><link>https://always-developing.github.io/dailydrop/2022/02/21-ef-core6-entitytypeconfig/</link><pubDate>Mon, 21 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/21-ef-core6-entitytypeconfig/</guid><description>Daily Knowledge Drop A new attribute called EntityTypeConfiguration was introduced in Entity Framework 6, which allows for easier configuration of custom entity configurations.
Let&amp;rsquo;s take a look at how is simplifies the configuration of an entity.
Configurations previously There are a number of steps performed when manually configuring an entity using Entity Framework Core (EF).
Note: The entity structure below is not optimized or suitable for a production system, it is used just for sample purposes</description></item><item><title>Garbage collection configuration</title><link>https://always-developing.github.io/dailydrop/2022/02/18-gc-variables/</link><pubDate>Fri, 18 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/18-gc-variables/</guid><description>Daily Knowledge Drop There are a number of settings related to the .NET garbage collector (GC) which can be set at runtime using a variety of methods. Generally these do not need to be manually configured, but can be changed from the default to tweak and optimize performance of the application.
Configurations The settings which can be configured are listed below (more detailed information can be found under references section below)</description></item><item><title>Using with IDisposable</title><link>https://always-developing.github.io/dailydrop/2022/02/17-using-idisposable/</link><pubDate>Thu, 17 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/17-using-idisposable/</guid><description>Daily Knowledge Drop To make use of the using statement in C#, all you need to do is implement the IDisposable interface on a class.
The using statement provides a convenient syntax to ensure the correct use of IDisposable objects. The object in question will exists for the scope of the using and then automatically be disposed once out of scope.
This functionality can also be leveraged to create scoped helper instances for certain use cases.</description></item><item><title>Task.WaitAsync in .NET6</title><link>https://always-developing.github.io/dailydrop/2022/02/16-task-wait-async/</link><pubDate>Wed, 16 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/16-task-wait-async/</guid><description>Daily Knowledge Drop A new method on Task called WaitAsync was introduced in .NET6. This method allows for waiting on a Task for a specific period of time before throwing a timeout exception.
On the surface, this might not seem very useful, but lets look at some examples to see how this new method can be leveraged.
The issue Long running processes Suppose we have a long running method which returns a Task - in the below example we are simulating a download process which takes 5 seconds</description></item><item><title>Aliases with global using directives</title><link>https://always-developing.github.io/dailydrop/2022/02/15-global-using-directives/</link><pubDate>Tue, 15 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/15-global-using-directives/</guid><description>Daily Knowledge Drop With the introduction of global usings in C#10, it is now also possible to defined a global alias to have a shortcut to a specific type, across an entire project.
Global usings A quick intro to global usings - In C#10 the concept of global usings was introduced. It allows for a using statement to be prefixed with global, which then includes that using in all files automatically when compiled.</description></item><item><title>Filtering try-catch statement</title><link>https://always-developing.github.io/dailydrop/2022/02/14-exceptions-when/</link><pubDate>Mon, 14 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/14-exceptions-when/</guid><description>Daily Knowledge Drop It is possible to filter the catch portion of the try-catch statement, as well as catch multiple exceptions at the same time using the C# when keyword.
Multiple exceptions In our use case, there are two exception types we are particularly interested in IndexOutOfRangeException and DivideByZeroException.
If either of these exceptions occur, we want to log the exception, and carry on with the workflow. However if any other exception occurs, it should be logged and re-thrown to be handled higher up the call stack.</description></item><item><title>Extract calling method metadata with C#</title><link>https://always-developing.github.io/dailydrop/2022/02/11-caller-metadata/</link><pubDate>Fri, 11 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/11-caller-metadata/</guid><description>Daily Knowledge Drop As part of the C# System.Runtime assembly, there are a number of Attributes which can be used to get information about the caller of a method.
The pattern for usage is the same for all attributes. To extract the metadata when a method is called, the following needs to be done:
A new parameter needs to be added to the method (the type of the parameter depends on the attribute, see examples below) The new parameter must have a default value The new parameter must be decorated with the relevant Attribute Attributes Lets look at a few examples.</description></item><item><title>C# Channels - Produce &amp; Consume data</title><link>https://always-developing.github.io/dailydrop/2022/02/10-channels/</link><pubDate>Thu, 10 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/10-channels/</guid><description>Daily Knowledge Drop Today we dive into a little-known C# feature, I&amp;rsquo;d previously never heard about called Channels.
So what is a channel? - In short, a channel is a feature which allows for passing of data between a producer and consumer(s). It is an efficient, thread-safe queuing mechanism.
Usage The examples set out below are very simple, and do not reflect a real world scenario. They have eben kept as minimal as possible to display the core concepts of the Channel.</description></item><item><title>Performant logging with LoggerMessageAttribute</title><link>https://always-developing.github.io/dailydrop/2022/02/09-logger-message-attribute/</link><pubDate>Wed, 09 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/09-logger-message-attribute/</guid><description>Daily Knowledge Drop .NET6 introduced a new attribute called LoggerMessageAttribute, which leverages source generators and is designed to deliver a highly useable and performant logging solution.
It works by using source generators, triggered at compile time by the presence of LoggerMessageAttribute to generate the additional source code. This solution, due to the compile time generation, is able to eliminate performance hits, such as boxing, temporary memory allocation as well as copies which enables it to be typically considerably faster than the existing run time logging methods.</description></item><item><title>Scheduling with GitHub Actions</title><link>https://always-developing.github.io/dailydrop/2022/02/08-github-action-schedule/</link><pubDate>Tue, 08 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/08-github-action-schedule/</guid><description>Daily Knowledge Drop A GitHub Action can be configured to executed on a set schedule, and it&amp;rsquo;s as simple as adding a line to the workflow YAML using Cron syntax.
As part of the development of this blog, there was a requirement to execute an Action on a schedule - which turned out to be easier than anticipated.
Cron Quick intro to Cron syntax - if you are already familiar with this you can jump straight to how to implement in workflow YAML</description></item><item><title>C# ValueTuple</title><link>https://always-developing.github.io/dailydrop/2022/02/07-valuetuple/</link><pubDate>Mon, 07 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/07-valuetuple/</guid><description>Daily Knowledge Drop You may have heard of C# the Tuple type, but there is also a ValueTuple type available, which has existed in C# since .NET 4.7!
The post will will take a brief look at the Tuple type and compare its functionality to that of the ValueTuple type.
Tuple Tuple usage A Tuple is a data structure which has a specific number and sequence of elements. The data structure can contain up to 8 elements, but if more are required, nested tuple objects can be leveraged in the 8th element to extent the number of elements.</description></item><item><title>EF Core 6: GroupBy enhancements</title><link>https://always-developing.github.io/dailydrop/2022/02/04-ef-core6-groupby/</link><pubDate>Fri, 04 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/04-ef-core6-groupby/</guid><description>Daily Knowledge Drop The GroupBy support in Entity Framework Core 6 got an update, and has made things a lot easier.
In short, the following is now supported:
Translate GroupBy followed by FirstOrDefault (or similar) over a group Supports selecting the top N results from a group Expands navigation&amp;rsquo;s after the GroupBy operator has been applied Examples Setup In all the example below the setup is very simple - a single Song entity and corresponding database table.</description></item><item><title>Use IOptions&lt;> for application configuration</title><link>https://always-developing.github.io/dailydrop/2022/02/03-ioptions/</link><pubDate>Thu, 03 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/03-ioptions/</guid><description>Daily Knowledge Drop Instead of trying to manually setup the dependency injection container with configuration from the, for example, appsettings.json file, use the built in .NET functionality and use the IOptions interface instead - and get IOptionsSnapshot and IOptionsMonitor for free!
This post won&amp;rsquo;t go into details around the options pattern specifically, but it&amp;rsquo;s the recommended approach when dealing with application settings as it enables the application to adhere to two important software architecture principles:</description></item><item><title>C# Records - the rundown</title><link>https://always-developing.github.io/dailydrop/2022/02/02-record-intro/</link><pubDate>Wed, 02 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/02-record-intro/</guid><description>Daily Knowledge Drop Heard about the new feature of C# called records, but not entirely sure whats its all about? Here&amp;rsquo;s the brief overview.
Records:
Are reference types - just like normal classes Have equality based on value and not memory - unlike normal classes Are immutable (sometimes) - unlike normal classes Can be inherited - just like normal classes Internally the compiler converts will convert a record declaration to a specialized class, so that it conforms to the above.</description></item><item><title>Use the ILogger IsEnabled method</title><link>https://always-developing.github.io/dailydrop/2022/02/01-ilogger-isenabled/</link><pubDate>Tue, 01 Feb 2022 01:00:00 +0200</pubDate><guid>https://always-developing.github.io/dailydrop/2022/02/01-ilogger-isenabled/</guid><description>Daily Knowledge Drop When performing logging using the ILogger interface, to have more effective memory usage, ensure to check if logging is enabled for the relevant log level before calling the log method.
For example:
❌ Don&amp;rsquo;t do this: 1 logger.LogWarning(&amp;#34;Value is outside expected range of &amp;#39;{0}&amp;#39; to &amp;#39;{1}&amp;#39;&amp;#34;, 100, 120);
✅ Do this: 1 2 3 4 if(logger.IsEnabled(LogLevel.Warning)) { logger.LogWarning(&amp;#34;Value is outside expected range of &amp;#39;{0}&amp;#39; to &amp;#39;{1}&amp;#39;&amp;#34;, 100, 120); }</description></item></channel></rss>