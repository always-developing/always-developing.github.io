<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title />
		<link>https://alwaysdeveloping.net/</link>
		<description>always learning | always growing</description>
		<copyright>Copyright © 2022</copyright>
		<pubDate>Thu, 01 Dec 2022 03:52:58 GMT</pubDate>
		<lastBuildDate>Thu, 01 Dec 2022 03:52:58 GMT</lastBuildDate>
		<item>
			<title>Custom feature filters</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/12/01-context-feature</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/12/01-context-feature</guid>
			<pubDate>Thu, 01 Dec 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;Microsoft.FeatureManagement&lt;/code&gt; library, allows for a custom &lt;code&gt;context&lt;/code&gt; to be defined, and evaluated to &lt;code&gt;determine if specific functionality should be enabled or not&lt;/code&gt;, &lt;em&gt;for the specific context&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This functionality has no dependency on ASP.NET or &lt;em&gt;HttpContext&lt;/em&gt;, and as such can be used in any application type (such as console app).&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;p&gt;There are a number of moving pieces to the setup, which requires some classes be defined and some configuration specified to leverage the &lt;em&gt;custom feature filter management&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id="define-the-context"&gt;Define the context&lt;/h3&gt;
&lt;p&gt;The first step is to define the &lt;code&gt;context&lt;/code&gt; - this is a simple class which will contain all the information which will be evaluated to determine if the feature or functionality should be enabled or not.&lt;/p&gt;
&lt;p&gt;In this example, the context will just contain the user's email address:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class User
{
    public string Email { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In short - a &lt;code&gt;context&lt;/code&gt; will be created containing the supplied email address, which will be evaluated against &lt;em&gt;settings&lt;/em&gt; to determine if &lt;em&gt;normal&lt;/em&gt; or &lt;em&gt;enhanced&lt;/em&gt; processing is to occur.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="define-the-settings"&gt;Define the settings&lt;/h3&gt;
&lt;p&gt;The next step is to define a &lt;em&gt;settings&lt;/em&gt; class, which will contain properties against which the &lt;code&gt;context&lt;/code&gt; values will be evaluated.&lt;/p&gt;
&lt;p&gt;In this example, we want the &lt;em&gt;user email address domain&lt;/em&gt;, defined in the &lt;code&gt;User&lt;/code&gt; context, to be compared with a &lt;em&gt;company domain&lt;/em&gt;, defined in the settings class, &lt;code&gt;EnhancedUserSettings&lt;/code&gt;, to determine if the user should be processed using the &lt;em&gt;enhanced/preview feature&lt;/em&gt;, or the &lt;em&gt;standard existing feature&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class EnhancedUserSettings
{
    public string EmailDomain { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essentially what it comes down to, is evaluating if the &lt;code&gt;email address defined in the User context has the same domain defined in the settings EnhancedUserSettings&lt;/code&gt;. If so, then the &lt;em&gt;feature&lt;/em&gt; is enabled, otherwise the feature is not enabled.&lt;/p&gt;
&lt;p&gt;The usage of this and how each class fits together will become apparent in the steps below.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="define-the-filter"&gt;Define the filter&lt;/h3&gt;
&lt;p&gt;Next, we have to define the &lt;code&gt;filter&lt;/code&gt; - this piece of code will do the actual logic to evaluate and determine if the feature should be enabled or not, based on the &lt;code&gt;context&lt;/code&gt; and &lt;code&gt;settings&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class EmailDomainFilter : IContextualFeatureFilter&amp;lt;User&amp;gt;
{
    public Task&amp;lt;bool&amp;gt; EvaluateAsync(FeatureFilterEvaluationContext featureFilterContext, 
        User appContext)
    {
        // get the value from the parameters configured
        var settings = featureFilterContext.Parameters.Get&amp;lt;EnhancedUserSettings&amp;gt;();

        // perform the check
        return Task.FromResult(appContext.Email?.Split(&amp;quot;&amp;#64;&amp;quot;).Last() == 
            settings.EmailDomain);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The filter implements &lt;code&gt;IContextualFeatureFilter&amp;lt;Context&amp;gt;&lt;/code&gt;, which contains one method &lt;em&gt;EvaluateAsync&lt;/em&gt;. &lt;em&gt;EvaluateAsync&lt;/em&gt; takes a generic &lt;em&gt;FeatureFilterEvaluationContext&lt;/em&gt; context, as well as the specific &lt;em&gt;User&lt;/em&gt; context defined for this filter.&lt;/p&gt;
&lt;p&gt;In the above, the &lt;code&gt;EnhancedUserSettings&lt;/code&gt; instance is obtained from the generic &lt;em&gt;FeatureFilterEvaluationContext&lt;/em&gt; context - this retrieves the values based on the configuration defined in the next section.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="define-the-configuration"&gt;Define the configuration&lt;/h3&gt;
&lt;p&gt;In the &lt;code&gt;appsettings.json&lt;/code&gt; the filter feature functionality needs to be configured:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;&amp;quot;FeatureManagement&amp;quot;: {
    &amp;quot;EnhancedUserProcessing&amp;quot;: {
      &amp;quot;EnabledFor&amp;quot;: [
        {
          &amp;quot;Name&amp;quot;: &amp;quot;EmailDomain&amp;quot;,
          &amp;quot;Parameters&amp;quot;: {
            &amp;quot;EmailDomain&amp;quot;: &amp;quot;mycompany.co.za&amp;quot;
          }
        }
      ]
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The configuration defines the filter and how it should be used:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There is a feature called &lt;code&gt;EnhancedUserProcessing&lt;/code&gt; (the name of this is important, which we will see when it comes time to use the functionality)&lt;/li&gt;
&lt;li&gt;This feature uses a filter called &lt;code&gt;EmailDomain&lt;/code&gt; - the name of the class which implements &lt;code&gt;IContextualFeatureFilter&lt;/code&gt;, &lt;em&gt;EmailDomainFilter&lt;/em&gt; in this example (the name of the class plus &lt;em&gt;Filter&lt;/em&gt; as a suffix to the class name),&lt;/li&gt;
&lt;li&gt;The parameters for this filter, &lt;code&gt;EnhancedUserSettings&lt;/code&gt;, will have a property called &lt;em&gt;EmailDomain&lt;/em&gt; which will have a value set to &lt;code&gt;mycompany.co.za&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h3 id="setup-recap"&gt;Setup Recap&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Define the &lt;code&gt;context&lt;/code&gt; - this will be the information which is dynamic (each user/request/etc will have different context values) and which is compared to the &lt;code&gt;settings&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Define the &lt;code&gt;settings&lt;/code&gt; - this is the class which will contain the information the &lt;code&gt;context&lt;/code&gt; is compared against, to determine if the feature is enabled or not. This is static information, and is the same for all evaluations&lt;/li&gt;
&lt;li&gt;Define the &lt;code&gt;filter&lt;/code&gt; - this specified exactly &lt;em&gt;how&lt;/em&gt;, the &lt;code&gt;context&lt;/code&gt; values are compared with the &lt;code&gt;settings&lt;/code&gt; values&lt;/li&gt;
&lt;li&gt;Define the &lt;code&gt;configuration&lt;/code&gt; - gives the filter a name, and specifies the &lt;code&gt;settings&lt;/code&gt; values&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;p&gt;Finally, let's look at the usage of the &lt;code&gt;filter feature&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Below a minimal API endpoint is defined to demonstrate the usage:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = WebApplication.CreateBuilder(args);

// add feature management to DI container
// and add the specific filter
builder.Services.AddFeatureManagement()
       .AddFeatureFilter&amp;lt;EmailDomainFilter&amp;gt;();

var app = builder.Build();

// inject IFeatureManager implementation from the DI container
// get the email from the URL route 
app.MapGet(&amp;quot;/process/{email}&amp;quot;, async ([FromServices]IFeatureManager featureManager,
    [FromRoute]string email) =&amp;gt;
{
    // check if the feature with the name `EnhancedUserProcessing` is enabled
    // or not for the specific context (the user email)
    if(await featureManager.IsEnabledAsync(&amp;quot;EnhancedUserProcessing&amp;quot;, 
        new User { Email = email }))
    {
        return &amp;quot;Processed using ENHANCED features&amp;quot;;
    }

    return &amp;quot;Processed using NORMAL features&amp;quot;;
});

app.Run();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;IFeatureManager&lt;/code&gt; is injected into the relevent class/method, and the &lt;em&gt;IsEnabledAsync&lt;/em&gt; method is called. The specific feature to use (specified by name) is supplied along  with the relevent &lt;code&gt;context&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Browsing to the endpoint &lt;code&gt;/process/alwaysdevelpoping&amp;#64;mycompany.co.za&lt;/code&gt; will return:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Processed using ENHANCED features
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While using an email with any other domain will result in:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Processed using NORMAL features
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a simple example, but the library does offer more sophisticated functionality around the configuration and options available to evaluate the filter (see the links available under references)&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;The ability to turn off/on specific features for a specific subset of users/records is a valuable tool when trying to roll out useful, experimental or preview functionality quickly to get &amp;quot;real world&amp;quot; feedback before it gets rolled out completely.
There are other more sophisticated 3rd party feature management tool available (LaunchDarkly for example), but the &lt;code&gt;Microsoft.FeatureManagement&lt;/code&gt; library is entirely adequate, especially as a starting point.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://coderethinked.com/contextual-feature-filters-in-asp-net-core/"&gt;Contextual Feature Filters in ASP.NET Core&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://learn.microsoft.com/en-us/azure/azure-app-configuration/use-feature-flags-dotnet-core?tabs=core5x"&gt;Tutorial: Use feature flags in an ASP.NET Core app&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;214: 01-12-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Short and arithmetic operations</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/11/30-short-support</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/11/30-short-support</guid>
			<pubDate>Wed, 30 Nov 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;When performing arithmetic operations on &lt;code&gt;short&lt;/code&gt; data types, their values are converted to the &lt;code&gt;int&lt;/code&gt; types, which is also the type of the result of the operation.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;p&gt;When working with integral types which could be an &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;short&lt;/code&gt;, the compiler will infer &lt;code&gt;int&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// the compiler will infer than intValue is 
// an int (even though it could be a short)
// in this specific example
var intValue = 32 / 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, when specifying the variable type explicitly, the compiler will infer the value as a &lt;code&gt;short&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;short shortValue = 32 / 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the value &lt;em&gt;32&lt;/em&gt; is inferred as a &lt;code&gt;short&lt;/code&gt;, and the output of the operator is explicitly declared as a &lt;code&gt;short&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All good so far - but now is where the are a bit unexpected.&lt;/p&gt;
&lt;p&gt;Operations on an &lt;em&gt;explicitly defined&lt;/em&gt; short value, will result in a &lt;code&gt;int result&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// short value is definitely a short
short shortValue = 32 / 2;

// int response, all good
int intOutput = shortValue / 2;

// ERROR: this gives a compiler error
//short shortOutput = (shortValue / 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the last operation, even though it is being performed on a short value, the result is an &lt;code&gt;int&lt;/code&gt; and the above results in the error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Cannot implicitly convert type 'int' to 'short'. An explicit conversion exists (are you missing a cast?)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thankfully, the error is very easy to resolve - as the error states, an explicit conversion needs to be done:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// All good!
short shortOutput = (short)(shortValue / 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;A small quirk of the language, which if encountered just needs to be managed and handled. Before being aware of this knowledge, I would have assumed that a &lt;code&gt;short&lt;/code&gt; would be returned from an operation where the operands were defined as &lt;code&gt;short&lt;/code&gt; - this assumption would be incorrect though!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.reddit.com/r/csharp/comments/ysm6lx/why_am_i_being_forced_to_cast_to_shorts_when_i_am/"&gt;Reddit Post&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;213: 30-11-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Dynamic LINQ with System.Linq.Dynamic.Core</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/11/29-dyanmic-linq</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/11/29-dyanmic-linq</guid>
			<pubDate>Tue, 29 Nov 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The third-party, &lt;em&gt;open source&lt;/em&gt; library &lt;code&gt;System.Linq.Dynamic.Core&lt;/code&gt; extends LINQ functionality allowing &lt;em&gt;dynamic, string based LINQ queries&lt;/em&gt; to be parsed, resulting in operations identical to regular LINQ.&lt;/p&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;p&gt;In all of the below examples, the following snippet of code is used to get a sample collection of &lt;em&gt;Song&lt;/em&gt; entities:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;IEnumerable&amp;lt;Song&amp;gt; GetSongs()
{
    return new[]
    {
        new Song(&amp;quot;Learn to Fly&amp;quot;, &amp;quot;Foo Fighters&amp;quot;, 245),
        new Song(&amp;quot;Everlong&amp;quot;, &amp;quot;Foo Fighters&amp;quot;, 312),
        new Song(&amp;quot;Bigger than my Body&amp;quot;, &amp;quot;John Mayer&amp;quot;, 281),
    };
};

public record Song(string Name, string Artist, int LengthInSeconds);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The extension methods &lt;code&gt;System.Linq.Dynamic.Core&lt;/code&gt; offer are available on the &lt;em&gt;IQueryable&lt;/em&gt; interface. As such in the examples the &lt;em&gt;IEnumerable&amp;lt;Song&amp;gt;&lt;/em&gt; returned from the &lt;code&gt;GetSongs&lt;/code&gt; method is required to be converted to &lt;em&gt;IQueryable&amp;lt;Song&amp;gt;&lt;/em&gt; using the &lt;code&gt;AsQueryable&lt;/code&gt; method before the extension methods are available.&lt;/p&gt;
&lt;p&gt;Below come common use cases are shown, but the library does offer a lot more functionality - see the references links below for more information on the library.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="select"&gt;Select&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;System.Linq.Dynamic.Core&lt;/code&gt; can be used to dynamically &lt;em&gt;Select&lt;/em&gt; a property value from a collection of entities:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// using traditional LINQ
List&amp;lt;string&amp;gt; namesLinq = songs
  .Select(s =&amp;gt; s.Name)
  .ToList();

// dynamically specifying the property to be returned
List&amp;lt;string&amp;gt; nameDynamic = songs
  .AsQueryable()
  .Select(&amp;quot;Name&amp;quot;)
  .ToDynamicList&amp;lt;string&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A &lt;em&gt;anonymous or dynamic&lt;/em&gt; entity can also be &lt;em&gt;Selected&lt;/em&gt; out of the collection dynamically:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// traditional
var nameArtistLinq = songs
  .Select(s =&amp;gt; new { s.Name, s.Artist })
  .ToList();

// dynamic
List&amp;lt;dynamic&amp;gt; nameArtistDynamic = songs
  .AsQueryable()
  .Select(&amp;quot;new { Name, Artist}&amp;quot;)
  .ToDynamicList();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is very powerful, allowing the columns to be selected to be determined &lt;em&gt;at runtime&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="filtering"&gt;Filtering&lt;/h3&gt;
&lt;p&gt;The library also provides the ability to dynamically filter a collection of records:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// traditional
List&amp;lt;Song&amp;gt; filterLinq = songs
  .Where(x =&amp;gt; x.Artist == &amp;quot;Foo Fighters&amp;quot;)
  .ToList();

// dynamic
string column = &amp;quot;Artist&amp;quot;;
string value = &amp;quot;Foo Fighters&amp;quot;;
List&amp;lt;Song&amp;gt; filterDynamic = songs
  .AsQueryable()
  .Where($&amp;quot;{column} == \&amp;quot;{value}\&amp;quot;&amp;quot;)
  .ToList();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, very powerful as it allows the filter criteria to be be generated &lt;em&gt;at runtime&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Outputting the result of the filtering for each technique yields the same result:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Console.WriteLine(filterLinq.Count());
Console.WriteLine(filterDynamic.Count());

// ouput:
// 2
// 2
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="ordering"&gt;Ordering&lt;/h3&gt;
&lt;p&gt;The library also offers the ability to dynamically order a collection:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// traditional LINQ ordering
List&amp;lt;Song&amp;gt; orderLinq = songs
  .OrderBy(s =&amp;gt; s.LengthInSeconds)
  .ToList();
  
List&amp;lt;Song&amp;gt; orderDescLinq = songs
  .OrderByDescending(s =&amp;gt; s.LengthInSeconds)
  .ToList();

// dynamic ordering
List&amp;lt;Song&amp;gt; orderDynamic = songs
  .AsQueryable()
  .OrderBy(&amp;quot;LengthInSeconds&amp;quot;)
  .ToList();

List&amp;lt;Song&amp;gt; orderDescDynamic = songs
  .AsQueryable()
  .OrderBy(&amp;quot;LengthInSeconds desc&amp;quot;)
  .ToList();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The functionality the library offers is very easy and intuitive to use, as one can see from the above examples.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;This is a very powerful library, and more functionality than described here. If dynamic LINQ is not required, I do not recommend replacing traditional strongly-typed LINQ with this as a based, however in cases where flexibility to change the LINQ at runtime is required, this library is incredibly powerful.&lt;/p&gt;
&lt;p&gt;If this is of interest it is definitely recommended to check out the &lt;em&gt;Dynamic LInq&lt;/em&gt; reference link below for more information.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://code-maze.com/using-dynamic-linq/"&gt;Using Dynamic LINQ With System.Linq.Dynamic.Core Library&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://dynamic-linq.net/"&gt;Dynamic LINQ&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;212: 29-11-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Null-coalescing operator and associativity</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/11/28-null-coalescing-assoc</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/11/28-null-coalescing-assoc</guid>
			<pubDate>Mon, 28 Nov 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;null-coalescing operator&lt;/code&gt; (&lt;code&gt;??&lt;/code&gt;) is right-associative, and can be chained together to check multiple values, in order, to eventually arrive at a non-null value.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="example"&gt;Example&lt;/h2&gt;
&lt;p&gt;The example for this situation is fairly simple - the operator &lt;code&gt;??&lt;/code&gt; can be used in a chain to check (and return) the &lt;em&gt;first non-null value&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;int? GetValue(int? value1, int? value2, int? value3, int defaultValue)
{
  // chain the operator and return the first non-null value
    return value1 ?? value2 ?? value3 ?? defaultValue;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The values are evaluated left to right to check if they are &lt;code&gt;null&lt;/code&gt;, and the first non-null value is returned. In this example &lt;em&gt;defaultValue&lt;/em&gt; is an &lt;code&gt;int&lt;/code&gt; and as such cannot be null, so the method will always return a value.&lt;/p&gt;
&lt;p&gt;Invoking this with a variety of permutations:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Console.WriteLine(GetValue(null, null, 0, 0));
Console.WriteLine(GetValue(null, 1, 2, 0));
Console.WriteLine(GetValue(2, 5, null, 0));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Results in the following, expected output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;0
1
2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each each case the first non-null value is returned. If all &lt;em&gt;nullable&lt;/em&gt; values are null, then the default is returned.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;This small, but useful piece of information for today might seem obvious, and it is once you think about it - personally I've just never encountered the technique or the need to chain together multiple null checks using the &lt;code&gt;null-coalescing&lt;/code&gt; operator. However, if I ever do, I now know that chaining is possible.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://code-maze.com/null-coalescing-operator-null-coalescing-assignment-operator-csharp/"&gt;Null-Coalescing Operators’ Associativity&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;211: 28-11-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Opting into experimental functionality</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/11/25-preview-attribute</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/11/25-preview-attribute</guid>
			<pubDate>Fri, 25 Nov 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;RequiresPreviewFeatures&lt;/code&gt; attribute can be used to flag a specific piece of code as &lt;em&gt;experimental&lt;/em&gt; or &lt;em&gt;in preview&lt;/em&gt; - this code cannot be used unless the consumer specifically opts into &lt;em&gt;enabling preview features&lt;/em&gt;, preventing the preview, potentially unstable code, from being used unwittingly.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="preview-feature"&gt;Preview feature&lt;/h2&gt;
&lt;h3 id="code"&gt;Code&lt;/h3&gt;
&lt;p&gt;To mark a &lt;em&gt;method&lt;/em&gt; (or class, property etc) as &lt;em&gt;in preview&lt;/em&gt;, it is decorated with the &lt;code&gt;RequiresPreviewFeatures&lt;/code&gt; attribute. Here the &lt;em&gt;DoWorkNew&lt;/em&gt; method is flagged as &lt;em&gt;in preview&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Worker
{
    public void DoWork()
    {
        // do some work the old way
    }

    [RequiresPreviewFeatures()]
    public void DoWorkNew() 
    { 
        // do some work the new one
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As it stands, trying to use this method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var worker = new Worker();

worker.DoWorkNew();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will result in the following compiler error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Using 'DoWorkNew' requires opting into preview features. See https://aka.ms/dotnet-warnings/preview-features for more information.	
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To to able to use code marked with the attribute, one specifically needs to opt into &lt;em&gt;preview features&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="project"&gt;Project&lt;/h3&gt;
&lt;p&gt;To opt into &lt;em&gt;preview features&lt;/em&gt;, in the &lt;em&gt;csproj&lt;/em&gt; file ensure the &lt;code&gt;EnablePreviewFeatures&lt;/code&gt; setting is set to true:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;net7.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;ImplicitUsings&amp;gt;enable&amp;lt;/ImplicitUsings&amp;gt;
    &amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;
    &amp;lt;EnablePreviewFeatures&amp;gt;true&amp;lt;/EnablePreviewFeatures&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this the code will now compile successfully and be able to leverage preview/experimental features.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;As a library author this is a very useful tool - allowing new experimental functionality to be introduced &amp;quot;safely&amp;quot;. Usage of the functionality is semi-controlled, and the consumers are required to make an informed choice to manually opt into using potentially unstable code.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/1d97ea56-9a32-4067-9919-10b9af5623a6"&gt;Marking API's as obsolete or as experimental&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;210: 25-11-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Distributed caching int ASP.NET Core</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/11/24-distributed-cache</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/11/24-distributed-cache</guid>
			<pubDate>Thu, 24 Nov 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;ASP.NET Core comes with the &lt;code&gt;IDistributedCache&lt;/code&gt; interface, and a number of implementations to support &lt;code&gt;distributed caching&lt;/code&gt;. The out of the box implementaions include &lt;em&gt;In Memory&lt;/em&gt;, &lt;em&gt;SQL Server&lt;/em&gt;, &lt;em&gt;Redis&lt;/em&gt; and &lt;em&gt;NCache&lt;/em&gt; - however if another implementation is required, a custom provider can also be fairly easily be written.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="the-need-for-distributed-cache"&gt;The need for distributed cache&lt;/h2&gt;
&lt;p&gt;Before getting to &lt;em&gt;distributed cache&lt;/em&gt; we'll have a quick look at the &lt;em&gt;non-distributed in memory cache&lt;/em&gt; implementation which also comes out of the box with ASP.NET Core. Configuring and leveraging this functionality is incredibly easy:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = WebApplication.CreateBuilder(args);

// configure dependency injection with the in-memory cache
builder.Services.AddMemoryCache();

var app = builder.Build();

app.MapGet(&amp;quot;/cache&amp;quot;, (IMemoryCache cache) =&amp;gt;
{
    // try get a value with the key &amp;quot;hello&amp;quot; out the cache
    if(cache.TryGetValue(&amp;quot;hello&amp;quot;, out string result))
    {
        Console.WriteLine(&amp;quot;Retrieved from cache&amp;quot;);

        return result;
    }

    // if the value was not found in the cache
    // add it to the cache
    cache.Set(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;);

    return &amp;quot;world&amp;quot;;
});

app.Run();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, the &lt;em&gt;IMemoryCache TryGetValue&lt;/em&gt; method is called to get get a value out of the cache by key. If no value is found, then the item is put into the cache and returned. This is a very simple example, with no cache expiry specified.&lt;/p&gt;
&lt;p&gt;The in-memory cache will be entirely suitable if &lt;code&gt;only one instance of an application is running&lt;/code&gt; - the cache is stored in the memory of that one instance of the application. However, if multiple instance of the application are running (in the cloud, or in containers) the &lt;em&gt;in-memory cache is not shared across instances&lt;/em&gt; - each instance will have its own cached. This is where a &lt;code&gt;distributed cache&lt;/code&gt; can be leveraged, with each application instance sharing the cache, and benefiting from the caching done by other instances.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="distributed-cache"&gt;Distributed cache&lt;/h2&gt;
&lt;p&gt;Configuring and using a &lt;code&gt;distributed cache&lt;/code&gt; in ASP.NET Core is &lt;em&gt;almost&lt;/em&gt; as easy as configuring a normal in-memory cache.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = WebApplication.CreateBuilder(args);

// configure in-memory distributed cache
// which is good for testing, but is not truly 
// distributed
builder.Services.AddDistributedMemoryCache();

var app = builder.Build();

// inject IDistributedCache and not IMemoryCache
app.MapGet(&amp;quot;/distributedcache&amp;quot;, async (IDistributedCache cache) =&amp;gt;
{
    string result;

    // (Try) get the byte array value from the cache
    byte[] encodedResult = await cache.GetAsync(&amp;quot;hello&amp;quot;);
    // if a value was returned
    if(encodedResult != null)
    {
        Console.WriteLine(&amp;quot;Retrieved from cache&amp;quot;);

        // convert byte array to string and return
        result = Encoding.UTF8.GetString(encodedResult);
        return result;
    }

    // convert string to byte array 
    encodedResult = Encoding.UTF8.GetBytes(&amp;quot;world&amp;quot;);
    // and configure the cache options
    DistributedCacheEntryOptions options = new DistributedCacheEntryOptions()
        .SetSlidingExpiration(TimeSpan.FromSeconds(10));

    // add the value to the cache
    await cache.SetAsync(&amp;quot;hello&amp;quot;, encodedResult, options);

    return &amp;quot;world&amp;quot;;

});

app.Run();
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="usage"&gt;Usage&lt;/h3&gt;
&lt;p&gt;While &lt;code&gt;IMemoryCache&lt;/code&gt; can store a &lt;em&gt;string&lt;/em&gt; or &lt;em&gt;object&lt;/em&gt;, &lt;code&gt;IDistributedCache&lt;/code&gt; will only store a &lt;em&gt;byte array&lt;/em&gt;. Additional processing has to be done to convert to and from a byte array when inserting and retrieving values from the cache.
The &lt;code&gt;IDistributedCache&lt;/code&gt; also doesn't have a &lt;em&gt;TryGet&lt;/em&gt; method, only a &lt;em&gt;Get&lt;/em&gt; method, which will return &lt;code&gt;null&lt;/code&gt; if no value for the supplied key is found.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="configuration"&gt;Configuration&lt;/h3&gt;
&lt;p&gt;The configuration of the &lt;code&gt;in-memory distributed cache&lt;/code&gt; cache was simple (as seen above):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;builder.Services.AddDistributedMemoryCache();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, the configuration of the other implementations is not much more complicated. The SQL Server provider for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;builder.Services.AddDistributedSqlServerCache(act =&amp;gt;
{
   act.SchemaName = &amp;quot;dbo&amp;quot;;
   act.TableName = &amp;quot;AppCache&amp;quot;;
   act.ConnectionString = builder.Configuration.GetConnectionString(&amp;quot;DefaultDatabase&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The actual logic (the endpoint delegate method in the above example) can remain exactly as is.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Having a distributed cache is a key feature in many scalable applications, and the easy to configure and use, out of the box functionality provided by ASP.NET Core will be suitable for most application's needs.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.mitchelsellers.com/blog/article/understanding-implementing-caching-in-asp-net-core"&gt;Understanding &amp;amp; Implementing Caching in ASP.NET Core&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;209: 24-11-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Supporting 13 months</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/11/23-thirteen-months</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/11/23-thirteen-months</guid>
			<pubDate>Wed, 23 Nov 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;.NET has support for &lt;code&gt;13 months&lt;/code&gt; - the &lt;em&gt;Hebrew&lt;/em&gt; and &lt;em&gt;EastAsianLunisolarCalendar&lt;/em&gt; for example, has the concept of leap months, and as such it is possible for a year to consist of 13 months.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="getmonthname"&gt;GetMonthName&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;GetMonthName&lt;/code&gt; method on &lt;code&gt;DateTimeFormatInfo&lt;/code&gt; supports a month parameter value of between 1 and 13.&lt;/p&gt;
&lt;p&gt;For calendars which only support 12 months, sending a value of 13 to the &lt;code&gt;GetMonthName&lt;/code&gt; method will return a blank string:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// this will use the current 
// culture calendar
var df = new DateTimeFormatInfo();

Console.WriteLine(df.GetMonthName(1));
Console.WriteLine(df.GetMonthName(13));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of this is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;January

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, if we switch using a &lt;em&gt;Calendar&lt;/em&gt; which supports 13 months:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// switch the culture and the calendar
HebrewCalendar hc = new HebrewCalendar();
CultureInfo culture = CultureInfo.CreateSpecificCulture(&amp;quot;he-IL&amp;quot;);
culture.DateTimeFormat.Calendar = hc;
Thread.CurrentThread.CurrentCulture = culture;

// output to the debug window as my Console did not
// support the characters
Debug.WriteLine(culture.DateTimeFormat.GetMonthName(1));
Debug.WriteLine(culture.DateTimeFormat.GetMonthName(13));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the output is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;תשרי
אלול
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Debug output is used here instead of the Console, as my default Console Window encoding did not support Hebrew characters (while the Visual Studio output window does by default)&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;This piece of knowledge is not especially useful or relevent unless one is working with one of the specific calendars/cultures, or one has to support multiple cultures in the application.
It also serves as a reminder that the culture an application executes under is important, and not to always make assumptions about how the application will always operate.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.meziantou.net/misconceptions-about-date-and-time.htm"&gt;Misconceptions: 1 year = 12 months&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;208: 23-11-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Efficient EF deletion</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/11/22-ef-faster-delete</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/11/22-ef-faster-delete</guid>
			<pubDate>Tue, 22 Nov 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;When using Entity Framework to perform a delete (prior to EF7), first the record in question is required to be &lt;em&gt;selected from the table&lt;/em&gt; (so that EF change tracking has visibility of it), then is &lt;em&gt;marked as deleted&lt;/em&gt;, and then the actual database delete is performed with  &lt;em&gt;SaveChanges&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Khalid Abuhakmeh has a very interesting idea, which eliminates the need for the extra round trip to &lt;em&gt;select&lt;/em&gt; the data - manually add the item to EF change tracking (without first checking the database), &lt;em&gt;mark it as deleted&lt;/em&gt;, and &lt;em&gt;save the changes&lt;/em&gt;. If a specific exception occurs because the record is not available for deletion, handle that separately.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="use-case"&gt;Use case&lt;/h2&gt;
&lt;p&gt;In our use case, we will define a &lt;em&gt;Delete&lt;/em&gt; endpoint, which when called will delete the &lt;em&gt;Blog&lt;/em&gt; record using the supplied &lt;em&gt;Id&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id="traditional-method"&gt;Traditional method&lt;/h3&gt;
&lt;p&gt;Below is a sample of the "traditional" method of handling the use case:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// context is injected from the DI container
// id is supplied as part of the url
app.MapDelete("/blog/v1/{id:int}", async (DemoContext context, int id) =&amp;gt;
{
    // first lookup the blog by the id
    var blog = await context.Blogs.FindAsync(id);

    // if the blog was found
    if(blog != null)
    {
        // mark it as deleted
        context.Remove(blog);
    }

    await context.SaveChangesAsync();

});
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;First, a query is performed against the database to ensure that a &lt;em&gt;Blog&lt;/em&gt; with the specified Id exists (with &lt;em&gt;FindAsync&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;In the case when the record does exist, the row will start being tracked by Entity Framework's change tracker&lt;/li&gt;
&lt;li&gt;The record is flagged as delete, with the &lt;em&gt;Remove&lt;/em&gt; command&lt;/li&gt;
&lt;li&gt;The changes are finally applied to the database, with &lt;em&gt;SaveChangesAsync&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With this method, there are two round trips to the database - in steps 1 and 4.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="efficient-method"&gt;Efficient Method&lt;/h3&gt;
&lt;p&gt;With the more efficient method, one database round trip can be eliminated:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// context is injected from the DI container
// id is supplied as part of the url
app.MapDelete("/blog/v1/{id:int}", async (DemoContext context, int id) =&amp;gt;
{
    try
    {
        // create an instance of the object with the
        // supplied id. 
        var blog = new Blog { Id = id };
        // make the change tracker aware of this object
        var contextBlog = context.Blogs.Attach(blog);
        // mark it as deleted
        contextBlog.State = EntityState.Deleted;

        // delete
        await context.SaveChangesAsync();
    }
    catch(DbUpdateConcurrencyException ex)
    {
        Console.WriteLine("Swallowing delete exception.");
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this method:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Instead of checking in the database that a record exists with the supplied &lt;em&gt;Id&lt;/em&gt;, it is &lt;em&gt;assumed a record does already exist&lt;/em&gt; with the id&lt;/li&gt;
&lt;li&gt;A record, with just the Id (the primary key value) set, is created, attached to the change tracker, and marked as deleted&lt;/li&gt;
&lt;li&gt;&lt;em&gt;SaveChangesAsync&lt;/em&gt; is then called to perform the actual delete on the database&lt;/li&gt;
&lt;li&gt;If a record with that specific Id does in fact not exist, an exception will be thrown - which is caught and swallowed (with logging)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The outcome in both cases is the same, but an expensive database round trip has been eliminated.&lt;/p&gt;
&lt;p&gt;In the references link below, Khalid Abuhakmeh has additional ideas and code samples on how this functionality can be cleaned and wrapped into an extension method to make usage even easier.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Having run into this exact issue before, this method is very interesting. Exceptions do have an overhead, but the overhead of a database round trip will almost always out-weigh the exception overhead. Definitely consider the "efficient" method if the "traditional pattern is used throughout code.
Having said that, EF7 introduces &lt;a href="https://alwaysdeveloping.net/09/23-ef-bulk-update"&gt;Bulk Update/Delete functionality&lt;/a&gt; which will allow for this nativity in the EF framework - so this method will become obsolete with time.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/more-efficient-deletes-with-entity-framework-core"&gt;More Efficient Deletes With Entity Framework Core&lt;/a&gt;&lt;/p&gt;
&lt;!--?# DailyDrop ?--&gt;207: 22-11-2022&lt;!--?#/ DailyDrop ?--&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>List ConvertAll</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/11/21-list-convertall</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/11/21-list-convertall</guid>
			<pubDate>Mon, 21 Nov 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;List&lt;/code&gt; class has a &lt;code&gt;ConvertAll&lt;/code&gt; method which allows for the conversion of items in a list from one type to another. It operates similar to the LINQ &lt;code&gt;Select&lt;/code&gt; method, but in some use cases will out-perform the LINQ counterpart.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="example"&gt;Example&lt;/h2&gt;
&lt;p&gt;In the below example, we have a List of &lt;code&gt;TypeA&lt;/code&gt;, and would like to convert this list to a a list of &lt;code&gt;TypeB&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;The types:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class TypeA
{
    public string TypeAValue { get; set; }
}

public class TypeB
{
    public string TypeBValue { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Building up a list:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;List&amp;lt;TypeA&amp;gt; types = new()
{
  new TypeA(),
  new TypeA(),
  new TypeA(),
  new TypeA(),
};

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have a list ot &lt;em&gt;TypeA&lt;/em&gt;, we'll look at a couple of ways to convert to a list of &lt;em&gt;TypeB&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="linq-select"&gt;LINQ Select&lt;/h3&gt;
&lt;p&gt;This is the more &amp;quot;traditional&amp;quot; way of converting a list (or IEnumerable) from one type to another:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var typeBList = types
    .Select(a =&amp;gt; new TypeB { TypeBValue = a.TypeAValue })
    .ToList();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, the &lt;em&gt;Select&lt;/em&gt; will operate on &lt;em&gt;TypeA&lt;/em&gt; and instantiate a &lt;em&gt;TypeB&lt;/em&gt; for each &lt;em&gt;TypeA&lt;/em&gt;, setting the instance properties. The output of this is a list of &lt;em&gt;TypeB&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="list-convertall"&gt;List ConvertAll&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ConvertAll&lt;/code&gt; usage is similar to that of the &lt;em&gt;Select&lt;/em&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var typeBList = types
    .ConvertAll(type =&amp;gt; new TypeB { TypeBValue = type.TypeAValue });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For each item in the list, a &lt;em&gt;TypeB&lt;/em&gt; instance is instantiated and the properties set with the values from the &lt;em&gt;TypeA&lt;/em&gt; instance.&lt;/p&gt;
&lt;p&gt;A note: &lt;code&gt;ConvertAll&lt;/code&gt; is only available on &lt;em&gt;List&lt;/em&gt;, so if working with an IEnumerable implementation, the &lt;em&gt;ToList&lt;/em&gt; method would need to be called to convert the collection to a list.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="benchmarks"&gt;Benchmarks&lt;/h2&gt;
&lt;h3 id="items"&gt;10 Items&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Error&lt;/th&gt;
&lt;th style="text-align: right;"&gt;StdDev&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Median&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Ratio&lt;/th&gt;
&lt;th style="text-align: right;"&gt;RatioSD&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen0&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Allocated&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Alloc Ratio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LinqSelect&lt;/td&gt;
&lt;td style="text-align: right;"&gt;194.9 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;9.99 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;29.46 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;177.4 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0713&lt;/td&gt;
&lt;td style="text-align: right;"&gt;448 B&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GenericConvertAll&lt;/td&gt;
&lt;td style="text-align: right;"&gt;156.5 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;7.43 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;21.92 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;143.9 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.82&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.16&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0598&lt;/td&gt;
&lt;td style="text-align: right;"&gt;376 B&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.84&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;With only 10 items in the list, the the &lt;code&gt;ConvertAll&lt;/code&gt; method is faster, and more memory performant than the LINQ &lt;code&gt;Select&lt;/code&gt; method.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="items-1"&gt;10 000 Items&lt;/h3&gt;
&lt;p&gt;As the number of items in the list increases, the performance metrics of the two two methods converge:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Error&lt;/th&gt;
&lt;th style="text-align: right;"&gt;StdDev&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Median&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Ratio&lt;/th&gt;
&lt;th style="text-align: right;"&gt;RatioSD&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen0&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen1&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Allocated&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Alloc Ratio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LinqSelect&lt;/td&gt;
&lt;td style="text-align: right;"&gt;175.6 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;10.90 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;32.15 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;189.5 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;50.7813&lt;/td&gt;
&lt;td style="text-align: right;"&gt;25.3906&lt;/td&gt;
&lt;td style="text-align: right;"&gt;312.63 KB&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GenericConvertAll&lt;/td&gt;
&lt;td style="text-align: right;"&gt;174.5 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.42 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;4.07 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;173.5 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.97&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.15&lt;/td&gt;
&lt;td style="text-align: right;"&gt;50.7813&lt;/td&gt;
&lt;td style="text-align: right;"&gt;25.3906&lt;/td&gt;
&lt;td style="text-align: right;"&gt;312.55 KB&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;With 10 000 items, the two methods effectively perform the same, and both use the same amount of memory.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="items-2"&gt;100 000 Items&lt;/h3&gt;
&lt;p&gt;The same results can be seen with 100 000 records, as was seen with 10 000 record:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Error&lt;/th&gt;
&lt;th style="text-align: right;"&gt;StdDev&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Ratio&lt;/th&gt;
&lt;th style="text-align: right;"&gt;RatioSD&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen0&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen1&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen2&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Allocated&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Alloc Ratio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LinqSelect&lt;/td&gt;
&lt;td style="text-align: right;"&gt;6.586 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.1298 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.2561 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;515.6250&lt;/td&gt;
&lt;td style="text-align: right;"&gt;328.1250&lt;/td&gt;
&lt;td style="text-align: right;"&gt;179.6875&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.05 MB&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GenericConvertAll&lt;/td&gt;
&lt;td style="text-align: right;"&gt;6.236 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.1199 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.1970 ms&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.96&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.05&lt;/td&gt;
&lt;td style="text-align: right;"&gt;515.6250&lt;/td&gt;
&lt;td style="text-align: right;"&gt;320.3125&lt;/td&gt;
&lt;td style="text-align: right;"&gt;179.6875&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.05 MB&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The two methods effectively perform the same, and both use the same amount of memory.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;If currently using &lt;code&gt;Select&lt;/code&gt;, there is not much reason to update code to switch to &lt;code&gt;ConvertAll&lt;/code&gt; - except if micro performance improvements are critical to your application. However if performance is so critical for the application, LINQ is probably not even being used in the first place.&lt;/p&gt;
&lt;p&gt;Having said all that, it is interesting the &lt;code&gt;ConvertAll&lt;/code&gt; method is available and does have performance improvements over using LINQ &lt;code&gt;Select&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://code-maze.com/advanced-linq/"&gt;Advanced LINQ&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;206: 21-11-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Succinct initialization pattern</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/11/18-succinct-init</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/11/18-succinct-init</guid>
			<pubDate>Fri, 18 Nov 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;Sometimes objects need to be initialized &lt;em&gt;lazily&lt;/em&gt; - two newer C# features, the &lt;em&gt;null-coalescing assignment operator&lt;/em&gt; &lt;code&gt;??=&lt;/code&gt; and the &lt;em&gt;target-typed new expression&lt;/em&gt; makes the lazy initialization cleaner and more succinct.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="example"&gt;Example&lt;/h2&gt;
&lt;p&gt;In the examples, we have a &lt;code&gt;Album&lt;/code&gt; class which contains an &lt;em&gt;optional&lt;/em&gt; list of &lt;code&gt;Song&lt;/code&gt; instances:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Album
{
    private readonly string _name;

    private readonly List&amp;lt;Song&amp;gt; _songs;

    public Album(string name, List&amp;lt;Song&amp;gt; songs = null)
    {
        _name = name;
        _songs = songs;

        // See examples below on how to 
        // do the _songs initialization
    }
}

public class Song
{
    private readonly string _name;

    public Song(string name)
    {
        _name = name;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If no &lt;code&gt;Song&lt;/code&gt; list is passed into the constructor, then the &lt;code&gt;_song&lt;/code&gt; variable needs to be initialized to an &lt;em&gt;empty list&lt;/em&gt;. Doing this will prevent having to have checks throughout the code to determine if the Song list is null or not. There are multiple ways to do this, but this post focuses on the &amp;quot;more traditional&amp;quot; method, and the new &amp;quot;succinct&amp;quot; method.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="traditional-lazy-init"&gt;Traditional lazy init&lt;/h3&gt;
&lt;p&gt;Traditionally (before any of the newer C# features were introduced), the constructor might look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public Album(string name, List&amp;lt;Song&amp;gt; songs = null)
{
    _name = name;
    _songs = songs;

    // check if _songs is null
    if(_songs == null)
    {
        // initialize to an empty list
        _songs = new List&amp;lt;Song&amp;gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The variable is checked to determine if its &lt;em&gt;null&lt;/em&gt; or not, and if it is, then explicitly initialized to an empty list. Nothing inherently wrong with this approach - it just takes four lines of code to &lt;em&gt;lazily initialize a variable&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="succinct-lazy-init"&gt;Succinct lazy init&lt;/h3&gt;
&lt;p&gt;As mentioned, the two newer C# features allow for this code to be more succinct:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public Album(string name, List&amp;lt;Song&amp;gt; songs = null)
{
    _name = name;
    _songs = songs;

    _songs ??= new();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;null-coalescing assignment operator&lt;/em&gt; &lt;code&gt;??=&lt;/code&gt; assigns the value of the right-hand side to the left-hand side, only if the left-hand side is null&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;target-typed new&lt;/code&gt; expression, &lt;code&gt;new&lt;/code&gt; allows for the inferring of the type from the declaration, instead of having to explicitly specify the type in full&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Four lines of code have been reduced to one!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;A very minor change, which is not a necessity or requirement when coding - however is does result in cleaner, more succinct code. Over time, it also does reduce coding time by reducing the number of key strokes required by the developer.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/davidfowl/status/1586592671296290816"&gt;David Fowler Tweet&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;205: 18-11-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>