<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title />
		<link>https://alwaysdeveloping.net/</link>
		<description>always learning | always growing</description>
		<copyright>Copyright © 2022</copyright>
		<pubDate>Thu, 21 Jul 2022 04:22:24 GMT</pubDate>
		<lastBuildDate>Thu, 21 Jul 2022 04:22:24 GMT</lastBuildDate>
		<item>
			<title>Configuration from memory with AddJsonStream</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/07/21-addjsonstream</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/07/21-addjsonstream</guid>
			<pubDate>Thu, 21 Jul 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;When writing &lt;code&gt;unit test&lt;/code&gt; which require application configuration through &lt;code&gt;IConfiguration&lt;/code&gt;, the &lt;code&gt;AddJsonStream&lt;/code&gt; method can be used to load different application settings configuration from memory (instead of from an appsettings.json file).&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;p&gt;The setup is a fairly common pattern I've experienced when writing &lt;code&gt;shared, reusable, packaged libraries&lt;/code&gt; - a piece of functionality is packaged into a library (not shown in this post, but published to a NuGet store). This library functionality is configured and added to the dependency injection container at startup using an extension method, with the configuration options for the library (optionally) specified in the appsettings.json file.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;class library&lt;/code&gt; is created for the shared component.&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;interface&lt;/code&gt; is created as an abstraction for the logic:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public interface IDoWork
{
    int DoSomeWork();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we also have an &lt;code&gt;options&lt;/code&gt;/settings/configuration class which contains the settings for the library:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class DoWorkOptions
{
    public bool IsEnabled { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then there is the implementation of the interface, the logic for the library (incredibly simple in this demo):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class DoWork : IDoWork
{
    /// &amp;lt;summary&amp;gt;
    /// Stores the configuration options
    /// &amp;lt;/summary&amp;gt;
    private readonly DoWorkOptions _options;

    /// &amp;lt;summary&amp;gt;
    /// Constructor
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;options&amp;quot;&amp;gt;The configuration options&amp;lt;/param&amp;gt;
    public DoWork(DoWorkOptions options)
    {
        _options = options;
    }

    /// &amp;lt;summary&amp;gt;
    /// Executes the functionality of the library
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;returns&amp;gt;1 if enabled, 0 if disabled&amp;lt;/returns&amp;gt;
    public int DoSomeWork()
    {
        if(_options.IsEnabled)
        {
            return 1;
        }

        return 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally an extension method on &lt;code&gt;IServiceCollection&lt;/code&gt; to configure all the pieces with the dependency injection container:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static class DoWorkExtensions
{
    /// &amp;lt;summary&amp;gt;
    /// Configure the library with the DI container
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;services&amp;quot;&amp;gt;The IServiceCollection implementation&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;configuration&amp;quot;&amp;gt;The IConfiguration implementation&amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
    public static IServiceCollection AddDoWork(this IServiceCollection services, 
        IConfiguration configuration)
    {
        // load the options from the configuration implementation
        var options = new DoWorkOptions();
        configuration.GetSection(&amp;quot;doWorkOptions&amp;quot;).Bind(options);

        // add the functionality to DI
        services.AddTransient(typeof(IDoWork), typeof(DoWork));
        // add the options to DI
        services.AddSingleton(options);

        return services;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To recap - we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an interface for the functionality (&lt;em&gt;IDoWork&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;with an implementation of the functionality (&lt;em&gt;DoWork&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;which is configured using options (&lt;em&gt;DoWorkOptions&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;and setup with the dependency injection container using an extension method (&lt;em&gt;DoWorkExtensions&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our very simple shared library is now &lt;code&gt;complete and ready to be used&lt;/code&gt;!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="web-api"&gt;Web api&lt;/h2&gt;
&lt;p&gt;First a look at how this would be used in an &lt;code&gt;minimal web api&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the necessary references in place, the extension method can be invoked on startup, which then allows for the the &lt;em&gt;IDoWork&lt;/em&gt; interface to be injected into the endpoint handler delegate:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = WebApplication.CreateBuilder(args);

// this line is not explicitly needed as its automatically done 
// if not specified here, but the configuration get loaded from the 
// appsettings.json file
builder.Configuration.AddJsonFile(&amp;quot;appsettings.json&amp;quot;);

// configured with dependency injection container
builder.Services.AddDoWork(builder.Configuration);

var app = builder.Build();

// injected IDoWork
app.MapGet(&amp;quot;/work&amp;quot;, (IDoWork worker) =&amp;gt;
{
    // execute the logic
    return worker.DoSomeWork();
});

app.Run();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the appsettings.json being as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;DoWorkOptions&amp;quot;: {
    &amp;quot;IsEnabled&amp;quot; :  true
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calling the &lt;code&gt;/work&lt;/code&gt; endpoint will return a &lt;code&gt;1 or 0&lt;/code&gt; dependant on if the &lt;em&gt;DoWorkOptions -&amp;gt; IsEnabled&lt;/em&gt; flag is set to &lt;code&gt;true or false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So how do we unit test a piece of code which is dependant on json configuration? - with the &lt;code&gt;AddJsonStream&lt;/code&gt; method!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="unit-test"&gt;Unit Test&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;AddJsonStream&lt;/code&gt; is an extension method on &lt;em&gt;ConfigurationBuilder&lt;/em&gt;, which as the name implies, allows for loading of JSON configuration data from memory, instead of from file as is the the case with &lt;code&gt;AddJsonFile&lt;/code&gt; above.&lt;/p&gt;
&lt;p&gt;We can leverage this to write unit tests with different setups of configuration.&lt;/p&gt;
&lt;p&gt;A note - there are other/better ways of performing endpoint testing, &lt;code&gt;WebApplicationFactory&lt;/code&gt; for example, but these are intentionally simple and the logic is being tested directly (from the DI container), and not through an endpoint.&lt;/p&gt;
&lt;p&gt;Test when the option is &lt;em&gt;&lt;strong&gt;enabled&lt;/strong&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[TestMethod]
public void Test_Enabled_Config()
{
    // create a memory stream with the json configuration
    var sr = new MemoryStream(Encoding.ASCII.GetBytes(&amp;#64;&amp;quot;
{
&amp;quot;&amp;quot;DoWorkOptions&amp;quot;&amp;quot; : {
    &amp;quot;&amp;quot;IsEnabled&amp;quot;&amp;quot; : true
}
}&amp;quot;));

    // setup host
    var host = Host.CreateDefaultBuilder()
        .ConfigureAppConfiguration((hostingContext, config) =&amp;gt;
        {
            // load from the memory stream, and not from file
            config.AddJsonStream(sr);
        })
        .ConfigureServices((context, services) =&amp;gt; services
            .AddDoWork(context.Configuration)
        ).Build();

    // get the implementation from the DI container
    var worker = (IDoWork)host.Services.GetService(typeof(IDoWork));

    // invoke and assert the result
    Assert.AreEqual(1, worker.DoSomeWork());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test when the option is &lt;em&gt;&lt;strong&gt;disabled&lt;/strong&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[TestMethod]
public void Test_Disabled_Config()
{
    // create a memory stream with the json configuration
    var sr = new MemoryStream(Encoding.ASCII.GetBytes(&amp;#64;&amp;quot;
{
&amp;quot;&amp;quot;DoWorkOptions&amp;quot;&amp;quot; : {
    &amp;quot;&amp;quot;IsEnabled&amp;quot;&amp;quot; : false
}
}&amp;quot;));

    // setup host
    var host = Host.CreateDefaultBuilder()
        .ConfigureAppConfiguration((hostingContext, config) =&amp;gt;
        {
            // load from the memory stream, and not from file
            config.AddJsonStream(sr);
        })
        .ConfigureServices((context, services) =&amp;gt; services
            .AddDoWork(context.Configuration)
        ).Build();

    // get the implementation from the DI container
    var worker = (IDoWork)host.Services.GetService(typeof(IDoWork));

    // invoke and assert the result
    Assert.AreEqual(0, worker.DoSomeWork());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additional tests can obviously be included for additional use cases (empty configuration file, invalid name or value in the file etc.) - and these are easy and quick to add and configure with &lt;code&gt;AddJsonStream&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;AddJsonStream&lt;/code&gt; is a very useful method when writing unit tests - I'm not sure how useful it would be outside of a unit test, during the normal execution of an application, but its available if required.&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;121: 21-07-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>SQL wildcard characters</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/07/20-sql-wildcards</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/07/20-sql-wildcards</guid>
			<pubDate>Wed, 20 Jul 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;There are a number of SQL wildcard characters, apart from the commonly used (at least in my case) &lt;code&gt;zero or more characters, %&lt;/code&gt; wildcard. These include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt; - representing a single character&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt; - representing any single character within the brackets&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt; - representing any character not in the brackets&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt; - representing any single character in the specified range&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id="table-setup"&gt;Table setup&lt;/h2&gt;
&lt;p&gt;We have a simple &lt;code&gt;Word&lt;/code&gt; table, with one column, also called &lt;code&gt;Word&lt;/code&gt;. The table is populated with 5 records:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;flout
hit
hot
hut
shout
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;h3 id="single-character"&gt;Single character&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;_&lt;/code&gt; is used to represent a single character.&lt;/p&gt;
&lt;p&gt;The following will select any &lt;code&gt;three letter words which start with an 'h' and end with a 't'&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * 
FROM Word
WHERE Word LIKE 'h_t'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;hit
hot
hut
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="single-character-array"&gt;Single character array&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;[]&lt;/code&gt; characters are used to represent any single character specified within the brackets.&lt;/p&gt;
&lt;p&gt;The following will select any &lt;code&gt;three letter words which start with an 'h', have an 'o' OR 'u' as the middle letter, and which end with a 't'&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * 
FROM Word
WHERE Word LIKE 'h[ou]t'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;hot
hut
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To reiterate,  only a &lt;code&gt;single character&lt;/code&gt; from within the brackets is matched. For example&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * 
FROM Word
WHERE Word LIKE 'sh[ou]t'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No rows will be returned, as &lt;code&gt;shout&lt;/code&gt; is NOT a match. Only &lt;code&gt;shot&lt;/code&gt; and &lt;code&gt;shut&lt;/code&gt; would be matched.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="character-array-negation"&gt;Character array negation&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;^&lt;/code&gt; character is used, in conjunction with the characters in the brackets &lt;code&gt;[]&lt;/code&gt;, as a negation.&lt;/p&gt;
&lt;p&gt;The following will select any &lt;code&gt;three letter words which end in 'out', but NOT preceded by an 'l'&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * 
FROM Word
WHERE Word LIKE '%[^l]out'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;shout
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The negation applies to all character in the brackets.&lt;/p&gt;
&lt;p&gt;The following will select &lt;code&gt;any three letter word, which starts with an 'h', does NOT contain 'o' or 'u' as the middle letter, and ends in 't'&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * 
FROM Word
WHERE Word LIKE 'h[^ou]t'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;hit
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="character-range"&gt;Character range&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;-&lt;/code&gt; character is used in conjunction with the characters in the brackets &lt;code&gt;[]&lt;/code&gt;, as a range specifier.&lt;/p&gt;
&lt;p&gt;The following will select any &lt;code&gt;three letter words starting with 'h', has any character in the alphabet between, and including, 'o' and 'u' in the middle, and ending in 't'&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * 
FROM Word
WHERE Word LIKE 'h[o-u]t'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;hot
hut
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="multiple-characters"&gt;Multiple characters&lt;/h3&gt;
&lt;p&gt;A quick look at the more common &lt;code&gt;%&lt;/code&gt; character, which is used to represent zero or more characters.&lt;/p&gt;
&lt;p&gt;The following will select any &lt;code&gt;words starting with zero or more of any characters, followed by an 'h', followed by zero or more of any characters, and finally ending with a 't'&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * 
FROM Word
WHERE Word LIKE '%h%t'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;hit
hot
hut
shout
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Personally, I've never had any specific need or requirement for any of these wildcards, apart from &lt;code&gt;%&lt;/code&gt; -  however, they all have their place. With the knowledge of their existence, one is at least equipped to determine if any can add any value with each specific use case or requirement.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.w3schools.com/sql/sql_wildcards.asp"&gt;SQL Wildcard Characters&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;120: 20-07-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>nameof usage for better code quality</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/07/19-nameof-constants</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/07/19-nameof-constants</guid>
			<pubDate>Tue, 19 Jul 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;When defining string with constants (in particular, but other situations also apply) the &lt;code&gt;nameof operator&lt;/code&gt; can be leveraged to remove explicitly set values, ensuring more consistent, cleaner and less error prone code is produced.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="nameof-expression"&gt;nameof expression&lt;/h2&gt;
&lt;p&gt;So briefly, what does &lt;code&gt;nameof&lt;/code&gt; do? - it &lt;em&gt;produces the name of a variable type, or member as the string constant&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Consider the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var fibonacci = new List&amp;lt;int&amp;gt; { 0, 1, 1, 2, 3, 5 } ;
Console.WriteLine(nameof(List&amp;lt;int&amp;gt;));  // outputs the type
Console.WriteLine(nameof(fibonacci)); // outputs the variable name
Console.WriteLine(nameof(fibonacci.Count)); // outputs the method name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;List
fibonacci
Count
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So let's see how we can leverage &lt;code&gt;nameof&lt;/code&gt; in the following use cases.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="constants"&gt;Constants&lt;/h2&gt;
&lt;h3 id="issue"&gt;Issue&lt;/h3&gt;
&lt;p&gt;Suppose our application has a list of &lt;em&gt;system statuses&lt;/em&gt; stored as &lt;code&gt;string constants&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class SystemStatus
{
    public const string Starting = &amp;quot;Starting&amp;quot;;
    public const string Running = &amp;quot;Running&amp;quot;;
    public const string ShuttingDown = &amp;quot;ShuttingDown&amp;quot;;
    public const string Offline = &amp;quot;Offline&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the usage and output being:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Console.WriteLine(SystemStatus.ShuttingDown); // outputs &amp;quot;ShuttingDown&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Is there anything &lt;code&gt;inherently wrong&lt;/code&gt; with this approach? Not really, it still functions as expected.&lt;/p&gt;
&lt;p&gt;However, suppose we need to &lt;code&gt;change the &amp;quot;ShuttingDown&amp;quot; status to &amp;quot;Terminating&amp;quot;&lt;/code&gt;. Navigating to one of the usages of &lt;em&gt;SystemStatus.ShuttingDown&lt;/em&gt;, we rename the &lt;code&gt;const&lt;/code&gt; (using F2 &lt;em&gt;Rename&lt;/em&gt;, for example).&lt;/p&gt;
&lt;p&gt;We now have this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Console.WriteLine(SystemStatus.Terminating); // still outputs &amp;quot;ShuttingDown&amp;quot;!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However the output is still &lt;code&gt;&amp;quot;ShuttingDown&amp;quot;&lt;/code&gt;, even though the &lt;code&gt;const&lt;/code&gt; name has been changed to &lt;em&gt;Terminating&lt;/em&gt;! We now either have &lt;code&gt;misleading code at best or a bug at worst.&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="resolution"&gt;Resolution&lt;/h3&gt;
&lt;p&gt;As this post implies, the solution is to use the &lt;code&gt;nameof&lt;/code&gt; operator instead of a hard-coded string!&lt;/p&gt;
&lt;p&gt;Replacing the string values, with &lt;code&gt;nameof&lt;/code&gt; referencing the same variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class SystemStatus
{
    public const string Starting = nameof(Starting);
    public const string Running = nameof(Running);
    public const string ShuttingDown = nameof(ShuttingDown);
    public const string Offline = nameof(Offline);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This for example will set the value of the &lt;em&gt;Starting&lt;/em&gt; constants to the name of the constant, &amp;quot;Starting&amp;quot;.&lt;/p&gt;
&lt;p&gt;Now when renaming one of the &lt;code&gt;const&lt;/code&gt; names, it's value will be kept consistent - the same as the &lt;code&gt;const&lt;/code&gt; name. If manually renaming one of the &lt;code&gt;const&lt;/code&gt; names, but forgetting to rename its usage in &lt;code&gt;nameof&lt;/code&gt; will result in a compiler error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class SystemStatus
{
    public const string Starting = nameof(Starting);
    public const string Running = nameof(Running);
    // Compiler error &amp;quot;ShuttingDown&amp;quot; does not exist
    public const string Terminating = nameof(ShuttingDown);
    public const string Offline = nameof(Offline);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result - cleaner, more consistent and less error prone code!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="parameters"&gt;Parameters&lt;/h2&gt;
&lt;h3 id="issue-1"&gt;Issue&lt;/h3&gt;
&lt;p&gt;A similar issue can be experience in instances where a &lt;code&gt;parameter name is used&lt;/code&gt;, in an exception message, for example.&lt;/p&gt;
&lt;p&gt;If we have this method, with the parameter name hardcoded in the exception string message:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public int Division(int dividend, int div)
{
    if(div == 0)
    {
        // string value is hardcoded with the parameter name
        throw new ArgumentException($&amp;quot;Parameter 'div' cannot be zero&amp;quot;);
    }

    return dividend / div;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We realize the &lt;code&gt;div&lt;/code&gt; parameter is not a good parameter name, and should be renamed to &lt;code&gt;divisor&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public int Division(int dividend, int divisor)
{
    if(divisor == 0)
    {
        // string value is hardcoded with the INCORRECT parameter name
        throw new ArgumentException($&amp;quot;Parameter 'div' cannot be zero&amp;quot;);
    }

    return dividend / divisor;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Its very easy to miss the hardcoded string when refactoring, especially if using an IDE rename feature, which won't automatically rename the hand-coded parameter name within the string.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="resolution-1"&gt;Resolution&lt;/h3&gt;
&lt;p&gt;Again, the remedy is to use the &lt;code&gt;nameof&lt;/code&gt; operator:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public int Division(int dividend, int divisor)
{
    if (divisor == 0)
    {
        throw new ArgumentException($&amp;quot;Parameter '{nameof(divisor)}' cannot be zero&amp;quot;);
    }

    return dividend / divisor;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if renaming the parameter name, the exception message is automatically updated as well (or will throw a compiler error if not all usages of the parameter are not updated):&lt;/p&gt;
&lt;p&gt;The result - cleaner, more consistent and less error prone code!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;A small, simple technique to incorporate into daily coding, which may not have any obvious immediate benefit - but if/when it comes time to do any refactoring, will definitely save time and effort due to its cleaner, more consistent approach.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.reddit.com/r/csharp/comments/v81c13/can_anyone_tell_me_the_point_of_this_syntax_im/"&gt;Reddit CSharp post&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;119: 19-07-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Tuples for class value equality</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/07/18-tuple-equality</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/07/18-tuple-equality</guid>
			<pubDate>Mon, 18 Jul 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;tuple&lt;/code&gt; can be used to check the &lt;code&gt;value equality&lt;/code&gt; of two instances of the same class.&lt;/p&gt;
&lt;p&gt;When comparing classes, the equality operator (&lt;code&gt;==&lt;/code&gt;) will check that the two instances are actually the same instance, not that the values of the two instances are the same. There are a &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/how-to-define-value-equality-for-a-type"&gt;number of different techniques&lt;/a&gt; to define value equality for a class, but they all ultimately have the same underlying logic - each property of the instances being compared need to individually be compared.&lt;/p&gt;
&lt;p&gt;The usage of &lt;code&gt;tuples&lt;/code&gt; can be used to simplify this comparison.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;p&gt;In this post we will be using a &lt;code&gt;Song&lt;/code&gt; class, which has three properties:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Song
{
    public string Name { get; init; }

    public string Artist { get; init; }

    public int LengthInSeconds { get; init; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For two &lt;em&gt;Song&lt;/em&gt; instances to be equal, each of the three properties for the two instances need to be equal.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="equality"&gt;Equality&lt;/h2&gt;
&lt;h3 id="equality-operator"&gt;Equality operator&lt;/h3&gt;
&lt;p&gt;As mentioned above, using the default equality operator for classes will test if the two instances are actually the same instance, not check the values of the two instances:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;
// two Song instances, both with the same values
var song = new Song
{
    Artist = &amp;quot;Foo Fighters&amp;quot;,
    Name = &amp;quot;Everlong&amp;quot;,
    LengthInSeconds = 250
};

var song1 = new Song
{
    Artist = &amp;quot;Foo Fighters&amp;quot;,
    Name = &amp;quot;Everlong&amp;quot;,
    LengthInSeconds = 250
};

// a 3rd instance, set to the first instance
var song2 = song;

// comparing two different instances
Console.WriteLine(song == song1);
// comparing two instances, which are the &amp;quot;same&amp;quot; instance
Console.WriteLine(song == song2);

// comparing two different instances
Console.WriteLine(song.Equals(song1));
// comparing two instances, which are the &amp;quot;same&amp;quot; instance
Console.WriteLine(song.Equals(song2));

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of the above is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;False
True
False
True
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="manual-comparison"&gt;Manual comparison&lt;/h3&gt;
&lt;p&gt;To compare a value comparison of the two classes (instead of using one of &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/how-to-define-value-equality-for-a-type"&gt;these techniques&lt;/a&gt;) we are going to write a method to do the comparison:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;bool Compare(Song s1, Song s2) =&amp;gt;
    s1.Artist == s2.Artist &amp;amp;&amp;amp; // compare artist
    s1.Name == s2.Name &amp;amp;&amp;amp;  // and Name
    s1.LengthInSeconds == s2.LengthInSeconds; // and song Length
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Only if all three properties are equal, are the two instances equal:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Console.WriteLine(Compare(song, song1));
Console.WriteLine(Compare(song, song2));
Console.WriteLine(Compare(song1, song2));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output being:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;True
True
True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above will function correctly, adequately doing a value comparison of the two instance - however a simpler and cleaner technique is to use a &lt;code&gt;tuple&lt;/code&gt; for the value comparison.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="tuple-equality"&gt;Tuple equality&lt;/h3&gt;
&lt;p&gt;One feature of the &lt;code&gt;Tuple&lt;/code&gt; is that using the equality operator on it &lt;strong&gt;does&lt;/strong&gt; compare the values:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var tuple = (1, 2, 3);
var tuple1 = (1, 2, 3);

Console.WriteLine(tuple == tuple1);
Console.WriteLine(tuple.Equals(tuple1));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;True
True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This fact can be leverage to compare two class instances by &lt;code&gt;creating tuples with the class values, and then comparing the tuples!&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="tuple-comparison"&gt;Tuple comparison&lt;/h3&gt;
&lt;p&gt;If we rework the &lt;em&gt;Compare&lt;/em&gt; method defined above, to use a &lt;code&gt;Tuple&lt;/code&gt; instead:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Use the properties of each instance to create a tuple
// and compare the two tuples
bool CompareTuple(Song s1, Song s2) =&amp;gt;
    (s1.Artist, s1.Name, s1.LengthInSeconds) == (s2.Artist, s2.Name, s2.LengthInSeconds);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Executing the same comparisons as above using the new method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Console.WriteLine(CompareTuple(song, song1));
Console.WriteLine(CompareTuple(song, song2));
Console.WriteLine(CompareTuple(song1, song1));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yields the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;True
True
True
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;While the results of the two methods are the same, the tuple version is more &lt;em&gt;concise, cleaner and less prone to developer error&lt;/em&gt;, especially if there are a large number of fields being compare.&lt;/p&gt;
&lt;p&gt;The tuple method can also be used in conjunction with the &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/how-to-define-value-equality-for-a-type"&gt;techniques already mentioned&lt;/a&gt; - for example by overriding the &lt;em&gt;equals operator&lt;/em&gt; (==) and performing the tuples equality check in that method.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=aUbXGs7YTGo&amp;amp;t=569s"&gt;Change your habits: Modern techniques for modern C# - Bill Wagner&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;118: 18-07-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Unit testing a protected method</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/07/15-testing-protected</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/07/15-testing-protected</guid>
			<pubDate>Fri, 15 Jul 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;To unit test a &lt;code&gt;protected&lt;/code&gt; method of a class, inheritance and a public method wrapper can be used.&lt;/p&gt;
&lt;p&gt;Consider a class, (called, for example, &lt;em&gt;CustomClass&lt;/em&gt;) with a protected member - a &lt;em&gt;test&lt;/em&gt; class (&lt;em&gt;TestCustomClass&lt;/em&gt;) can be created which inherits from &lt;em&gt;CustomClass&lt;/em&gt; Then a public wrapper method created on &lt;em&gt;TestCustomClass&lt;/em&gt; can be created, which in turn invokes the &lt;code&gt;protected&lt;/code&gt; method on &lt;em&gt;CustomClass&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This pattern enables the &lt;code&gt;protected&lt;/code&gt; member to be accessed and tested through the &lt;em&gt;public test wrapper&lt;/em&gt; method.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="protected-keyword"&gt;Protected keyword&lt;/h2&gt;
&lt;p&gt;A quick recap of the &lt;code&gt;protected&lt;/code&gt; keyword - a &lt;code&gt;protected member is accessible within its class and by derived class instances&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For testing, the &lt;code&gt;&amp;quot;&amp;quot;derived class instance&amp;quot;&amp;quot;&lt;/code&gt; is the relevent and important piece of information.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="problem"&gt;Problem&lt;/h2&gt;
&lt;p&gt;We have a library which performs some business logic, some of it &lt;code&gt;publicly&lt;/code&gt; exposed, and some of it &lt;code&gt;protected&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace CustomLibrary;

public class CustomClass
{
    public int PerformPublicLibraryLogic()
    {
        // do some processing
        return 0;
    }

    protected int PerformProtectedLibraryLogic()
    {
        // do processing
        return 0;
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want to unit test these two methods, so a separate test project is created (a &lt;em&gt;MSTest&lt;/em&gt; test project in this example):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace CustomApplication.UnitTest;

[TestClass]
public class CustomLibraryUnitTests
{
    [TestMethod]
    // Tests the public method
    public void TestPublic()
    {
        // create an instance and call the public method
        var customclass = new CustomClass();
        var result = customclass.PerformPublicLibraryLogic();

        // check the results
        Assert.AreEqual(0, result);
    }

    [TestMethod]
    // Try test the protected method
    public void TestProtectedBroken()
    {
        var customclass = new CustomClass();
        // THIS WILL NOT COMPILE
        // PerformProtectedLibraryLogic is not accessible
        var result = customclass.PerformProtectedLibraryLogic();
        
        Assert.AreEqual(0, result);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code will &lt;code&gt;NOT compile&lt;/code&gt;, as the &lt;em&gt;PerformProtectedLibraryLogic&lt;/em&gt; is &lt;code&gt;not accessible from the test project&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="solution"&gt;Solution&lt;/h2&gt;
&lt;p&gt;As mentioned above, the important piece of information related to the &lt;code&gt;protected&lt;/code&gt; keyword, is that a protected member is accessible from a &lt;code&gt;derived class instance&lt;/code&gt; - so let's create a derived class.&lt;/p&gt;
&lt;p&gt;In the test project:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace CustomApplication.UnitTest;

// inherit from the class in question
public class TestCustomClass : CustomClass
{
    // create a public method, which wraps the protected method
    public int WrappedPerformProtectedLibraryLogic()
    {
        // as this code is inside a derived class, it has accessibility
        // to the PerformProtectedLibraryLogic method
        return PerformProtectedLibraryLogic();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of testing the protected method on the &lt;em&gt;CustomClass&lt;/em&gt; directly, it can now be tested through &lt;em&gt;public&lt;/em&gt; method on &lt;em&gt;TestCustomClass&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[TestMethod]
// Tests the protected method
public void TestProtectedWorking()
{
    // used the TestCustomClass instead of CustomClass 
    var customclass = new TestCustomClass();
    // invoke the wrapper method
    var result = customclass.WrappedPerformProtectedLibraryLogic();

    Assert.AreEqual(0, result);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What's important here is that the &lt;em&gt;TestCustomClass&lt;/em&gt; and &lt;em&gt;wrapper method&lt;/em&gt; &lt;code&gt;add no additional logic or complexity&lt;/code&gt;. We do not want the test class to interfere with the goal of testing the underlying protected method.&lt;/p&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;The technique mentioned here is not a ground-breaking revelation, but it is very useful. Personally, I've recently started writing more unit tests in earnest (after not having done any for 5+ years) this was one of the first issues I encountered, I had not experienced before, which needed to be solved.&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;117: 15-07-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Entity Framework DbContext Pooling</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/07/14-dbcontext-pooling</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/07/14-dbcontext-pooling</guid>
			<pubDate>Thu, 14 Jul 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;Entity Framework Core's &lt;code&gt;DbContext pooling&lt;/code&gt; functionality can be used to improve the performance of an application.&lt;/p&gt;
&lt;p&gt;While generally a lightweight object, each context instance does require some internal setup of various services, which does have an overhead. &lt;code&gt;Context pooling&lt;/code&gt;, as the name implies, create a pool of DbContext instances, setup during startup of the application and reused, thus paying the setup cost only once.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Configuring an application to use &lt;code&gt;DbContext pooling&lt;/code&gt; instead of the non-pooling option is incredibly simple - in fact it requires just one small change to the usual DbContext setup.&lt;/p&gt;
&lt;p&gt;On startup of an application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Default non-pooling configuration&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;builder.Services.AddDbContext&amp;lt;DemoContext&amp;gt;(o =&amp;gt; o
    .UseSqlServer(builder.Configuration.GetConnectionString(&amp;quot;DemoContext&amp;quot;)));
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DbContext pooling configuration&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;builder.Services.AddDbContextPool&amp;lt;DemoContext&amp;gt;(o =&amp;gt; o
    .UseSqlServer(builder.Configuration.GetConnectionString(&amp;quot;DemoContext&amp;quot;)));
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead of the &lt;code&gt;AddDbContext&lt;/code&gt; method being called, the &lt;code&gt;AddDbContextPool&lt;/code&gt; method is called - thats all the configuration required.&lt;/p&gt;
&lt;p&gt;The default pool size can also be manually specified as part of the &lt;em&gt;AddDbContextPool&lt;/em&gt; call (with the default being 1024 in EF Core 6.0 and 128 in previous versions)&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;p&gt;The usage is &lt;code&gt;exactly the same&lt;/code&gt; awith our without the context pooling - inject the application &lt;em&gt;DbContext&lt;/em&gt; (DemoContext in the above examples) into the relevent constructor and use it as per normal.&lt;/p&gt;
&lt;p&gt;Entity Framework will internally handle everything related to the pooling functionality.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="benchmarks"&gt;Benchmarks&lt;/h2&gt;
&lt;p&gt;For the benchmarks, we have a database table with &lt;code&gt;50&lt;/code&gt; records, and will be comparing retrieving a single row (using the primary key) using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Manually created &lt;code&gt;DbContext&lt;/code&gt; instance each time&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;DbContext&lt;/code&gt; retrieved from the context pool&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the below code, as dependency injection was not used, &lt;code&gt;PooledDbContextFactory&lt;/code&gt; is used to control getting an instance of a DbContext from the pool:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;
private DbContextOptions&amp;lt;DemoContext&amp;gt; _options;
private PooledDbContextFactory&amp;lt;DemoContext&amp;gt; _poolingFactory;

public Benchmarks()
{
    // confiture the dbcontext options
    _options = new DbContextOptionsBuilder&amp;lt;DemoContext&amp;gt;()
        .UseSqlServer(&amp;#64;&amp;quot;Server=.\SQLEXPRESS;Database=EFPool;Integrated Security=True&amp;quot;)
        .Options;

    // setup the pooling factory using the options
    _poolingFactory = new PooledDbContextFactory&amp;lt;DemoContext&amp;gt;(_options);
}

[Benchmark]
public Song WithoutContextPooling()
{
    // new DbContext using the options
    using var context = new DemoContext(_options);

    return context.Songs.First(s =&amp;gt; s.Id == 1);
}

[Benchmark]
public Song WithContextPooling()
{
    // new DbContext using the PooledDbContextFactory which uses the options
    using var context = _poolingFactory.CreateDbContext();

    return context.Songs.First(s =&amp;gt; s.Id == 1);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Results:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Error&lt;/th&gt;
&lt;th style="text-align: right;"&gt;StdDev&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen 0&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Allocated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;WithoutContextPooling&lt;/td&gt;
&lt;td style="text-align: right;"&gt;701.3 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;51.09 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;147.42 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;96 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WithContextPooling&lt;/td&gt;
&lt;td style="text-align: right;"&gt;124.9 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.15 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.02 us&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.4648&lt;/td&gt;
&lt;td style="text-align: right;"&gt;9 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;context pooling results in a 5.5x speed improvement&lt;/code&gt; and &lt;code&gt;10x memory improvement!&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Improvements such as the ones shown above in the benchmarks above might not be applicable in every application and use case - however my recommendation is to &lt;code&gt;default to using DbContext pooling&lt;/code&gt;. If performance is not where it should be, then benchmark the two options and revert to the option with the best performance.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/ef/core/performance/advanced-performance-topics?tabs=with-di%2Cwith-constant#dbcontext-pooling"&gt;DbContext pooling&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;116: 14-07-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Visual Studio Schema Compare</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/07/13-sql-schema-compare</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/07/13-sql-schema-compare</guid>
			<pubDate>Wed, 13 Jul 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;Visual Studio has a built in feature called &lt;code&gt;Schema Compare&lt;/code&gt; which easily allows for the comparing of two SQL database schemas and the generation of a script to bring them in sync.&lt;/p&gt;
&lt;p&gt;In the past I've had to perform database schema comparisons numerous times (admittedly the majority of these times have been in the fairly distant past when proper CI/CD tools and DevOps practices were not in place) - and there were limited tools available. &lt;code&gt;Schema Compare&lt;/code&gt; contains the all the features I've required in the past in an incredibly simple to use package.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;p&gt;The feature is available through the installation of the &lt;code&gt;SQL Server Data Tools&lt;/code&gt; Visual Studio component. One can use the &lt;em&gt;Visual Studio Installer&lt;/em&gt; to confirm if the component is installed or not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open &lt;em&gt;Visual Studio Installer&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Modify&lt;/em&gt; on the relevent Visual Studio installation&lt;/li&gt;
&lt;li&gt;Select the &lt;em&gt;Individual components&lt;/em&gt; tab&lt;/li&gt;
&lt;li&gt;Search for "sql server data tools"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/installation.png" alt="SQL Server Data Tools"&gt;&lt;/p&gt;
&lt;p&gt;Once installed, the feature will be available under &lt;code&gt;Tools -&amp;gt; SQL Server -&amp;gt; New Schema Comparison&lt;/code&gt; in Visual Studio:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/menu-feature.png" alt="New Schema Comparison"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;p&gt;The usage of the feature is straightforward - when opened you will be presented with two drop down lists, one to select the &lt;em&gt;Source&lt;/em&gt; database and one to select the &lt;em&gt;Target&lt;/em&gt; database:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/source-target.png" alt="Source and Target selection"&gt;&lt;/p&gt;
&lt;p&gt;A screen with the traditional database connection settings is presented when adding the &lt;em&gt;Source&lt;/em&gt; and &lt;em&gt;Target&lt;/em&gt; database:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/connection.png" alt="Source and Target selection"&gt;&lt;/p&gt;
&lt;p&gt;Once the &lt;em&gt;Source&lt;/em&gt; and &lt;em&gt;Target&lt;/em&gt; databases have been set, the &lt;code&gt;Compare&lt;/code&gt; button becomes available - clicking on this will perform the database comparison.&lt;/p&gt;
&lt;p&gt;A list of differences between the databases will be presented, drilling down and clicking on the specific item will then show the specific difference.&lt;/p&gt;
&lt;p&gt;In the example below, there are differences between the &lt;em&gt;Song&lt;/em&gt; tables in the two databases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;em&gt;Length&lt;/em&gt; discrepancy on the &lt;em&gt;Artist&lt;/em&gt; column&lt;/li&gt;
&lt;li&gt;a &lt;em&gt;Nullability&lt;/em&gt; discrepancy on the &lt;em&gt;LengthInSeconds&lt;/em&gt; column&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clicking on the &lt;em&gt;Length&lt;/em&gt; item, displays the specific difference:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/differences.png" alt="List of differences"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="application"&gt;Application&lt;/h2&gt;
&lt;p&gt;Once the differences have been identified, the next step is bring the &lt;em&gt;Destination&lt;/em&gt; database in line with the &lt;em&gt;Source&lt;/em&gt; database.&lt;/p&gt;
&lt;p&gt;This can be done by &lt;code&gt;updating the target database directly&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/update.png" alt="Update target"&gt;&lt;/p&gt;
&lt;p&gt;This may not always be possible or feasible, so another option is to have a &lt;code&gt;script generated&lt;/code&gt; to align the &lt;em&gt;Target&lt;/em&gt; to the &lt;em&gt;Source&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alwaysdeveloping.net/script.png" alt="Generate Script"&gt;&lt;/p&gt;
&lt;p&gt;The script generated by the tool looks as follows (abbreviated to include only the relevent portion):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;--
--
-- some preamble removed for brevity
--
--
USE [$(DatabaseName)];


GO
PRINT N'Altering Table [dbo].[Song]...';


GO
ALTER TABLE [dbo].[Song] ALTER COLUMN [Artist] NVARCHAR (500) NOT NULL;

ALTER TABLE [dbo].[Song] ALTER COLUMN [LengthInSeconds] INT NULL;


GO
PRINT N'Update complete.';
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default all differences are included in the &lt;code&gt;Update&lt;/code&gt; or &lt;code&gt;Generate Script&lt;/code&gt; but it is possible to uncheck specific differences if you wish to exclude them from the update.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;In a perfect world this feature is never required as DevOps practices ensure that a dev, test and production database are always in sync (or can easily be brought in sync). However in the real world, differences sometimes occur - sometimes its easier to sync a database schema from production to dev instead of creating the dev database from scratch, for example.&lt;/p&gt;
&lt;p&gt;In these cases, the &lt;code&gt;Schema Compare&lt;/code&gt; feature will prove to be invaluable in tracking down and remedying any differences.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.sqlshack.com/how-to-compare-two-sql-databases-from-visual-studio/"&gt;How to compare two SQL databases from Visual Studio&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;!--?# DailyDrop ?--&gt;116: 13-07-2022&lt;!--?#/ DailyDrop ?--&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>MaybeNullWhen attribute usage</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/07/12-maybenullwhen-attribute</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/07/12-maybenullwhen-attribute</guid>
			<pubDate>Tue, 12 Jul 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;MaybeNullWhen&lt;/code&gt; attribute can be used to specify that when a method returns &amp;quot;ReturnValue&amp;quot;, an &lt;code&gt;out&lt;/code&gt; parameter may be &lt;code&gt;null&lt;/code&gt; even if the corresponding type does not allow it.&lt;/p&gt;
&lt;p&gt;This is especially applicable in the &lt;code&gt;TryGet*&lt;/code&gt; methods, such as the &lt;em&gt;TryGetValue&lt;/em&gt; method on &lt;em&gt;Dictionary&lt;/em&gt;, for example.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;p&gt;In all the examples below, the project has been set to allow nullable types. In the csproj file, the following is set:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have also defined a &lt;em&gt;Person&lt;/em&gt; class, with a single &lt;em&gt;Name&lt;/em&gt; property:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Person
{
    public string Name { get; set; } 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A dictionary is then created of &lt;em&gt;Person&lt;/em&gt;'s, and &lt;em&gt;id&lt;/em&gt; value set for a &lt;code&gt;person which does not exist&lt;/code&gt; in the dictionary:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var people = new Dictionary&amp;lt;int, Person&amp;gt;();

people.Add(1, new Person { Name = &amp;quot;Dave&amp;quot; });
people.Add(2, new Person { Name = &amp;quot;John&amp;quot; });
people.Add(3, new Person { Name = &amp;quot;Mike&amp;quot; });
people.Add(4, new Person { Name = &amp;quot;Chris&amp;quot; });

// This Id does not exist in the dictionary
int id = 5;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="compiler-warning"&gt;Compiler warning&lt;/h2&gt;
&lt;p&gt;Next, we'll write a method to &lt;code&gt;TryGet&lt;/code&gt; a person out of the dictionary - the function will return &lt;code&gt;true/false&lt;/code&gt; if the dictionary contains the id, as well as having an &lt;code&gt;out&lt;/code&gt; Person parameter which will contain the &lt;em&gt;Person&lt;/em&gt; record, if found.&lt;/p&gt;
&lt;p&gt;This is a standard pattern used often by many core .NET libraries - &lt;em&gt;Dictionary&lt;/em&gt; already has a &lt;em&gt;TryGetValue&lt;/em&gt; method following this pattern, but for demo purposes we will write a custom method.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// return false if the record not found in the dictionary
// return true if found AND set the out Person to the found record
public bool TryGetPerson(Dictionary&amp;lt;int, Person&amp;gt; d, int id, out Person p)
{
    // check if the dictionary contains the key
    if (!d.ContainsKey(id))
    {
        // set the out parameter value to null
        p = null;
        return false;
    }

    // set the out parameter value to the item in the dictionary
    p = d[id];
    return true;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above method will work, and performs as expected - however, the compiler gives us a warning for the line &lt;code&gt;p = null&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Cannot convert null literal to non-nullable reference type.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is because the code is assigning a &lt;code&gt;null&lt;/code&gt; value to the out &lt;em&gt;Person&lt;/em&gt; p object, when the parameter hasn't been marked as explicitly allowing nulls.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="nullable-type"&gt;Nullable type&lt;/h2&gt;
&lt;p&gt;Let's address the warning - the compiler is telling us we are assigning a &lt;code&gt;null&lt;/code&gt; value to a &lt;code&gt;non-nullable&lt;/code&gt; type, so let's make the type &lt;code&gt;nullable&lt;/code&gt;. This is done by adding a question mark (&lt;code&gt;?&lt;/code&gt;) after the type:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Person has changed to nullable, Person?
public bool TryGetPerson(Dictionary&amp;lt;int, Person&amp;gt; d, int id, out Person? p)
{
    // check if the dictionary contains the key
    if (!d.ContainsKey(id))
    {
        // set the out parameter value to null
        p = null;
        return false;
    }

    // set the out parameter value to the item in the dictionary
    p = d[id];
    return true;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Making the above update will resolve the initial warning - however the usage of the above method has now introduced another warning:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;if(!TryGetPerson(people, id, out var person))
{
    return;
}

Console.WriteLine(person.Name);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;Console.WriteLine(person.Name);&lt;/code&gt; line of code results in the warning:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;Dereference of a possibly null reference.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The compiler is informing us that the code is referencing the &lt;em&gt;Name&lt;/em&gt; property on a possibly null object (resulting in an exception).&lt;/p&gt;
&lt;p&gt;This can be solved by checking if &lt;em&gt;person&lt;/em&gt; is null, again using the question mark:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Console.WriteLine(person?.Name);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="maybenullwhen-usage"&gt;MaybeNullWhen usage&lt;/h2&gt;
&lt;p&gt;Another option is, instead of making the &lt;em&gt;Person&lt;/em&gt; out parameter nullable, to make use of the &lt;code&gt;MaybeNullWhen&lt;/code&gt; attribute:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// The attribute is added to the parameter
public bool TryGetPerson(Dictionary&amp;lt;int, Person&amp;gt; d, int id, 
    [MaybeNullWhen(returnValue: false)]out Person p)
{
    // check if the dictionary contains the key
    if (!d.ContainsKey(id))
    {
        // set the out parameter value to null
        p = null;
        return false;
    }

    // set the out parameter value to the item in the dictionary
    p = d[id];
    return true;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The addition of the parameter is an indicator to the compiler that &lt;code&gt;the out Person parameter can maybe be NULL when the return value is false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The usage of the method is the same as before, but now no longer results in any warnings!&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;if(!TryGetPerson(people, id, out var person))
{
    return;
}

Console.WriteLine(person.Name);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If however &lt;em&gt;person&lt;/em&gt; is reference in a path where it could be null, then the warning occurs again:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;if(!TryGetPerson(people, id, out var person))
{
    // person is null here
    Console.WriteLine(person.Name);

    return;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above code snippet, &lt;em&gt;person.Name&lt;/em&gt; is being used in a path where &lt;em&gt;person&lt;/em&gt; is null (when &lt;em&gt;TryGetPerson&lt;/em&gt; returns false) - thanks to the &lt;code&gt;MaybeNullWhen&lt;/code&gt; attribute, the compiler has enough information to know this will most likely result in a null reference and so the warning occurs.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Whether writing a line of business application or a reusable library, if applicable, the &lt;code&gt;MaybeNullWhen&lt;/code&gt; attribute should be used to give more information to the compiler about the intention of the code, thus improving developer experience.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.reddit.com/r/csharp/comments/uxlkub/nullable_types_dictionaries_and_magic/"&gt;Nullable types, dictionaries and magic&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;115: 12-07-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Expanding on an property initializer</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/07/11-initializer-expansion</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/07/11-initializer-expansion</guid>
			<pubDate>Mon, 11 Jul 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;A class &lt;code&gt;property initializer can be expanded on in the class declaration&lt;/code&gt; (assuming the property type supports it, such as Dictionary) to a have additional values added.&lt;/p&gt;
&lt;p&gt;This technique (explained further below) does have fairly limited practical application and is quite niche - but it does have its place, and practical or not, is very interesting.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="use-case"&gt;Use case&lt;/h2&gt;
&lt;p&gt;In our use case, when an exception occurs, we want to capture some generic information about the PC on which the exception occurred (machine name, operating system), as well as the actual exception.&lt;/p&gt;
&lt;p&gt;If we have an &lt;code&gt;ExceptionInformation&lt;/code&gt; class to capture all this information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static information such as the &lt;em&gt;machine name&lt;/em&gt; can be &lt;code&gt;automatically initialized&lt;/code&gt; on instantiation of an &lt;em&gt;ExceptionInformation&lt;/em&gt; instance&lt;/li&gt;
&lt;li&gt;Dynamic information such as the &lt;em&gt;exception&lt;/em&gt; must be &lt;code&gt;manually supplied&lt;/code&gt; to our capture class&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="constructor"&gt;Constructor&lt;/h3&gt;
&lt;p&gt;One way of &lt;em&gt;manually&lt;/em&gt; supplying the exception information is pass it to the &lt;code&gt;ExceptionInformation&lt;/code&gt; instance in the constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class ExceptionInformation
{
    // string representation of the exception
    private readonly string _exceptionString;

    // set the exception in the constructor
    public ExceptionInformation(string exceptionString)
    {
        _exceptionString = exceptionString;
    }

    // A dictionary to contain all the relevent information about the exception
    // initialize it with the information on class initialization
    public Dictionary&amp;lt;string, object&amp;gt; Configuration { get; } = 
        new Dictionary&amp;lt;string, object&amp;gt;
        {
            [&amp;quot;MachineName&amp;quot;] = Environment.MachineName,
            [&amp;quot;OsVersion&amp;quot;] = Environment.OSVersion
        };

    // override method to be able to output a representation of the class
    public override string ToString()
    {
        return $&amp;quot;{_exceptionString}{Environment.NewLine}&amp;quot; +
            $&amp;quot;{String.Join(Environment.NewLine, Configuration.Select(d =&amp;gt; $&amp;quot;{d.Key}: { d.Value}&amp;quot;))}&amp;quot;;
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The usage of the class would be as follows (with an exception being forced to occur):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;try
{
    // force a divide by zero exception
    var intValue = 100;
    _ = intValue / 0;
}
catch(Exception ex)
{
    // capture the exception
    var ei = new ExceptionInformation(ex.ToString());
    Console.WriteLine(ei.ToString());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;System.DivideByZeroException: Attempted to divide by zero.
   at Program.&amp;lt;Main&amp;gt;$(String[] args) in 
    C:\Development\Projects\InitializerExpansion\Program.cs:line 5
MachineName: T800
OsVersion: Microsoft Windows NT 10.0.22000.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are other options to achieve the same result - instead of a setting the private &lt;em&gt;_exceptionString&lt;/em&gt; variable, the exception string value could have been added directly to the dictionary in the constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public ExceptionInformation(string exceptionString)
{
    this.Configuration.Add(&amp;quot;ExceptionString&amp;quot;, exceptionString);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both of the above approaches are valid and will achieve the desired result, however another interesting approach is to &lt;em&gt;expand on the property initializer&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="initializer-expansion"&gt;Initializer expansion&lt;/h3&gt;
&lt;p&gt;The initializer can be expanded to include adding custom information to the &lt;em&gt;ExceptionInformation&lt;/em&gt; instance. Similar to how the &lt;em&gt;exceptionString&lt;/em&gt; was added to the dictionary in the constructor in the above example, except this method is more dynamic and allows for any values to be added.&lt;/p&gt;
&lt;p&gt;If we remove all references to &lt;em&gt;exceptionString&lt;/em&gt; from the &lt;em&gt;ExceptionInformation&lt;/em&gt; class, including from the constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class ExceptionInformation
{
    // No constructor which takes the exception
   
    // A dictionary to contain all the relevent information about the exception
    // initialize it with the information on class initialization
    public Dictionary&amp;lt;string, object&amp;gt; Configuration { get; } = 
        new Dictionary&amp;lt;string, object&amp;gt;
        {
            [&amp;quot;MachineName&amp;quot;] = Environment.MachineName,
            [&amp;quot;OsVersion&amp;quot;] = Environment.OSVersion
        };

    // override method to be able to output a representation of the class
    // Now ONLY outputs the dictionary
    public override string ToString()
    {
        return String.Join(Environment.NewLine, Configuration.Select(d =&amp;gt; $&amp;quot;{d.Key}: {d.Value}&amp;quot;));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This usage of the class is now as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;try
{
    // force a divide by zero exception
    var intValue = 100;
    _ = intValue / 0;
}
catch(Exception ex)
{
    // capture the exception by expanding the Configuration initialization
    var ei = new ExceptionInformation
    {
        Configuration =
        {
            [&amp;quot;ExceptionString&amp;quot;] = ex.ToString()
            // any other data can be added here
        }
    };
    Console.WriteLine(ei.ToString());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the &lt;em&gt;Configuration&lt;/em&gt; values specified when an instance of &lt;em&gt;ExceptionInformation&lt;/em&gt; is initialized, &lt;code&gt;are added&lt;/code&gt; to the values initialized internally in the class.&lt;/p&gt;
&lt;p&gt;The output of the above is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;MachineName: T800
OsVersion: Microsoft Windows NT 10.0.22000.0
ExceptionString: System.DivideByZeroException: Attempted to divide by zero.
   at Program.&amp;lt;Main&amp;gt;$(String[] args) in 
    C:\Development\Projects\InitializerExpansion\Program.cs:line 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One &lt;code&gt;advantage&lt;/code&gt; of the initializer expansion method, is that all data is now contained in a single place (the dictionary) and more values can be added dynamically.&lt;br /&gt;
However, on the &lt;code&gt;negative side&lt;/code&gt;, its not apparently obvious to the developer using the &lt;em&gt;ExceptionInformation&lt;/em&gt; class, that additional items can be added to the dictionary in this manner.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;As mentioned, this has a fairly niche use case - and even though there are other methods to do the achieve the same outcome, I find this method especially appealing. Even if I never have a practical need for it in a real application - I still find it an interesting usage of the language features.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/8BitVentilator/status/1524685108606914564"&gt;8 Bit Ventilator tweet&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;?# DailyDrop ?&gt;114: 11-07-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>For loop lowering in C#</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/07/08-lowing-for-loop</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/07/08-lowing-for-loop</guid>
			<pubDate>Fri, 08 Jul 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;In C#, a &lt;code&gt;for loop&lt;/code&gt; is &lt;em&gt;lowered&lt;/em&gt; to a &lt;code&gt;while loop&lt;/code&gt; by the compiler.&lt;/p&gt;
&lt;p&gt;At a lower level, the &lt;code&gt;for&lt;/code&gt; loop &lt;em&gt;does not exist&lt;/em&gt; - it gets translated into a &lt;code&gt;while&lt;/code&gt; loop by the C# compiler, and then is executed as such.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="lowering"&gt;Lowering&lt;/h2&gt;
&lt;p&gt;Done by the C# compiler, &lt;code&gt;lowering&lt;/code&gt; is the process of rewriting high-level language features, into low-level language features in the &lt;em&gt;same language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There are a number of C# features, which are just &lt;em&gt;syntactic sugar&lt;/em&gt; over (often) more complex lower-level features - the compiler will take the high-level feature and &lt;em&gt;lower&lt;/em&gt; it to the lower-level feature.&lt;/p&gt;
&lt;p&gt;Lowering is done for a number of reasons, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Working with high-level features, are easier and simpler to work with&lt;/li&gt;
&lt;li&gt;Optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post is specifically about the &lt;code&gt;for&lt;/code&gt; loop, not an especially complex feature - however it is more complex than the &lt;code&gt;while&lt;/code&gt; loop, its lower-level equivalent.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="for-loop"&gt;For loop&lt;/h2&gt;
&lt;p&gt;Using &lt;a href="https://sharplab.io/"&gt;sharplab.io&lt;/a&gt;, one is able to see the lowered code the compiler generates.&lt;/p&gt;
&lt;p&gt;Here is an example of some code written in Visual Studio:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForLoopExample() 
{
    for(int i = 0; i &amp;lt; 100; i++)
    {
        Console.WriteLine(i);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the lowered code the compiler generates:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForLoopExample()
{
    int num = 0;
    while (num &amp;lt; 100)
    {
        Console.WriteLine(num);
        num++;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see - the &lt;code&gt;for&lt;/code&gt; loop is converted to a &lt;code&gt;while&lt;/code&gt; loop!&lt;/p&gt;
&lt;p&gt;Another example, in a previous post we learnt how the &lt;em&gt;iterator section&lt;/em&gt; of a for loop could &lt;a href="https://alwaysdeveloping.net/06/30-for-multi-operations"&gt;contain multiple statements&lt;/a&gt;. Looking at the lowered code for that example, the &lt;code&gt;while&lt;/code&gt; loop is controlled only by the &lt;em&gt;condition section&lt;/em&gt; of the &lt;code&gt;for&lt;/code&gt; loop - this is why this portion of the for loop can only contain one statement, while the other sections can contain multiple.&lt;/p&gt;
&lt;p&gt;Original C# code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForLoopExample2() 
{
    int countDown = 100;
    for(int i = 0; i &amp;lt; 100; i++, countDown--)
    {
        Console.WriteLine(i);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the lowered code the compiler generates:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForLoopExample2()
{
    int num = 100;
    int num2 = 0;
    while (num2 &amp;lt; 100)
    {
        Console.WriteLine(num2);
        num2++;
        num--;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id="foreach"&gt;Foreach&lt;/h2&gt;
&lt;p&gt;Just for reference, the &lt;code&gt;foreach&lt;/code&gt; does not operate the same way as the &lt;code&gt;for&lt;/code&gt; loop - even though both iterate through a list of items, they do it very differently.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Foreach&lt;/code&gt; works using the &lt;em&gt;&lt;a href="https://alwaysdeveloping.net/03/03-getenumerator"&gt;GetEnumerator&lt;/a&gt;&lt;/em&gt; method on a class, and is not lowered to a &lt;code&gt;while&lt;/code&gt; loop:&lt;/p&gt;
&lt;p&gt;Original C# code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForEachLoopExample() 
{
    var list = new List&amp;lt;int&amp;gt; { 1, 2, 3, 4, 5, };

    foreach (var item in list)
    {
        Console.WriteLine(item);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the lowered code the compiler generates:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ForEachLoopExample()
{
    List&amp;lt;int&amp;gt; list = new List&amp;lt;int&amp;gt;();
    list.Add(1);
    list.Add(2);
    list.Add(3);
    list.Add(4);
    list.Add(5);
    List&amp;lt;int&amp;gt; list2 = list;
    List&amp;lt;int&amp;gt;.Enumerator enumerator = list2.GetEnumerator();
    try
    {
        while (enumerator.MoveNext())
        {
            int current = enumerator.Current;
            Console.WriteLine(current);
        }
    }
    finally
    {
        ((IDisposable)enumerator).Dispose();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While the developer written code for a &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;foreach&lt;/code&gt; loop are fairly similar - the lowered code for the &lt;code&gt;foreach&lt;/code&gt; is a bit more complex than a simple &lt;code&gt;while&lt;/code&gt; loop.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;While this may not be something one has to worry or think about when coding - its always good to have a general knowledge of how the compiler works, and what its doing (even at a high level), and how the code written impacts the lowered code which gets executed.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://sharplab.io/"&gt;sharplab.io&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;!--?# DailyDrop ?--&gt;113: 08-07-2022&lt;!--?#/ DailyDrop ?--&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>