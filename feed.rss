<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title />
		<link>https://alwaysdeveloping.net/</link>
		<description>always learning | always growing</description>
		<copyright>Copyright © 2022</copyright>
		<pubDate>Thu, 10 Nov 2022 04:11:03 GMT</pubDate>
		<lastBuildDate>Thu, 10 Nov 2022 04:11:03 GMT</lastBuildDate>
		<item>
			<title>Awaiting anything with GetAwaiter</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/11/10-awaiting-anything</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/11/10-awaiting-anything</guid>
			<pubDate>Thu, 10 Nov 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;All that is required to &lt;code&gt;await&lt;/code&gt; a specific type, is that the type has a method called &lt;code&gt;GetAwaiter&lt;/code&gt; which returns an instance of &lt;code&gt;TaskAwaiter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;GetAwaiter&lt;/code&gt; method can be an &lt;em&gt;extension method&lt;/em&gt; - which means &lt;code&gt;any type can be extended to be awaited&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="use-case-double-parse"&gt;Use case: double parse&lt;/h2&gt;
&lt;p&gt;In general, the below use cases are not a recommendation or proposed best technique for solving the use case - but it's interesting to discover what is possible.&lt;/p&gt;
&lt;p&gt;In this use case, we are going to attempt to &lt;em&gt;make an async version of the double.TryParse method&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="tryparseasync"&gt;TryParseAsync&lt;/h3&gt;
&lt;p&gt;This solution doesn't require the usage of the &lt;code&gt;GetAwaiter&lt;/code&gt; method - in this first option we are just going to create a method which returns a &lt;code&gt;Task&lt;/code&gt; (and as such, the &lt;em&gt;Task&lt;/em&gt; is awaited):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// extension method on string
public static Task&amp;lt;bool&amp;gt; TryParseAsync(this string s, out double result)
{
    // perform the normal TryParse
    if(double.TryParse(s, out result))
    {
        // return a Task instead of the 
        // TryParse response
        return Task.FromResult(true);
    }
    
    // return a Task instead of the 
    // TryParse response
    return Task.FromResult(false);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can now be used as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Instead of doing it this OLD way
if(double.TryParse(&amp;quot;100&amp;quot;, out double result))
{
    Console.WriteLine(&amp;quot;100 is a double&amp;quot;);
}

// This is now possible:
// The TryParseAsync is called directly 
// on the string and can be awaited
if(await &amp;quot;100&amp;quot;.TryParseAsync(out double result1))
{
    Console.WriteLine(&amp;quot;100 is a double&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, the &lt;code&gt;TryParseAsync&lt;/code&gt; can be used on a string value directly, and as it returns a &lt;code&gt;Task&lt;/code&gt;, the call can be &lt;em&gt;awaited&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="await-directly"&gt;await directly&lt;/h3&gt;
&lt;p&gt;However, what if there is a requirement to perform the same functionality as &lt;code&gt;TryParseAsync&lt;/code&gt;, but to &lt;em&gt;await&lt;/em&gt; the string directly - not call the &lt;code&gt;TryParseAsync&lt;/code&gt; method. Well, no problem!&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static TaskAwaiter&amp;lt;bool&amp;gt; GetAwaiter(this string s)
{
    return s.TryParseAsync(out double _).GetAwaiter();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, a &lt;code&gt;GetAwaiter&lt;/code&gt; extension method is created on &lt;code&gt;string&lt;/code&gt; - by convention, this now allows &lt;code&gt;string to be awaited directly&lt;/code&gt;. In this instance, awaiting a string will try parse it as a double (using the previously created extension method).&lt;/p&gt;
&lt;p&gt;So now this can be done:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// just await the string
if(await &amp;quot;500&amp;quot;)
{
    Console.WriteLine(&amp;quot;500 is a double&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As mentioned - this is not really a recommended approach at all - while the code is more concise, the readability is not great, with the code making no contextual sense. However, it is what can be done.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="use-case-timespan"&gt;Use Case: TimeSpan&lt;/h2&gt;
&lt;p&gt;A more useful use case, is to &lt;em&gt;expand the functionality of TimeSpan&lt;/em&gt; to make it easier to &lt;em&gt;wait for specific lengths of time&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id="delay"&gt;Delay&lt;/h3&gt;
&lt;p&gt;Generally when a delay is required in code, a variation of the following is used:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;await Task.Delay(TimeSpan.FromMilliseconds(100));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing wrong with this, it works. However if used often throughout code, it's it fairly verbose.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="await"&gt;await&lt;/h3&gt;
&lt;p&gt;As before, a &lt;code&gt;GetAwaiter&lt;/code&gt; method could be added to &lt;code&gt;TimeSpan&lt;/code&gt; to make it &lt;em&gt;awaitable&lt;/em&gt;, eliminating the need for the Task.Delay (this will still be required, it will just be wrapped up in the extension method):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// extension method on TimeSpan
public static TaskAwaiter GetAwaiter(this TimeSpan timeSpan)
{
    return Task.Delay(timeSpan).GetAwaiter();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method can now be used as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;await TimeSpan.FromMilliseconds(100);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Definitely simpler and more concise than the previous version, and I'd argue actually more readable.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="await-extended"&gt;await extended&lt;/h3&gt;
&lt;p&gt;This could even be taken a step further with an addition extension method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static TimeSpan MilliSeconds(this int i) =&amp;gt; TimeSpan.FromMilliseconds(i);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is an extension method on an &lt;code&gt;int&lt;/code&gt;, which will convert the integer to an equivalent TimeSpan object.&lt;/p&gt;
&lt;p&gt;As we already have an existing extension method to &lt;em&gt;await&lt;/em&gt; a &lt;code&gt;TimeSpan&lt;/code&gt;, the two extensions methods can be used in conjunction - &lt;em&gt;convert an integer to a TimeSpan, which can then be awaited&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;await 100.MilliSeconds();
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;While this is a very useful and convenient technique to add the &lt;em&gt;await&lt;/em&gt; functionality to &lt;em&gt;any class&lt;/em&gt;, it doesn't mean every class &lt;em&gt;should&lt;/em&gt; have this functionality. In the case of &lt;code&gt;TryParseAsync&lt;/code&gt;, the code was made less readable, for no real benefit. In the case of &lt;code&gt;TimeSpan&lt;/code&gt;, the &lt;em&gt;await&lt;/em&gt; extension to the class did add value to the developer.  Basically, made an informed choice to use &lt;code&gt;GetAwaiter&lt;/code&gt;, and only do so where it makes sense.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/5360d1c3-89f6-4a08-9ee3-6ddbe1b44236"&gt;Cursed C# - Doing shenanigans in C#&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;199: 10-11-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Adding localization with dependency injection</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/11/09-localization-di</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/11/09-localization-di</guid>
			<pubDate>Wed, 09 Nov 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Localization&lt;/code&gt; is the &lt;em&gt;process of translating an application's resources into localized versions for each culture that the application will support&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Enabling this multi-culture, localization support is as easy as adding a few lines of code on application startup, and leveraging the &lt;code&gt;IStringLocalizer&lt;/code&gt; implementation when working with the variable, localized values.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="non-localized"&gt;Non-localized&lt;/h2&gt;
&lt;p&gt;Suppose we have an endpoint, which when called will return a string containing a random color:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;app.MapGet(&amp;quot;/get&amp;quot;, () =&amp;gt;
{
    var random = new Random();
    var randomValue = random.Next(3);

    var response = randomValue switch
    {
        0 =&amp;gt; &amp;quot;Blue&amp;quot;,
        1 =&amp;gt; &amp;quot;Green&amp;quot;,
        2 =&amp;gt; &amp;quot;Yellow&amp;quot;
    };

    return $&amp;quot;The color generated is: {response}&amp;quot;;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code will generate a random number between 1 and 3, and return a string indicating the color generated.&lt;/p&gt;
&lt;p&gt;Calling the endpoint returns the following (the colour value may change with each call):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;The color generated is: Blue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above return message the American spelling of &amp;quot;color&amp;quot; is returned, and not the British/South African spelling, &lt;em&gt;colour&lt;/em&gt;. We are going to add support for either variation, depending on the caller's culture - this is a fairly simple innocuous change, but the steps used here can be expended to add complete support for a different language.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="localized"&gt;Localized&lt;/h2&gt;
&lt;h3 id="defining-the-variations"&gt;Defining the variations&lt;/h3&gt;
&lt;p&gt;The first step is to define the various strings which will have different versions based on the culture. In our example this would be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The return message&lt;/li&gt;
&lt;li&gt;The three different colours&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this specific use case these three different colour values will not change between cultures, but if the application is to support multi-culture, its a good idea to &amp;quot;localize&amp;quot; all string values.&lt;/p&gt;
&lt;p&gt;The various culture specific strings are stored in &lt;code&gt;resx files&lt;/code&gt;, which usually reside in a &lt;code&gt;Resources&lt;/code&gt; folder. These files follow the naming standard of &lt;code&gt;{Class}.{culture}.resx&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this case, two files where added to the &lt;code&gt;Resources&lt;/code&gt; folder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Program.en-us.resx&lt;/li&gt;
&lt;li&gt;Program.en-za.resx&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As we are using minimal apis, the usage of the values will be in the &lt;code&gt;Program&lt;/code&gt; class, hence the name of the resx files is &lt;em&gt;Program&lt;/em&gt;. The cultures supported in our application will be &lt;code&gt;English-Unites States&lt;/code&gt; and &lt;code&gt;English-South African&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The resx files will both contain the &lt;code&gt;same names&lt;/code&gt; (keys), but each will have the specific localized values:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Program.en-us.resx&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Blue&lt;/td&gt;
&lt;td&gt;Blue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ColourResponseMessage&lt;/td&gt;
&lt;td&gt;The color generated is: {0}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Green&lt;/td&gt;
&lt;td&gt;Green&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Yellow&lt;/td&gt;
&lt;td&gt;Yellow&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;Program.en-za.resx&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Blue&lt;/td&gt;
&lt;td&gt;Blue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ColourResponseMessage&lt;/td&gt;
&lt;td&gt;The colour generated is: {0}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Green&lt;/td&gt;
&lt;td&gt;Green&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Yellow&lt;/td&gt;
&lt;td&gt;Yellow&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As mentioned, in this example only the &lt;em&gt;ColourResponseMessage&lt;/em&gt; will differentiate between the two, with the slightly different spelling&lt;/p&gt;
&lt;p&gt;Now that we have the variable values defined, we begin by &lt;em&gt;adding localization support to the dependency injection container&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="dependency-injection-configuration"&gt;Dependency injection configuration&lt;/h3&gt;
&lt;p&gt;During application startup, the following is added:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// add the localization support to the dependency injection container
// which includes the path to the resx files
builder.Services.AddLocalization(options =&amp;gt; options.ResourcesPath = &amp;quot;Resources&amp;quot;);

// add the cultures which will be supported
var supportedCultures = new[]
{
    new CultureInfo(&amp;quot;en-za&amp;quot;),
    new CultureInfo(&amp;quot;en-us&amp;quot;)
};
builder.Services.Configure&amp;lt;RequestLocalizationOptions&amp;gt;(options =&amp;gt; {
    options.DefaultRequestCulture = new RequestCulture(&amp;quot;en-us&amp;quot;);
    options.SupportedCultures = supportedCultures;
    options.SupportedUICultures = supportedCultures;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we configured the DI container with the generic localization interfaces and implementations, as well as explicitly specified which cultures will be supported.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="middleware-configuration"&gt;Middleware configuration&lt;/h3&gt;
&lt;p&gt;The next step is to configure the middleware pipeline (this is defined before any of the endpoints are defined):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;app.UseRequestLocalization(app.Services
    .GetRequiredService&amp;lt;IOptions&amp;lt;RequestLocalizationOptions&amp;gt;&amp;gt;().Value);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This middleware components will &lt;em&gt;automatically set culture information for requests based on information provided by the client&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Finally we are now able to take advantage of the localization capabilities and update the initial &lt;code&gt;/get&lt;/code&gt; endpoint defined above.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="localized-endpoint"&gt;Localized endpoint&lt;/h3&gt;
&lt;p&gt;To leverage the localization functionality, the &lt;code&gt;IStringLocalizer&lt;/code&gt; interface and implementation is used - this is injected from the dependency injection container. Instead of the string value being hardcoded, &lt;code&gt;IStringLocalizer&lt;/code&gt; is used to lookup the culture specific string by name:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// inject IStringLocalizer with the specific class
app.MapGet(&amp;quot;/get&amp;quot;, ([FromServices]IStringLocalizer&amp;lt;Program&amp;gt; localizer) =&amp;gt;
{
    var random = new Random();
    var randomValue = random.Next(3);

    // same logic as before
    var localizedResponse = randomValue switch 
    {
        // use IStringLocalizer to get the culture specific string
        // GetString also allows for arguments to be passed in and 
        // another localized string (the colour) is being passed in
        // as a parameter to format the ColourResponseMessage
        0 =&amp;gt; localizer.GetString(&amp;quot;ColourResponseMessage&amp;quot;, localizer.GetString(&amp;quot;Blue&amp;quot;)),
        1 =&amp;gt; localizer.GetString(&amp;quot;ColourResponseMessage&amp;quot;, localizer.GetString(&amp;quot;Green&amp;quot;)),
        2 =&amp;gt; localizer.GetString(&amp;quot;ColourResponseMessage&amp;quot;, localizer.GetString(&amp;quot;Yellow&amp;quot;)),
    };

    return localizedResponse.Value;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When &lt;em&gt;GetString&lt;/em&gt; is called on the &lt;em&gt;IStringLocalizer&lt;/em&gt; implementation, the current culture of the context is used - if no culture is explicitly supplied, then the default culture is used.&lt;/p&gt;
&lt;p&gt;Calling the endpoint as it stands returns the same result as before - the default culture is used:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;The color generated is: Yellow
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="changing-culture"&gt;Changing culture&lt;/h3&gt;
&lt;p&gt;When the middleware pipeline was updated in a previous step using &lt;em&gt;UseRequestLocalization&lt;/em&gt;, it added the functionality to &lt;code&gt;change the culture based on a query string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Calling the endpoint with the culture specified &lt;code&gt;/get?culture=en-za&lt;/code&gt; now results in the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;The colour generated is: Blue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The strings are now culture specific! Localization support has been added to the application.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Adding localization support to an api is a relatively easy process, and only requires the steps mentioned above. For large api's, if the task seems daunting and over whelming, due to the nature of the updates, it can be done in a phased approach, one endpoint at a time, making it a bit more manageable.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://code-maze.com/aspnetcore-localization/"&gt;Localization in ASP.NET Core&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;198: 09-11-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Target-type new expressions</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/11/08-target-type-new</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/11/08-target-type-new</guid>
			<pubDate>Tue, 08 Nov 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The target-type &lt;code&gt;new&lt;/code&gt; keyword can be used when declaring a new variable instance without having to specify the type, if .NET can infer the instance type (i.e. the &lt;code&gt;var&lt;/code&gt; keyword is not used).&lt;/p&gt;
&lt;p&gt;In addition, the &lt;code&gt;new keyword can also be used in other instances where .NET is able to infer the type - such as passing object instances to methods&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="instance-declaration"&gt;Instance declaration&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;new&lt;/code&gt; keyword can be used when declaring an instance of an object, as long as .NET can infer the type:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// var is used here,so the CreateRequest type
// needs to explicitly be stated so .NET knows the var type
var request = new CreateRequest(1);

// OR

// Explicitly define the type, but then just
// use the new keyword as the type can be inferred 
CreateRequest request1 = new(2);

// This is not valid. What is the type?
// var request2 = new(2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above usage is however not what this post is above - there is another more interesting technique using &lt;code&gt;new&lt;/code&gt; and that is using it when passing variables to a method.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="method-invocation"&gt;Method invocation&lt;/h2&gt;
&lt;p&gt;As mentioned, this technique about to be shown is the the &lt;em&gt;new and interesting&lt;/em&gt; part of this post. The explicit usage of the type can be ignored when .NET can infer the type (as above) - so it makes sense this extends to method parameters, where the parameter type is know.&lt;/p&gt;
&lt;p&gt;Consider this &lt;em&gt;CreateEntity&lt;/em&gt; method which takes a &lt;em&gt;CreateRequest&lt;/em&gt; as a parameter:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;void CreateEntity(CreateRequest request)
{
    // do stuff
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The parameter type is fixed, and known by .NET, so instead of doing this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;CreateEntity(new CreateRequest(3));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One can do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;CreateEntity(new (4));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More concise, but not necessarily more readable.&lt;/p&gt;
&lt;p&gt;This technique can also be extended for nested parameters.&lt;/p&gt;
&lt;p&gt;Consider this absurd setup of nested parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// takes an instance of DeleteRequestOne
record DeleteRequest(DeleteRequestOne Request);
// takes an instance of DeleteRequestTwo
record DeleteRequestOne(DeleteRequestTwo Request);
// takes an instance of DeleteRequestTwo
record DeleteRequestTwo(DeleteRequestThree request);
// takes an instance of DeleteRequestFour
record DeleteRequestThree(DeleteRequestFour request);
// takes an instance of DeleteRequestTwo
record DeleteRequestFour(DeleteRequestFive request);
// takes an int value
record DeleteRequestFive(int Id);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following is possible, as all the types are known and inferred:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;DeleteEntity(new(new(new(new(new(new(6)))))));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A very interesting concept, but again, not very readable at all.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;As mentioned, this is an interesting technique which does require less typing and results in more concise code - at the cost of readability. Use this technique sparingly where it makes sense.
Having said that, there are options in IDEs (in Visual Studio a the very least) to &lt;em&gt;display inline parameter hints&lt;/em&gt; which indicate the inferred types, so in the end the code is still readable, but with less typing. However this might not be available in all applications where the code is read (such as in Github or Azure DevOps code viewer).&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/buhakmeh/status/1580969384696217605"&gt;Khalid Abuhakmeh Tweet&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;197: 08-11-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>List capacity and performance</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/11/07-list-capacity</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/11/07-list-capacity</guid>
			<pubDate>Mon, 07 Nov 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;When declaring an instance of &lt;code&gt;List&lt;/code&gt;, explicitly specifying the &lt;code&gt;expected capacity can improve performance&lt;/code&gt; when adding items to the list. However, specifying the capacity incorrectly could be detrimental to performance.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="example"&gt;Example&lt;/h2&gt;
&lt;h3 id="no-capacity"&gt;No capacity&lt;/h3&gt;
&lt;p&gt;In the first example, a new &lt;code&gt;List&lt;/code&gt; is declared &lt;em&gt;without specifying a capacity&lt;/em&gt;, and then 20 items are added to the the list:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var list = new List&amp;lt;int&amp;gt;();

for (int i = 0; i &amp;lt; 20; i++)
{
    list.Add(i);
        Console.WriteLine($&amp;quot;List count: {list.Count} and &amp;quot; +
        $&amp;quot;the capacity is: {list.Capacity}&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking at the output, the default capacity when not explicitly specified is &lt;code&gt;4&lt;/code&gt;, and when this capacity is reached, &lt;code&gt;the capacity is doubled&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;List count: 1 and the capacity is: 4
List count: 2 and the capacity is: 4
List count: 3 and the capacity is: 4
List count: 4 and the capacity is: 4
List count: 5 and the capacity is: 8
List count: 6 and the capacity is: 8
List count: 7 and the capacity is: 8
List count: 8 and the capacity is: 8
List count: 9 and the capacity is: 16
List count: 10 and the capacity is: 16
List count: 11 and the capacity is: 16
List count: 12 and the capacity is: 16
List count: 13 and the capacity is: 16
List count: 14 and the capacity is: 16
List count: 15 and the capacity is: 16
List count: 16 and the capacity is: 16
List count: 17 and the capacity is: 32
List count: 18 and the capacity is: 32
List count: 19 and the capacity is: 32
List count: 20 and the capacity is: 32
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="with-capacity"&gt;With capacity&lt;/h3&gt;
&lt;p&gt;To specify the capacity, the value is passed to the constructor of the &lt;code&gt;List&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// set the capacity to 10. Half the expected capacity
var list = new List&amp;lt;int&amp;gt;(10);

for (int i = 0; i &amp;lt; 20; i++)
{
    list.Add(i);
    Console.WriteLine($&amp;quot;List count: {list.Count} and &amp;quot; +
        $&amp;quot;the capacity is: {list.Capacity}&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking at the output, the capacity starts at 10, and is only doubled once:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;List count: 1 and the capacity is: 10
List count: 2 and the capacity is: 10
List count: 3 and the capacity is: 10
List count: 4 and the capacity is: 10
List count: 5 and the capacity is: 10
List count: 6 and the capacity is: 10
List count: 7 and the capacity is: 10
List count: 8 and the capacity is: 10
List count: 9 and the capacity is: 10
List count: 10 and the capacity is: 10
List count: 11 and the capacity is: 20
List count: 12 and the capacity is: 20
List count: 13 and the capacity is: 20
List count: 14 and the capacity is: 20
List count: 15 and the capacity is: 20
List count: 16 and the capacity is: 20
List count: 17 and the capacity is: 20
List count: 18 and the capacity is: 20
List count: 19 and the capacity is: 20
List count: 20 and the capacity is: 20
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="benchmarks"&gt;Benchmarks&lt;/h2&gt;
&lt;p&gt;So how does specifying the capacity effect performance?&lt;/p&gt;
&lt;p&gt;In the below examples, a &lt;code&gt;List&lt;/code&gt; instance is declared, with the capacity explicitly set to varying sizes and then filled with values. The benchmarks evaluated performance when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no capacity specified&lt;/li&gt;
&lt;li&gt;the capacity was defined as exactly the expected size&lt;/li&gt;
&lt;li&gt;the capacity was defined as a half of the expected size&lt;/li&gt;
&lt;li&gt;the capacity was defined as a quarter of the expected size&lt;/li&gt;
&lt;li&gt;the capacity was defined as a tenth of the expected size&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code snippets for the benchmarks were as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;
[Benchmark(Baseline = true)]
public void NoCapacity()
{
    /// no capacity specified
    var list = new List&amp;lt;int&amp;gt;();

    // Iterations was either 10, 1000, or 100000
    for (int i = 0; i &amp;lt; Iterations; i++)
    {
        list.Add(i);
    }
}

[Benchmark]
public void WithExactCapacity()
{
    // here the list defined with exact capacity
    var list = new List&amp;lt;int&amp;gt;(Iterations);

    for (int i = 0; i &amp;lt; Iterations; i++)
    {
        list.Add(i);
    }
}

[Benchmark]
public void WithHalfCapacity()
{
    // for the fractional tests, Iterations
    // was divided by 2, 4 and 10 (not all shown here)
    var list = new List&amp;lt;int&amp;gt;(Iterations / 2);

    for (int i = 0; i &amp;lt; Iterations; i++)
    {
        list.Add(i);
    }
}

// other tests trimmed

&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="items"&gt;10 items&lt;/h3&gt;
&lt;p&gt;Benchmarking adding 10 items to the list:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Iterations&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Ratio&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen0&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen1&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen2&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Allocated&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Alloc Ratio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;NoCapacity&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td style="text-align: right;"&gt;51.72 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0344&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;216 B&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WithExactCapacity&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td style="text-align: right;"&gt;22.74 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.44&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0153&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;96 B&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.44&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WithHalfCapacity&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td style="text-align: right;"&gt;34.05 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.66&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0229&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;144 B&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.67&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WithQuarterCapacity&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td style="text-align: right;"&gt;57.53 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.11&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0395&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;248 B&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WithTenthCapacity&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td style="text-align: right;"&gt;69.32 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.34&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0446&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;280 B&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.30&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Benchmarking adding 1000 items to the list:&lt;/p&gt;
&lt;h3 id="items-1"&gt;1000 items&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Iterations&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Ratio&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen0&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen1&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen2&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Allocated&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Alloc Ratio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;NoCapacity&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1,714.12 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.3409&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0248&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;8424 B&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WithExactCapacity&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1,297.63 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.76&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.6447&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0095&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;4056 B&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WithHalfCapacity&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1,435.71 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.84&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.9689&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0210&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;6080 B&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.72&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WithQuarterCapacity&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1,525.41 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.89&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.1311&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0210&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;7104 B&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.84&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WithTenthCapacity&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1,779.44 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.04&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.9989&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.0687&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;12552 B&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.49&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Benchmarking adding 100 000 items to the list:&lt;/p&gt;
&lt;h3 id="items-2"&gt;100 000 items&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Iterations&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Ratio&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen0&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen1&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen2&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Allocated&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Alloc Ratio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;NoCapacity&lt;/td&gt;
&lt;td&gt;100000&lt;/td&gt;
&lt;td style="text-align: right;"&gt;344,487.97 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;285.6445&lt;/td&gt;
&lt;td style="text-align: right;"&gt;285.6445&lt;/td&gt;
&lt;td style="text-align: right;"&gt;285.6445&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1049072 B&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WithExactCapacity&lt;/td&gt;
&lt;td&gt;100000&lt;/td&gt;
&lt;td style="text-align: right;"&gt;227,840.62 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.66&lt;/td&gt;
&lt;td style="text-align: right;"&gt;124.7559&lt;/td&gt;
&lt;td style="text-align: right;"&gt;124.7559&lt;/td&gt;
&lt;td style="text-align: right;"&gt;124.7559&lt;/td&gt;
&lt;td style="text-align: right;"&gt;400098 B&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.38&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WithHalfCapacity&lt;/td&gt;
&lt;td&gt;100000&lt;/td&gt;
&lt;td style="text-align: right;"&gt;236,859.59 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.69&lt;/td&gt;
&lt;td style="text-align: right;"&gt;181.6406&lt;/td&gt;
&lt;td style="text-align: right;"&gt;181.6406&lt;/td&gt;
&lt;td style="text-align: right;"&gt;181.6406&lt;/td&gt;
&lt;td style="text-align: right;"&gt;600141 B&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.57&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WithQuarterCapacity&lt;/td&gt;
&lt;td&gt;100000&lt;/td&gt;
&lt;td style="text-align: right;"&gt;344,779.88 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;199.7070&lt;/td&gt;
&lt;td style="text-align: right;"&gt;199.7070&lt;/td&gt;
&lt;td style="text-align: right;"&gt;199.7070&lt;/td&gt;
&lt;td style="text-align: right;"&gt;700171 B&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.67&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WithTenthCapacity&lt;/td&gt;
&lt;td&gt;100000&lt;/td&gt;
&lt;td style="text-align: right;"&gt;466,319.55 ns&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.37&lt;/td&gt;
&lt;td style="text-align: right;"&gt;333.0078&lt;/td&gt;
&lt;td style="text-align: right;"&gt;333.0078&lt;/td&gt;
&lt;td style="text-align: right;"&gt;333.0078&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1240264 B&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;From the results, one can see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In all cases, setting the list capacity to the &lt;code&gt;exact expected size is twice as fast&lt;/code&gt; as not setting a capacity&lt;/li&gt;
&lt;li&gt;In most cases, setting the list capacity &lt;code&gt;explicitly can result in significantly faster performance&lt;/code&gt; over not setting the capacity&lt;/li&gt;
&lt;li&gt;In some cases however, explicitly setting the &lt;code&gt;list capacity to a value which is too small, is slower&lt;/code&gt; than not setting a capacity at all - in the benchmarks, setting the capacity to 1/10th of the expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;When instantiating a list, it can be beneficial to set the capacity to the estimated final size. Even setting it to a fraction of the final expected size can be beneficial to performance.&lt;br /&gt;
However setting the capacity to a value too small can be detrimental to performance, in which case its better to not set a capacity at all. Benchmark the specific use case, with the expected capacity and make an informed decision on how to set (or not set) the capacity.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://tomaszs2.medium.com/c-11-wants-to-be-your-friend-db4a31ed9710"&gt;What’s new in C# 11? Dev friendly features&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;196: 07-11-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Switch expression and string interpolation</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/11/04-interpolation-switch</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/11/04-interpolation-switch</guid>
			<pubDate>Fri, 04 Nov 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;C# 11 is introducing the ability to &lt;code&gt;use switch expressions inside a string interpolation expression&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This allows for more simplified code, as instead of creating a separate method to be used once-off when generating the string, all the &lt;em&gt;string building&lt;/em&gt; logic can be contained in a single place.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="use-case"&gt;Use case&lt;/h2&gt;
&lt;p&gt;In our use case, we want to convert a numerical grade (e.g. 89%), to a string representation (&amp;quot;A&amp;quot; in this case). We also want to be able to output both of these values in a string.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="separate-expression-pre-c-11"&gt;Separate expression - pre C# 11&lt;/h3&gt;
&lt;p&gt;Prior to C# 11 it was not possible for &lt;em&gt;interpolation expressions&lt;/em&gt; to be &lt;em&gt;switch expressions&lt;/em&gt; directly - the expression had to be a separate method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// method which converts a numeric grade value
// to a string representation
public string GetGradeAsString(int grade) =&amp;gt; grade switch
{
    &amp;gt; 90 =&amp;gt; &amp;quot;A+&amp;quot;,
    &amp;gt; 80 =&amp;gt; &amp;quot;A&amp;quot;,
    &amp;gt; 70 =&amp;gt; &amp;quot;B&amp;quot;,
    &amp;gt; 60 =&amp;gt; &amp;quot;C&amp;quot;,
    &amp;gt; 50 =&amp;gt; &amp;quot;D&amp;quot;,
    &amp;gt; 40 =&amp;gt; &amp;quot;E&amp;quot;,
    _ =&amp;gt; &amp;quot;F&amp;quot;
};

var studentGrade = 89;

// using string interpolation, and calling the method defined
Console.WriteLine($&amp;quot;{studentGrade} converted to &amp;quot; +
    $&amp;quot;a string is {GetGradeAsString(studentGrade)}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is nothing wrong with this approach, and it will continue to work with C# 11 - however the &lt;em&gt;issue&lt;/em&gt; here, is that if the conversion is only ever required once (when outputting the data), a method was required to be defined.&lt;/p&gt;
&lt;p&gt;Is defining a method a big deal? No
Will it create massive overhead? No
Is there a slightly easier way in C# 11? Yes.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="embedded-expression-c-11"&gt;Embedded expression - C# 11&lt;/h3&gt;
&lt;p&gt;C# 11 allows for &lt;code&gt;switch expressions to be used directly in interpolated strings&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var studentGrade = 89;

// a separate method is not required
Console.WriteLine($&amp;quot;{studentGrade} converted to a string is {
    studentGrade switch
    {
        &amp;gt; 90 =&amp;gt; &amp;quot;A+&amp;quot;,
        &amp;gt; 80 =&amp;gt; &amp;quot;A&amp;quot;,
        &amp;gt; 70 =&amp;gt; &amp;quot;B&amp;quot;,
        &amp;gt; 60 =&amp;gt; &amp;quot;C&amp;quot;,
        &amp;gt; 50 =&amp;gt; &amp;quot;D&amp;quot;,
        &amp;gt; 40 =&amp;gt; &amp;quot;E&amp;quot;,
        _ =&amp;gt; &amp;quot;F&amp;quot;
    }}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The same outcome as below, just slightly more concise and contained code.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;This is not a massive enhancement, but it does help reduce unnecessary ceremony (creating a method) when not required - ultimately resulting in cleaner, more concise and quicker to write code when the use case applies.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://tomaszs2.medium.com/c-11-wants-to-be-your-friend-db4a31ed9710"&gt;What’s new in C# 11? Dev friendly features&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;195: 04-11-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Primitive obsession and Value Records </title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/11/03-value-records</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/11/03-value-records</guid>
			<pubDate>Thu, 03 Nov 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The C# &lt;code&gt;record&lt;/code&gt; type can provide a clean, quick and easy way to overcome &lt;em&gt;primitive obsession&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Primitive obsession&lt;/em&gt;, as the name implies, is the overuse of primitive types (int, string, Guid, etc) to represent more complex business or domain concepts.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="primitive"&gt;Primitive&lt;/h2&gt;
&lt;p&gt;Let's look at an example, of a (very simplified) &lt;em&gt;Order&lt;/em&gt; entity:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Order
{
    public int OrderId { get; set; }

    public decimal OrderTotal { get; set; }

    public int ItemCount { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On the surface, this is all good. This will work and is probably what most developer are familiar with when it comes to entities.&lt;/p&gt;
&lt;p&gt;However, the above class structure allows for the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var order = new Order
{
    OrderId = 100,
    ItemCount = 2,
    OrderTotal = 148.95m
};

// This doesn't make sense!
order.OrderId = order.OrderId * 2;
// No!?
order.ItemCount = -10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As primitive types are used for &lt;em&gt;domain business concepts&lt;/em&gt; such as &lt;code&gt;OrderId&lt;/code&gt; or &lt;code&gt;ItemCount&lt;/code&gt;, these values can be manipulated in a which doesn't make sense in their business or domain context.&lt;/p&gt;
&lt;p&gt;Of course an option is to constantly perform validation on the &lt;em&gt;Order&lt;/em&gt; to ensure it is in a valid state - but another option is to use &lt;code&gt;Value Objects&lt;/code&gt;, which will be explored in the next section.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="value-object"&gt;Value object&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;Value object&lt;/code&gt; is a simple, light-weight wrapper around the primitive type, which can also provide some validation for the internal primitive type.&lt;/p&gt;
&lt;h3 id="value-record"&gt;Value record&lt;/h3&gt;
&lt;p&gt;In the referenced article, Stephen Cleary introduces a concept called &lt;code&gt;Value Record&lt;/code&gt; - leveraging the C# &lt;code&gt;record&lt;/code&gt; and &lt;code&gt;struct&lt;/code&gt; types, a simple &lt;em&gt;Value Object&lt;/em&gt; can easily be defined with one line of code.&lt;/p&gt;
&lt;p&gt;To replace the &lt;em&gt;int OrderId&lt;/em&gt; above:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public readonly record struct OrderId(int Value);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using this technique has a number of benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;immutability&lt;/li&gt;
&lt;li&gt;equality, hash code and &lt;em&gt;ToString&lt;/em&gt; support built in&lt;/li&gt;
&lt;li&gt;value-type wrapper, with no additional memory allocated&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id="usage"&gt;Usage&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;Order&lt;/em&gt; entity can now be updated to use the &lt;em&gt;OrderId&lt;/em&gt; &lt;code&gt;value record&lt;/code&gt; (as well as other properties as well):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Order
{
    public OrderId OrderId { get; set; }

    public OrderTotal OrderTotal { get; set; }

    public ItemCount ItemCount { get; set; }
}


public readonly record struct OrderId(int Value);

public readonly record struct OrderTotal(decimal Value);

public readonly record struct ItemCount(int Value);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the usage:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var order = new Order
{
    OrderId = new OrderId(100),
    ItemCount = new ItemCount(2),
    OrderTotal = new OrderTotal(148.95m)
};

// An added benefit of records (over a class) 
// is that they can be printed as well
// The ToString() method can also be overwritten
// if required
Console.WriteLine(order.OrderId);

// ERROR - compilation error 
// this is now not possible as the 
// OrderId is immutable

// order.OrderId.Value = order.OrderId.Value * 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of the above:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;OrderId { Value = 100 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;value records&lt;/code&gt; can be expanded with additional (light-weight) validation, but the &lt;em&gt;record struct&lt;/em&gt; method shown above allows for a quick, simple implementation.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;A very useful as well as quick easy technique to implement - but also an technique which can be misused (as it is so easy to implement). Not all properties should be or need to be converted to a value object. However where it does make sense, the &lt;code&gt;value record&lt;/code&gt; method is a slick, minimal way to achieve this.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://blog.stephencleary.com/2022/10/modern-csharp-techniques-2-value-records.html"&gt;Modern C# Techniques, Part 2: Value Records&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;194: 03-11-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Platform specific path separator</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/11/02-directory-separator</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/11/02-directory-separator</guid>
			<pubDate>Wed, 02 Nov 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The static &lt;code&gt;Path&lt;/code&gt; class contains a number of helpful, platform specific properties (and methods) to assist when working with filenames and file paths. These include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The operating system specific directory separator character&lt;/li&gt;
&lt;li&gt;The operating system specific alternate directory separator character&lt;/li&gt;
&lt;li&gt;The operating system specific path separator character&lt;/li&gt;
&lt;li&gt;The operating system specific volume separator character&lt;/li&gt;
&lt;li&gt;The operating system specific invalid filename characters&lt;/li&gt;
&lt;li&gt;The operating system specific invalid path characters&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id="code-snippet"&gt;Code snippet&lt;/h2&gt;
&lt;p&gt;A simple code snippet to demonstrate how to access the various characters:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// All the separator characters are available on the Path static class
Console.WriteLine($&amp;quot;DirectorySeparatorChar: '{Path.DirectorySeparatorChar}'&amp;quot;);
Console.WriteLine($&amp;quot;AltDirectorySeparatorChar: '{Path.AltDirectorySeparatorChar}'&amp;quot;);
Console.WriteLine($&amp;quot;PathSeparator: '{Path.PathSeparator}'&amp;quot;);
Console.WriteLine($&amp;quot;VolumeSeparatorChar: '{Path.VolumeSeparatorChar}'&amp;quot;);

// display all the invalid file name characters
Console.WriteLine($&amp;quot;Invalid filename chars:&amp;quot;);
foreach(var chr in Path.GetInvalidFileNameChars())
{
    Console.WriteLine($&amp;quot;   {chr}&amp;quot;);
}

// display all the invalid path characters
Console.WriteLine($&amp;quot;Invalid path chars:&amp;quot;);
foreach (var chr in Path.GetInvalidPathChars())
{
    Console.WriteLine($&amp;quot;   {chr}&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="windows-output"&gt;Windows output&lt;/h3&gt;
&lt;p&gt;The output when running the above on a Windows environment - the invalid filename and invalid path characters have been trimmed as the list for Windows is fairly long:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;DirectorySeparatorChar: '\'
AltDirectorySeparatorChar: '/'
PathSeparator: ';'
VolumeSeparatorChar: ':'
Invalid filename chars:
   &amp;quot;
   &amp;lt;
   &amp;gt;
   |

   ☺
   ☻
   ♥
   ♦
   ♣
   ♠
// trimmed
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id="linux-output"&gt;Linux output&lt;/h3&gt;
&lt;p&gt;Running the same code in a Linux environment yields different output - no trimming of the list here, as apparently Linux supports a larger list of characters than Windows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-terminal"&gt;DirectorySeparatorChar: '/'
AltDirectorySeparatorChar: '/'
PathSeparator: ':'
VolumeSeparatorChar: '/'
Invalid filename chars:
   ?
   /
Invalid path chars:
   ?
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Leveraging the above functionality makes building up and validating file names and file paths much easier, simpler and quicker, and should definitely be preferred over rolling out ones own path builder or filename validator.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://code-maze.com/csharp-path-class/"&gt;Path Class in C#&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;193: 02-11-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Generic List property wrapping</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/11/01-list-property-design</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/11/01-list-property-design</guid>
			<pubDate>Tue, 01 Nov 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;When a class has a &lt;code&gt;generic list property&lt;/code&gt;, a good idea is to put it behind a class to encapsulate all the functionality specific to the list in a single place, creating cleaner, more maintainable code.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="non-clean-version"&gt;Non-clean version&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Non-clean&lt;/em&gt; is not entirely accurate, as there is nothing inherently wrong with this approach, its just not &lt;em&gt;as clean&lt;/em&gt; as the class-wrapped version detailed in the next section.&lt;/p&gt;
&lt;p&gt;In this example we have a &lt;code&gt;Album&lt;/code&gt; class, which contains a &lt;code&gt;list of Song titles&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Album
{
    public string Artist { get; set; }

    public List&amp;lt;string&amp;gt; Songs { get; set; }

    public int ReleaseYear { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose throughout the code we are required to get the &lt;code&gt;top 5 songs in the list&lt;/code&gt; (perhaps to display in a summary on various screens within the application).&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="linq-everywhere"&gt;LINQ everywhere&lt;/h3&gt;
&lt;p&gt;One option is to perform the LINQ query to get the top 5 songs whenever it is required:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// This LINQ will be used every time the top 5 is required
IEnumerable&amp;lt;string&amp;gt;? top5Songs = album.Songs.OrderBy(s =&amp;gt; s).Take(5);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will work, but leads to duplication of code, and is difficult to maintain.&lt;/p&gt;
&lt;h3 id="helper-method"&gt;Helper method&lt;/h3&gt;
&lt;p&gt;Another option it to add a method into a &lt;em&gt;helper&lt;/em&gt; class, or even into the &lt;em&gt;Album&lt;/em&gt; class&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Album
{
    public string Artist { get; set; }

    public List&amp;lt;string&amp;gt; Songs { get; set; }

    public int ReleaseYear { get; set; }

    public IEnumerable&amp;lt;string&amp;gt; GetTop5Songs()
    {
        return Songs.OrderBy(s =&amp;gt; s).Take(5);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, this will work and solves the code duplication issue. However the &lt;em&gt;helper&lt;/em&gt; class, or &lt;em&gt;Album&lt;/em&gt; class might end up containing numerous methods for numerous properties and ends up containing a wide range of functionality not directly related to it.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="clean-version"&gt;Clean version&lt;/h2&gt;
&lt;h3 id="class-wrapper"&gt;Class wrapper&lt;/h3&gt;
&lt;p&gt;Another cleaner option, is to wrap the generic list in its own class, which can then hold all the methods related to the list:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// inherit from List
public class Songs : List&amp;lt;string&amp;gt;
{
    public IEnumerable&amp;lt;string&amp;gt; GetTop5Songs()
    {
        return this.OrderBy(s =&amp;gt; s).Take(5);
    }

    // other methods related to Songs
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The wrapper class inherits from &lt;code&gt;List&lt;/code&gt; so automatically gets all the same functionality which was available when using &lt;code&gt;List&amp;lt;string&amp;gt;&lt;/code&gt; explicitly.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Album&lt;/em&gt; class will then use the &lt;code&gt;Songs&lt;/code&gt; class, instead of &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; to represent the songs of an album:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Album
{
    public string Artist { get; set; }

    public Songs Songs { get; set; }

    public int ReleaseYear { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The relevent methods are now available on the property themselves:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var top5Songs = album.Songs.GetTop5Songs();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cleaner, more maintainable and easier to find!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;This is a relatively small change in code structure, but can definitely make a difference in the readability and maintainability of the code, bring related methods together in one place. Easier for a developer to find when using them, as well as when required to make changes to them!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/shorts/FL0qKaumcxo"&gt;Raw Coding-put generics behind classes&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;192: 01-11-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Jagged array in C#</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/10/31-jagged-array</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/10/31-jagged-array</guid>
			<pubDate>Mon, 31 Oct 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;jagged array&lt;/code&gt; is an &lt;em&gt;array of arrays&lt;/em&gt;, where each internal array can be of varying length.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="array"&gt;Array&lt;/h3&gt;
&lt;p&gt;A quick recap on a traditional one dimensional array:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var array = new int[10];
int[] array1 = new int[10];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The array size is defined when the variable is instantiated - this array is defined to hold up to 10 int's.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="multi-dimensional-array"&gt;Multi-dimensional array&lt;/h3&gt;
&lt;p&gt;A multiple dimensional is declared and instantiated the same way as a one-dimensional array:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// declare a two dimensional array
int[,] multiArray = new int[10,10];

// a three dimensional array
int[,,] multiArray1 = new int[10, 10, 10];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With multiple directional arrays, the size of the dimension is &lt;em&gt;fixed&lt;/em&gt;. In the above two-dimensional array for example, a 10x10 array is defined - it can be thought of a &lt;em&gt;grid with 10 columns and 10 rows&lt;/em&gt;. The important aspect is that each row &lt;code&gt;will always&lt;/code&gt; have 10 columns at most.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="jagged-array"&gt;Jagged array&lt;/h3&gt;
&lt;p&gt;A &lt;code&gt;jagged array&lt;/code&gt; is an &lt;em&gt;array of arrays&lt;/em&gt;, where the internal array is of varying length.&lt;/p&gt;
&lt;p&gt;There is a subtle difference when declaring a &lt;code&gt;jagged array&lt;/code&gt; vs declaring a multiple dimensional array:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Jagged array
int[][] jaggedArray1 = new int[10][];

// For comparison - multi directional array
int[,] multiArray = new int[10,10]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The jagged array &lt;em&gt;jaggedArray1&lt;/em&gt;, has &lt;em&gt;10 rows, but each row has varying column length&lt;/em&gt; - a second size is not specified when declaring the array. As it stands now, each row is null by default - the array in each row needs to be initialized:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;jaggedArray1[0] = new int[5];
jaggedArray1[1] = new int[3];
jaggedArray1[2] = new int[1];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first 3 rows are being initialized to each have a different number of items. We have an &lt;em&gt;array of arrays&lt;/em&gt;, with each internal array being of different sizes.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;This is not functionality I've personally ever had to use - but I am sure it definitely does have its practical uses cases. Just being aware the functionality exists can help make better, more informed design choices going forward.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/"&gt;Arrays (C# Programming Guide)&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;191: 31-10-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>SQL COALESCE uses</title>
			<link>https://alwaysdeveloping.net/dailydrop/2022/10/28-sql-coalesce</link>
			<description>always learning | always growing</description>
			<guid>https://alwaysdeveloping.net/dailydrop/2022/10/28-sql-coalesce</guid>
			<pubDate>Fri, 28 Oct 2022 01:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="daily-knowledge-drop"&gt;Daily Knowledge Drop&lt;/h2&gt;
&lt;p&gt;The SQL COALESCE method will &lt;code&gt;return the first non-null expressing among its arguments&lt;/code&gt;. On the surface this is a relatively simple, but useful feature, however it can be leveraged to also perform more complex operations.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="first-non-null"&gt;First non-NULL&lt;/h2&gt;
&lt;p&gt;The first use of &lt;code&gt;COALESCE&lt;/code&gt; is straight-forward, and aligns with official definition - it &lt;em&gt;can be used to find the first non-null in a list of values&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;-- declare variables
DECLARE &amp;#64;one int, &amp;#64;two int, &amp;#64;three int, &amp;#64;firstNonNull int
-- set all to NULL except one
SELECT &amp;#64;one = null, &amp;#64;two = null, &amp;#64;three = 3

-- nulls are ignored
SELECT &amp;#64;firstNonNull = COALESCE(&amp;#64;one, &amp;#64;two, &amp;#64;three)
PRINT &amp;#64;firstNonNull
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of the above is &lt;code&gt;3&lt;/code&gt;, the first &lt;em&gt;non-null&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="data-pivot"&gt;Data pivot&lt;/h2&gt;
&lt;p&gt;Another useful, but maybe not obvious (based on the definition) use of &lt;code&gt;COALESCE&lt;/code&gt; is to pivot data - that is &lt;em&gt;convert rows of data into a single row and column&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;In this example we have a table of &lt;em&gt;Songs&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * FROM Song
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Id&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Artist&lt;/th&gt;
&lt;th&gt;YearReleased&lt;/th&gt;
&lt;th&gt;LengthInSeconds&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Everlong&lt;/td&gt;
&lt;td&gt;Foo Fighters&lt;/td&gt;
&lt;td&gt;1997&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;Learn to Fly&lt;/td&gt;
&lt;td&gt;Foo Fighters&lt;/td&gt;
&lt;td&gt;1999&lt;/td&gt;
&lt;td&gt;238&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Monkey Wrench&lt;/td&gt;
&lt;td&gt;Foo Fighters&lt;/td&gt;
&lt;td&gt;1997&lt;/td&gt;
&lt;td&gt;231&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;My Hero&lt;/td&gt;
&lt;td&gt;Foo Fighters&lt;/td&gt;
&lt;td&gt;1998&lt;/td&gt;
&lt;td&gt;260&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Executing the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;DECLARE &amp;#64;AllSongs VARCHAR(1000)
SELECT &amp;#64;AllSongs = COALESCE(&amp;#64;AllSongs, '') + [Name] + ';'
FROM Song

PRINT &amp;#64;AllSongs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Will result in &lt;code&gt;Everlong;Learn to Fly;Monkey Wrench;My Hero;&lt;/code&gt; being printed.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;COALESCE&lt;/code&gt; method will take each &lt;em&gt;Name&lt;/em&gt; field, and provided it is not null, append it to the &lt;em&gt;&amp;#64;AllSongs&lt;/em&gt; variable.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="execute-multiple-statements"&gt;Execute multiple statements&lt;/h2&gt;
&lt;p&gt;Another useful use of &lt;code&gt;COALESCE&lt;/code&gt; is to build up a SQL string to execute multiple statements at once. This extends on the previous example - instead of a table column value being appended to a variable, a built up string is appended.&lt;/p&gt;
&lt;p&gt;If we need to &lt;em&gt;select the data from ALL of the tables in the database&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;DECLARE &amp;#64;AllTablesSQL VARCHAR(1000)

-- query sys.tables to get a list of tables in the database
-- build up a SELECT statement based on the table name
SELECT  &amp;#64;AllTablesSQL = COALESCE(&amp;#64;AllTablesSQL, '') + 'SELECT * FROM [' + name + ']' + '; '
from sys.tables

PRINT &amp;#64;AllTablesSQL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output here is something along these lines (will obviously differ based on the tables in the database):
&lt;code&gt;SELECT * FROM [Auditing]; SELECT * FROM [Song]; SELECT * FROM [AlbumSales]; SELECT * FROM [Order]; &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This can now be manually executed to get all the data from the tables.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;I must admit I have encountered the &lt;code&gt;COALESCE&lt;/code&gt; method before, but never fully understood what it did or how it worked - but just understanding the basics of its usage will allow for very useful queries to be executed.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.mssqltips.com/sqlservertip/1521/the-many-uses-of-coalesce-in-sql-server/"&gt;The Many Uses of Coalesce in SQL Server&lt;/a&gt;&lt;/p&gt;
&lt;?# DailyDrop ?&gt;190: 28-10-2022&lt;?#/ DailyDrop ?&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>